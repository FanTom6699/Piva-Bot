# handlers/game_raid.py
import asyncio
import random
import logging
from datetime import datetime, timedelta
from contextlib import suppress

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, User
from aiogram.filters import Filter
from aiogram.filters.callback_data import CallbackData
from aiogram.exceptions import TelegramBadRequest

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ (–¥–æ–±–∞–≤–ª–µ–Ω—ã ..)
from database import Database
from settings import SettingsManager
from .common import check_user_registered

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
raid_router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
active_raid_tasks = {}

# --- CALLBACKDATA ---
class RaidCallbackData(CallbackData, prefix="raid"):
    action: str
    
class RaidAttackCallbackData(CallbackData, prefix="raid_attack"):
    action: str # 'normal' or 'strong'

# --- –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ ---

def format_health_bar(current: int, maximum: int, width: int = 10) -> str:
    if maximum == 0: return "[–ü–£–°–¢–û]"
    percent = current / maximum
    if percent < 0: percent = 0
    filled_blocks = int(percent * width)
    empty_blocks = width - filled_blocks
    return f"[{'‚ñà' * filled_blocks}{' ' * empty_blocks}] {int(percent * 100)}%"

async def generate_raid_message(db: Database, chat_id: int) -> dict:
    raid_data = await db.get_active_raid(chat_id)
    if not raid_data:
        return {"text": "–†–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", "reply_markup": None}
    
    chat_id, msg_id, health, max_health, reward, end_time_iso = raid_data
    end_time = datetime.fromisoformat(end_time_iso)
    time_left = end_time - datetime.now()
    
    if time_left.total_seconds() <= 0:
         time_str = "–í—Ä–µ–º—è –≤—ã—à–ª–æ!"
    else:
        days = time_left.days
        hours, rem = divmod(time_left.seconds, 3600)
        minutes, _ = divmod(rem, 60)
        time_str = f"{days}–¥ {hours}—á {minutes}–º" if days > 0 else f"{hours}—á {minutes}–º"

    health_bar = format_health_bar(health, max_health)
    
    text = (
        f"üö® <b>–í –ë–ê–†–ï –ü–ï–†–ï–ü–û–õ–û–•!</b> üö®\n\n"
        f"–ù–∞ –ø–æ—Ä–æ–≥–µ <b>–û–≥—Ä–æ–º–Ω—ã–π –í—ã—à–∏–±–∞–ª–∞</b>!\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <code>{health_bar}</code>\n"
        f"({health if health > 0 else 0} / {max_health})\n\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—É: <b>{reward} üç∫</b>\n"
        f"‚è≥ –ö–æ–Ω–µ—Ü —á–µ—Ä–µ–∑: <b>{time_str}</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚öîÔ∏è –ê–¢–ê–ö–û–í–ê–¢–¨", callback_data=RaidCallbackData(action="show_attack").pack()),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data=RaidCallbackData(action="info").pack())
        ]
    ])
    
    return {"text": text, "reply_markup": keyboard}

async def check_raid_status(chat_id: int, bot: Bot, db: Database, settings: SettingsManager):
    raid_data = await db.get_active_raid(chat_id)
    if not raid_data:
        return False
        
    chat_id, msg_id, health, max_health, reward, end_time_iso = raid_data
    end_time = datetime.fromisoformat(end_time_iso)
    
    is_ended = False
    final_text = ""

    if health <= 0:
        is_ended = True
        final_text = (
            f"üèÜ <b>–ü–û–ë–ï–î–ê!</b> üèÜ\n\n"
            f"–í—ã—à–∏–±–∞–ª–∞ –ø–æ–≤–µ—Ä–∂–µ–Ω! –ë–∞—Ä —Å–ø–∞—Å–µ–Ω! "
            f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–µ–π–¥–∞ –¥–µ–ª—è—Ç –º–µ–∂–¥—É —Å–æ–±–æ–π <b>{reward} üç∫</b>!"
        )
    elif datetime.now() >= end_time:
        is_ended = True
        final_text = (
            f"üò≠ <b>–ü–û–†–ê–ñ–ï–ù–ò–ï!</b> üò≠\n\n"
            f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã—à–∏–±–∞–ª–∞ –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º —Å–∏–ª–µ–Ω... "
            f"–ë–∞—Ä –∑–∞–∫—Ä—ã—Ç –Ω–∞ —É–±–æ—Ä–∫—É."
        )

    if is_ended:
        with suppress(TelegramBadRequest):
            await bot.unpin_chat_message(chat_id=chat_id, message_id=msg_id)
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
            
        participants = await db.get_all_raid_participants(chat_id)
        
        if health <= 0 and participants:
            reward_per_user = int(reward / len(participants))
            if reward_per_user > 0:
                final_text += f"\n\n–ö–∞–∂–¥—ã–π –∏–∑ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ {reward_per_user} üç∫!"
                for user_id, damage in participants:
                    await db.change_rating(user_id, reward_per_user)
            else:
                 final_text += "\n\n–¢–∞–∫ –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —á—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ –æ–∫—Ä—É–≥–ª–∏–ª–∞—Å—å –¥–æ –Ω—É–ª—è. –ù–æ –≤—ã —Å—Ä–∞–∂–∞–ª–∏—Å—å!"
        
        await bot.send_message(chat_id=chat_id, text=final_text, parse_mode='HTML')
        await db.delete_raid(chat_id)
        
        if chat_id in active_raid_tasks:
            active_raid_tasks[chat_id].cancel()
            del active_raid_tasks[chat_id]
            
        return False
    
    return True

async def raid_background_updater(chat_id: int, bot: Bot, db: Database, settings: SettingsManager):
    while True:
        try:
            is_active = await check_raid_status(chat_id, bot, db, settings)
            if not is_active:
                break
            
            await asyncio.sleep(settings.raid_reminder_hours * 3600)
            
            raid_data = await db.get_active_raid(chat_id)
            if raid_data:
                health, max_health = raid_data[2], raid_data[3]
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"<i>–ë–∏—Ç–≤–∞ —Å –í—ã—à–∏–±–∞–ª–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! ‚öîÔ∏è\n"
                         f"–û—Å—Ç–∞–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤—å—è: [{health}/{max_health}]\n"
                         f"–ñ–º–∏—Ç–µ –Ω–∞ –∑–∞–∫—Ä–µ–ø, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!</i>",
                    parse_mode='HTML'
                )
                
        except asyncio.CancelledError:
            logging.info(f"–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π–¥–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ raid_background_updater –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            await asyncio.sleep(60)

async def start_raid_event(chat_id: int, bot: Bot, db: Database, settings: SettingsManager):
    end_time = datetime.now() + timedelta(hours=settings.raid_duration_hours)
    
    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_data = await generate_raid_message(db, chat_id) # –≠—Ç–æ –ø–æ–∫–∞ —Ñ–µ–π–∫, –¥–∞–Ω–Ω—ã—Ö-—Ç–æ –Ω–µ—Ç
    message_data["text"] = (
        f"üö® <b>–í –ë–ê–†–ï –ü–ï–†–ï–ü–û–õ–û–•!</b> üö®\n\n"
        f"–ù–∞ –ø–æ—Ä–æ–≥–µ <b>–û–≥—Ä–æ–º–Ω—ã–π –í—ã—à–∏–±–∞–ª–∞</b>!\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <code>{format_health_bar(1, 1)}</code>\n"
        f"({settings.raid_boss_health} / {settings.raid_boss_health})\n\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—É: <b>{settings.raid_reward_pool} üç∫</b>\n"
        f"‚è≥ –ö–æ–Ω–µ—Ü —á–µ—Ä–µ–∑: <b>{settings.raid_duration_hours}—á 0–º</b>"
    )
    message_data["reply_markup"] = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚öîÔ∏è –ê–¢–ê–ö–û–í–ê–¢–¨", callback_data=RaidCallbackData(action="show_attack").pack()),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data=RaidCallbackData(action="info").pack())
        ]
    ])

    sent_message = await bot.send_message(
        chat_id=chat_id,
        text=message_data["text"],
        reply_markup=message_data["reply_markup"],
        parse_mode='HTML'
    )
    
    # 2. –ó–∞–∫—Ä–µ–ø–ª—è–µ–º
    with suppress(TelegramBadRequest):
        await bot.pin_chat_message(chat_id=chat_id, message_id=sent_message.message_id)
        
    # 3. –°–æ–∑–¥–∞–µ–º —Ä–µ–π–¥ –≤ –ë–î
    await db.create_raid(
        chat_id=chat_id,
        message_id=sent_message.message_id,
        health=settings.raid_boss_health,
        reward=settings.raid_reward_pool,
        end_time=end_time
    )
    
    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    task = asyncio.create_task(raid_background_updater(chat_id, bot, db, settings))
    active_raid_tasks[chat_id] = task


# --- –•–≠–ù–î–õ–ï–†–´ –ö–ù–û–ü–û–ö –†–ï–ô–î–ê ---

@raid_router.callback_query(RaidCallbackData.filter(F.action == "info"))
async def raid_info(callback: CallbackQuery, settings: SettingsManager):
    await callback.answer(
        text=f"–ê—Ç–∞–∫—É–π—Ç–µ –±–æ—Å—Å–∞!\n"
             f"‚Ä¢ –û–±—ã—á–Ω—ã–π —É–¥–∞—Ä: 1 —Ä–∞–∑ –≤ {settings.raid_hit_cooldown_minutes} –º–∏–Ω.\n"
             f"‚Ä¢ –°–∏–ª—å–Ω—ã–π —É–¥–∞—Ä: —Å—Ç–æ–∏—Ç {settings.raid_strong_hit_cost} üç∫.",
        show_alert=True
    )

@raid_router.callback_query(RaidCallbackData.filter(F.action == "show_attack"))
async def raid_show_attack(callback: CallbackQuery, bot: Bot, db: Database, settings: SettingsManager):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    if not await check_user_registered(callback, bot, db):
        return
        
    participant_data = await db.get_raid_participant(chat_id, user_id)
    cooldown = settings.raid_hit_cooldown_minutes * 60
    
    can_normal_attack = True
    time_since_hit = 999999
    if participant_data and participant_data[3]: # [3] - last_hit_time
        last_hit_time = datetime.fromisoformat(participant_data[3])
        time_since_hit = (datetime.now() - last_hit_time).total_seconds()
        if time_since_hit < cooldown:
            can_normal_attack = False
            
    balance = await db.get_user_beer_rating(user_id)
    cost = settings.raid_strong_hit_cost
    can_strong_attack = balance >= cost

    buttons = []
    if can_normal_attack:
        buttons.append(InlineKeyboardButton(
            text="üó°Ô∏è –û–±—ã—á–Ω—ã–π —É–¥–∞—Ä (–ì–æ—Ç–æ–≤–æ)", 
            callback_data=RaidAttackCallbackData(action="normal").pack()
        ))
    if can_strong_attack:
        buttons.append(InlineKeyboardButton(
            text=f"üí• –°–∏–ª—å–Ω—ã–π —É–¥–∞—Ä ({cost} üç∫)", 
            callback_data=RaidAttackCallbackData(action="strong").pack()
        ))
    
    if not buttons:
        await callback.answer(
            f"–í—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å! "
            f"–û–±—ã—á–Ω—ã–π —É–¥–∞—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ {int((cooldown - time_since_hit)/60)} –º–∏–Ω. "
            f"–î–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —É–¥–∞—Ä–∞ –Ω—É–∂–Ω–æ {cost} üç∫.",
            show_alert=True
        )
        return

    await callback.answer()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ç–∞–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[buttons]),
        ephemeral=True
    )

@raid_router.callback_query(RaidAttackCallbackData.filter())
async def raid_do_attack(callback: CallbackQuery, callback_data: RaidAttackCallbackData, bot: Bot, db: Database, settings: SettingsManager):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    action = callback_data.action

    if chat_id not in active_raid_tasks:
        return await callback.message.edit_text("–≠—Ç–æ—Ç —Ä–µ–π–¥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    raid_data = await db.get_active_raid(chat_id)
    if not raid_data:
        return await callback.message.edit_text("–≠—Ç–æ—Ç —Ä–µ–π–¥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    damage = 0
    cooldown = settings.raid_hit_cooldown_minutes * 60
    
    if action == "normal":
        participant_data = await db.get_raid_participant(chat_id, user_id)
        if participant_data and participant_data[3]:
            last_hit_time = datetime.fromisoformat(participant_data[3])
            time_since_hit = (datetime.now() - last_hit_time).total_seconds()
            if time_since_hit < cooldown:
                await callback.answer(f"–û–±—ã—á–Ω—ã–π —É–¥–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤!", show_alert=True)
                return await callback.message.delete()
        
        damage = random.randint(settings.raid_normal_hit_damage_min, settings.raid_normal_hit_damage_max)
        await db.add_raid_participant(chat_id, user_id, damage)
        await callback.message.edit_text(f"<i>{callback.from_user.full_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞!</i>", parse_mode='HTML')

    elif action == "strong":
        cost = settings.raid_strong_hit_cost
        balance = await db.get_user_beer_rating(user_id)
        if balance < cost:
            await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üç∫ –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —É–¥–∞—Ä–∞!", show_alert=True)
            return await callback.message.delete()
            
        await db.change_rating(user_id, -cost)
        damage = random.randint(settings.raid_strong_hit_damage_min, settings.raid_strong_hit_damage_max)
        await db.add_raid_participant(chat_id, user_id, damage)
        await callback.message.edit_text(f"<i>{callback.from_user.full_name} –∫–∏–¥–∞–µ—Ç –±–æ—á–æ–Ω–æ–∫ –∏ –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞!</i>", parse_mode='HTML')

    await db.update_raid_health(chat_id, damage)
    new_data = await generate_raid_message(db, chat_id)
    
    try:
        await bot.edit_message_text(
            text=new_data["text"],
            chat_id=chat_id,
            message_id=raid_data[1], # message_id
            reply_markup=new_data["reply_markup"],
            parse_mode='HTML'
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–π–¥–∞: {e}")
             
    await check_raid_status(chat_id, bot, db, settings)
