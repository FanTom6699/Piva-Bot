# main.py
import asyncio
import logging
import os
import sys

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# --- –ò–º–ø–æ—Ä—Ç—ã ---
import config
from database import Database
from settings import SettingsManager

# --- –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –û–ë–ê —Ä–æ—É—Ç–µ—Ä–∞ ---
from handlers import main_router 
from mafia_handlers import mafia_router 

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –†–µ–π–¥–∞ (–ø—Ä–∏–≤—è–∑–∞–Ω –∫ –û–°–ù–û–í–ù–û–ú–£ –±–æ—Ç—É)
from handlers.game_raid import raid_background_updater, active_raid_tasks, check_raid_status

# --- –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á –†–µ–π–¥–∞ (–ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –û—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É) ---
async def start_active_raid_tasks(bot: Bot, db: Database, settings: SettingsManager):
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π–¥–æ–≤...")
    active_raids = await db.get_all_active_raids()
    count = 0
    for raid_data in active_raids:
        chat_id = raid_data[0]
        is_still_active = await check_raid_status(chat_id, bot, db, settings)
        
        if is_still_active and chat_id not in active_raid_tasks:
            task = asyncio.create_task(raid_background_updater(chat_id, bot, db, settings))
            active_raid_tasks[chat_id] = task
            count += 1
    logging.info(f"–ó–∞–ø—É—â–µ–Ω–æ {count} —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π–¥–æ–≤.")

# --- –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –û—Å–Ω–æ–≤–Ω–æ–≥–æ –ë–æ—Ç–∞ ---
async def start_main_bot(db: Database, settings: SettingsManager):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ (–ü–∏–≤–æ, –†–µ–π–¥—ã)"""
    load_dotenv()
    # –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config.py –∏–ª–∏ .env
    BOT_TOKEN = os.getenv("BOT_TOKEN", getattr(config, "BOT_TOKEN", None))
    
    if not BOT_TOKEN:
        logging.error("–¢–æ–∫–µ–Ω –¥–ª—è 'BOT_TOKEN' –Ω–µ –Ω–∞–π–¥–µ–Ω! –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—â–∏–µ –ë–î –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    dp["db"] = db
    dp["settings"] = settings
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ì–õ–ê–í–ù–´–ô —Ä–æ—É—Ç–µ—Ä
    dp.include_router(main_router)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–π–¥–æ–≤ (–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏—Ö –∫ —ç—Ç–æ–º—É –±–æ—Ç—É)
    await start_active_raid_tasks(bot, db, settings)
    
    logging.info("--- üçª –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (–ü–∏–≤–æ/–†–µ–π–¥) –∑–∞–ø—É—â–µ–Ω. ---")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# --- –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ú–∞—Ñ–∏—è-–ë–æ—Ç–∞ ---
async def start_mafia_bot(db: Database, settings: SettingsManager):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ú–∞—Ñ–∏—è-–±–æ—Ç–∞"""
    load_dotenv()
    # –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config.py –∏–ª–∏ .env
    BOT_TOKEN_MAFIA = os.getenv("BOT_TOKEN_MAFIA", getattr(config, "BOT_TOKEN_MAFIA", None))

    if not BOT_TOKEN_MAFIA:
        logging.warning("–¢–æ–∫–µ–Ω 'BOT_TOKEN_MAFIA' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ú–∞—Ñ–∏—è-–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        return

    bot = Bot(token=BOT_TOKEN_MAFIA, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –¢–ï –ñ–ï –°–ê–ú–´–ï –ë–î –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    dp["db"] = db
    dp["settings"] = settings
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ—É—Ç–µ—Ä –ú–ê–§–ò–ò
    dp.include_router(mafia_router) 
    
    logging.info("--- üïµÔ∏è‚Äç‚ôÇÔ∏è –ú–∞—Ñ–∏—è-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. ---")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è async main (–∑–∞–ø—É—Å–∫–∞–µ—Ç –û–ë–ê –±–æ—Ç–∞) ---
async def main():
    logging.basicConfig(level=logging.INFO)
    
    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–ë–î –∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏) ---
    db_path = os.getenv("DB_PATH", "bot_database.db")
    if "RENDER" in os.environ:
         db_path = "/data/bot_database.db"
         logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω Render.com. –ü—É—Ç—å –∫ –ë–î: {db_path}")

    db = Database(db_name=db_path)
    await db.initialize()
    
    settings = SettingsManager() 
    await settings.load_settings(db)
    
    logging.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤...")

    # --- –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ —Ñ—É–Ω–∫—Ü–∏–∏ –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û ---
    await asyncio.gather(
        start_main_bot(db, settings),
        start_mafia_bot(db, settings)
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
