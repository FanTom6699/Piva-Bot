# handlers/game_ladder.py
import asyncio
import random
import html # --- –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω ---
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from database import Database
from settings import SettingsManager
from handlers.common import check_user_registered

game_router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä {chat_id: LadderGame}
active_games = {}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π (—à–∞–Ω—Å %, –º–Ω–æ–∂–∏—Ç–µ–ª—å)
LADDER_LEVELS = [
    (90, 1.2), (80, 1.5), (70, 2.0), (60, 2.5), (50, 3.5),
    (40, 5.0), (30, 7.0), (20, 10.0), (10, 15.0), (5, 25.0)
]
MAX_LEVEL = len(LADDER_LEVELS)

class LadderGame:
    def __init__(self, player_id, player_name, stake):
        self.player_id = player_id
        self.player_name = player_name
        self.stake = stake
        self.current_level = 1
        self.current_win = 0
        self.message_id = None
        self.chat_id = None
        self.lock = asyncio.Lock() # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π

    @property
    def current_chance(self):
        return LADDER_LEVELS[self.current_level - 1][0]

    @property
    def current_multiplier(self):
        return LADDER_LEVELS[self.current_level - 1][1]

# --- –ö–û–ú–ê–ù–î–ê –ó–ê–ü–£–°–ö–ê –ò–ì–†–´ ---
@game_router.message(Command("ladder"))
async def cmd_ladder(message: Message, bot: Bot, db: Database, settings: SettingsManager):
    if message.chat.type == "private":
        return await message.answer("‚ùå –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
    if not await check_user_registered(message, bot, db):
        return
    if message.chat.id in active_games:
        return await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞!")

    args = message.text.split()
    if len(args) < 2:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å) ---
        return await message.answer(
            "üßê <b>–•–º, –Ω–µ —Ç–∞–∫...</b>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/ladder &lt;—Å—Ç–∞–≤–∫–∞&gt;</code>\n"
            "<i>(–ù–∞–ø—Ä–∏–º–µ—Ä: /ladder 100)</i>",
            parse_mode='HTML'
        )

    try:
        stake = int(args[1])
    except ValueError:
        return await message.answer("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

    min_stake = settings.ladder_min_stake
    if stake < min_stake:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π) ---
        return await message.answer(f"üí∞ <b>–ú–µ–ª–∫–æ–≤–∞—Ç–æ...</b>\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è '–õ–µ—Å–µ–Ω–∫–∏': <b>{min_stake}</b> üç∫.")

    user_id = message.from_user.id
    user_rating = await db.get_user_beer_rating(user_id)
    if user_rating < stake:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å) ---
        return await message.answer(f"üçª <b>–ú–∞–ª–æ–≤–∞—Ç–æ '–ø–∏–≤–∞'!</b>\n–£ —Ç–µ–±—è –≤—Å–µ–≥–æ {user_rating} üç∫, –∞ –Ω—É–∂–Ω–æ {stake} üç∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    await db.update_user_beer_rating(user_id, -stake)
    
    game = LadderGame(user_id, message.from_user.full_name, stake)
    game.chat_id = message.chat.id
    active_games[message.chat.id] = game

    game_message = await message.answer(
        generate_ladder_text(game),
        reply_markup=generate_ladder_keyboard(game),
        parse_mode='HTML'
    )
    game.message_id = game_message.message_id

# --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê –ò–ì–†–´ ---
def generate_ladder_text(game: LadderGame) -> str:
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –¢–µ–∫—Å—Ç –∏–≥—Ä—ã (–±–æ–ª–µ–µ –∞–∑–∞—Ä—Ç–Ω—ã–π) ---
    text = (
        f"ü™ú <b>–ü–∏–≤–Ω–∞—è –õ–µ—Å–µ–Ω–∫–∞</b> ü™ú\n\n"
        # --- –¢–ï–•. –£–õ–£–ß–®–ï–ù–ò–ï: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è ---
        f"–ò–≥—Ä–æ–∫: <b>{html.escape(game.player_name)}</b> (–£—Ä–æ–≤–µ–Ω—å {game.current_level})\n"
        f"–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞: <b>{game.stake} üç∫</b>\n"
        f"–†–∏—Å–∫ –æ–ø—Ä–∞–≤–¥–∞–Ω: <b>{game.current_win} üç∫</b> (–®–∞–Ω—Å {game.current_chance}%)\n\n"
        f"<i>–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—É–ø–µ–Ω—å. –ö—É–¥–∞ –≤–µ–∑–µ—Ç —É–¥–∞—á–∞?</i>"
    )
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø 4 ---
    return text

# --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–ù–û–ü–û–ö ---
def generate_ladder_keyboard(game: LadderGame) -> InlineKeyboardMarkup:
    buttons = []
    # 3 –∫–Ω–æ–ø–∫–∏ –¥–ª—è —à–∞–≥–∞
    step_buttons = [InlineKeyboardButton(text="‚ùî", callback_data=f"ladder_step_{i}") for i in range(3)]
    buttons.append(step_buttons)
    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–±—Ä–∞—Ç—å" (–ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å 1-–≥–æ —É—Ä–æ–≤–Ω—è)
    if game.current_level > 1:
        buttons.append([
            InlineKeyboardButton(text=f"üí∞ –ó–∞–±—Ä–∞—Ç—å {game.current_win} üç∫", callback_data="ladder_take")
        ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–ô –ù–ê –ö–ù–û–ü–ö–ò ---
@game_router.callback_query(F.data.startswith("ladder_"))
async def ladder_button_callback(callback: CallbackQuery, bot: Bot, db: Database):
    chat_id = callback.message.chat.id
    if chat_id not in active_games:
        return await callback.answer("‚ùå –≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!", show_alert=True)

    game = active_games[chat_id]
    if callback.from_user.id != game.player_id:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 5: –¢–µ–∫—Å—Ç –∞–ª–µ—Ä—Ç–∞ (—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π) ---
        return await callback.answer("ü™ú –ù–µ —Ç–≤–æ—è –ª–µ—Å–µ–Ω–∫–∞!", show_alert=True)
    
    async with game.lock:
        if callback.data == "ladder_take":
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 6: –¢–µ–∫—Å—Ç (–ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à) ---
            await end_ladder_game(bot, db, game, win=True, reason="take")
            return await callback.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –∑–∞–±—Ä–∞–ª {game.current_win} üç∫.", show_alert=True)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞
        if random.randint(1, 100) <= game.current_chance:
            # –£—Å–ø–µ—à–Ω—ã–π —à–∞–≥
            game.current_win = int(game.stake * game.current_multiplier)
            
            if game.current_level == MAX_LEVEL:
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 7: –¢–µ–∫—Å—Ç (–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å) ---
                await end_ladder_game(bot, db, game, win=True, reason="max_level")
                return await callback.answer("–¢—ã –ø—Ä–æ—à–µ–ª –≤—Å—é –ª–µ—Å–µ–Ω–∫—É!", show_alert=True)
                
            game.current_level += 1
            await callback.message.edit_text(
                generate_ladder_text(game),
                reply_markup=generate_ladder_keyboard(game),
                parse_mode='HTML'
            )
            await callback.answer(f"–£—Ä–æ–≤–µ–Ω—å {game.current_level}! –®–∞–Ω—Å: {game.current_chance}%")
            
        else:
            # –ü—Ä–æ–≤–∞–ª
            await end_ladder_game(bot, db, game, win=False, reason="fail")
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 8: –¢–µ–∫—Å—Ç –∞–ª–µ—Ä—Ç–∞ (–ü—Ä–æ–∏–≥—Ä—ã—à) ---
            await callback.answer("üí• –û–π! –°—Ç—É–ø–µ–Ω—å–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å...", show_alert=True)

# --- –ó–ê–í–ï–†–®–ï–ù–ò–ï –ò–ì–†–´ ---
async def end_ladder_game(bot: Bot, db: Database, game: LadderGame, win: bool, reason: str):
    player_name = html.escape(game.player_name)
    
    if win:
        final_win = game.current_win
        await db.update_user_beer_rating(game.player_id, final_win)
        
        if reason == "take":
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 6 (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ): –¢–µ–∫—Å—Ç "–ó–∞–±—Ä–∞–ª" ---
            text = (
                f"üí∞ <b>–û—Ç–ª–∏—á–Ω—ã–π —É–ª–æ–≤!</b> üí∞\n\n"
                f"<b>{player_name}</b> —Ä–µ—à–∏–ª –Ω–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å –∏ –∑–∞–±–∏—Ä–∞–µ—Ç <b>{final_win} üç∫</b>.\n"
                f"<i>–£–¥–∞—á–∞ –ª—é–±–∏—Ç —Å–º–µ–ª—ã—Ö... –Ω–æ –∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã—Ö —É–≤–∞–∂–∞–µ—Ç!</i>"
            )
        else: # reason == "max_level"
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 7 (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ): –¢–µ–∫—Å—Ç "–ü–æ–±–µ–¥–∞" ---
            text = (
                f"üèÜ <b>–í–ï–†–®–ò–ù–ê –õ–ï–°–ï–ù–ö–ò!</b> üèÜ\n\n"
                f"–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! <b>{player_name}</b> –ø—Ä–æ—à–µ–ª –≤—Å–µ {MAX_LEVEL} —É—Ä–æ–≤–Ω–µ–π!\n"
                f"<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {final_win} üç∫!</b>"
            )
    else:
        # reason == "fail"
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 8 (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ): –¢–µ–∫—Å—Ç "–ü—Ä–æ–∏–≥—Ä—ã—à" ---
        text = (
            f"üí• <b>–û–π! –°—Ç—É–ø–µ–Ω—å–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å!</b> üí•\n\n"
            f"<b>{player_name}</b> –æ—Å—Ç—É–ø–∏–ª—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ {game.current_level}.\n"
            f"–°—Ç–∞–≤–∫–∞ <b>{game.stake} üç∫</b> —Å–≥–æ—Ä–µ–ª–∞. –û–±–∏–¥–Ω–æ!"
        )

    await bot.edit_message_text(
        chat_id=game.chat_id,
        message_id=game.message_id,
        text=text,
        parse_mode='HTML',
        reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    )
    
    if game.chat_id in active_games:
        del active_games[game.chat_id]
