# handlers/game_raid.py
import asyncio
import random
import logging
from datetime import datetime, timedelta
from contextlib import suppress

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Filter
from aiogram.filters.callback_data import CallbackData
from aiogram.exceptions import TelegramBadRequest

from database import Database
from settings import settings_manager
from .common import check_user_registered

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
raid_router = Router()
db = Database(db_name='/data/bot_database.db')

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
active_raid_tasks = {}

# --- CALLBACKDATA ---
class RaidCallbackData(CallbackData, prefix="raid"):
    action: str
    
class RaidAttackCallbackData(CallbackData, prefix="raid_attack"):
    action: str # 'normal' or 'strong'

# --- –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ ---

def format_health_bar(current: int, maximum: int, width: int = 10) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–∞—Ä –∑–¥–æ—Ä–æ–≤—å—è."""
    if maximum == 0: return "[–ü–£–°–¢–û]"
    percent = current / maximum
    filled_blocks = int(percent * width)
    empty_blocks = width - filled_blocks
    return f"[{'‚ñà' * filled_blocks}{' ' * empty_blocks}] {int(percent * 100)}%"

async def generate_raid_message(chat_id: int) -> dict:
    """–ì–æ—Ç–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–π–¥–µ."""
    raid_data = await db.get_active_raid(chat_id)
    if not raid_data:
        return {"text": "–†–µ–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", "reply_markup": None}
    
    chat_id, msg_id, health, max_health, reward, end_time_iso = raid_data
    end_time = datetime.fromisoformat(end_time_iso)
    time_left = end_time - datetime.now()
    
    if time_left.total_seconds() <= 0:
         time_str = "–í—Ä–µ–º—è –≤—ã—à–ª–æ!"
    else:
        hours, rem = divmod(time_left.seconds, 3600)
        minutes, _ = divmod(rem, 60)
        time_str = f"{time_left.days}–¥ {hours}—á {minutes}–º"

    health_bar = format_health_bar(health, max_health)
    
    text = (
        f"üö® <b>–í –ë–ê–†–ï –ü–ï–†–ï–ü–û–õ–û–•!</b> üö®\n\n"
        f"–ù–∞ –ø–æ—Ä–æ–≥–µ <b>–û–≥—Ä–æ–º–Ω—ã–π –í—ã—à–∏–±–∞–ª–∞</b>!\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <code>{health_bar}</code>\n"
        f"({health} / {max_health})\n\n"
        f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–±–µ–¥—É: <b>{reward} üç∫</b>\n"
        f"‚è≥ –ö–æ–Ω–µ—Ü —á–µ—Ä–µ–∑: <b>{time_str}</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚öîÔ∏è –ê–¢–ê–ö–û–í–ê–¢–¨", callback_data=RaidCallbackData(action="show_attack").pack()),
            InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data=RaidCallbackData(action="info").pack())
        ]
    ])
    
    return {"text": text, "reply_markup": keyboard}

async def check_raid_status(chat_id: int, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ä–µ–π–¥ (–ø–æ–±–µ–¥–∞ –∏–ª–∏ –≤—Ä–µ–º—è)."""
    raid_data = await db.get_active_raid(chat_id)
    if not raid_data:
        return
        
    chat_id, msg_id, health, max_health, reward, end_time_iso = raid_data
    end_time = datetime.fromisoformat(end_time_iso)
    
    is_ended = False
    final_text = ""

    if health <= 0:
        is_ended = True
        final_text = (
            f"üèÜ <b>–ü–û–ë–ï–î–ê!</b> üèÜ\n\n"
            f"–í—ã—à–∏–±–∞–ª–∞ –ø–æ–≤–µ—Ä–∂–µ–Ω! –ë–∞—Ä —Å–ø–∞—Å–µ–Ω! "
            f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–µ–π–¥–∞ –¥–µ–ª—è—Ç –º–µ–∂–¥—É —Å–æ–±–æ–π <b>{reward} üç∫</b>!"
        )
    elif datetime.now() >= end_time:
        is_ended = True
        final_text = (
            f"üò≠ <b>–ü–û–†–ê–ñ–ï–ù–ò–ï!</b> üò≠\n\n"
            f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –í—ã—à–∏–±–∞–ª–∞ –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º —Å–∏–ª–µ–Ω... "
            f"–ë–∞—Ä –∑–∞–∫—Ä—ã—Ç –Ω–∞ —É–±–æ—Ä–∫—É."
        )

    if is_ended:
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        with suppress(TelegramBadRequest):
            await bot.unpin_chat_message(chat_id=chat_id, message_id=msg_id)
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
            
        participants = await db.get_all_raid_participants(chat_id)
        
        if health <= 0 and participants:
            reward_per_user = int(reward / len(participants))
            if reward_per_user > 0:
                final_text += f"\n\n–ö–∞–∂–¥—ã–π –∏–∑ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ {reward_per_user} üç∫!"
                for user_id, damage in participants:
                    await db.change_rating(user_id, reward_per_user)
            else:
                 final_text += "\n\n–¢–∞–∫ –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —á—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ –æ–∫—Ä—É–≥–ª–∏–ª–∞—Å—å –¥–æ –Ω—É–ª—è. –ù–æ –≤—ã —Å—Ä–∞–∂–∞–ª–∏—Å—å!"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(chat_id=chat_id, text=final_text, parse_mode='HTML')
        
        # –£–¥–∞–ª—è–µ–º —Ä–µ–π–¥ –∏–∑ –ë–î
        await db.delete_raid(chat_id)
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–∞–º—è—Ç–∏
        if chat_id in active_raid_tasks:
            active_raid_tasks[chat_id].cancel()
            del active_raid_tasks[chat_id]
            
        return False # –†–µ–π–¥ –∑–∞–≤–µ—Ä—à–µ–Ω
    
    return True # –†–µ–π–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è

async def raid_background_updater(chat_id: int, bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–π–¥ –∏ —à–ª–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    while True:
        try:
            is_active = await check_raid_status(chat_id, bot)
            if not is_active:
                break # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ —Ä–µ–π–¥ –æ–∫–æ–Ω—á–µ–Ω
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await asyncio.sleep(settings_manager.raid_reminder_hours * 3600)
            
            raid_data = await db.get_active_raid(chat_id)
            if raid_data:
                health, max_health = raid_data[2], raid_data[3]
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"<i>–ë–∏—Ç–≤–∞ —Å –í—ã—à–∏–±–∞–ª–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! ‚öîÔ∏è\n"
                         f"–û—Å—Ç–∞–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤—å—è: [{health}/{max_health}]\n"
                         f"–ñ–º–∏—Ç–µ –Ω–∞ –∑–∞–∫—Ä–µ–ø, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!</i>",
                    parse_mode='HTML'
                )
                
        except asyncio.CancelledError:
            logging.info(f"–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π–¥–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ raid_background_updater –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
            await asyncio.sleep(60) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è


# --- –•–≠–ù–î–õ–ï–†–´ –ö–ù–û–ü–û–ö –†–ï–ô–î–ê ---

@raid_router.callback_query(RaidCallbackData.filter(F.action == "info"))
async def raid_info(callback: CallbackQuery):
    await callback.answer(
        text=f"–ê—Ç–∞–∫—É–π—Ç–µ –±–æ—Å—Å–∞!\n"
             f"‚Ä¢ –û–±—ã—á–Ω—ã–π —É–¥–∞—Ä: 1 —Ä–∞–∑ –≤ {settings_manager.raid_hit_cooldown_minutes} –º–∏–Ω.\n"
             f"‚Ä¢ –°–∏–ª—å–Ω—ã–π —É–¥–∞—Ä: —Å—Ç–æ–∏—Ç {settings_manager.raid_strong_hit_cost} üç∫.",
        show_alert=True
    )

@raid_router.callback_query(RaidCallbackData.filter(F.action == "show_attack"))
async def raid_show_attack(callback: CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    
    if not await check_user_registered(callback, bot=callback.bot):
        return
        
    participant_data = await db.get_raid_participant(chat_id, user_id)
    cooldown = settings_manager.raid_hit_cooldown_minutes * 60
    
    can_normal_attack = True
    if participant_data:
        last_hit_time = datetime.fromisoformat(participant_data[3])
        time_since_hit = (datetime.now() - last_hit_time).total_seconds()
        if time_since_hit < cooldown:
            can_normal_attack = False
            
    balance = await db.get_user_beer_rating(user_id)
    cost = settings_manager.raid_strong_hit_cost
    can_strong_attack = balance >= cost

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞—Ç–∞–∫–∏
    buttons = []
    if can_normal_attack:
        buttons.append(InlineKeyboardButton(
            text="üó°Ô∏è –û–±—ã—á–Ω—ã–π —É–¥–∞—Ä (–ì–æ—Ç–æ–≤–æ)", 
            callback_data=RaidAttackCallbackData(action="normal").pack()
        ))
    if can_strong_attack:
        buttons.append(InlineKeyboardButton(
            text=f"üí• –°–∏–ª—å–Ω—ã–π —É–¥–∞—Ä ({cost} üç∫)", 
            callback_data=RaidAttackCallbackData(action="strong").pack()
        ))
    
    if not buttons:
        await callback.answer(
            f"–í—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å! "
            f"–û–±—ã—á–Ω—ã–π —É–¥–∞—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ {int((cooldown - time_since_hit)/60)} –º–∏–Ω. "
            f"–î–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —É–¥–∞—Ä–∞ –Ω—É–∂–Ω–æ {cost} üç∫.",
            show_alert=True
        )
        return

    await callback.answer()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞—Ç–∞–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[buttons]),
        ephemeral=True # –°–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –Ω–∞–∂–∞–ª
    )

@raid_router.callback_query(RaidAttackCallbackData.filter())
async def raid_do_attack(callback: CallbackQuery, callback_data: RaidAttackCallbackData, bot: Bot):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    action = callback_data.action

    if chat_id not in active_raid_tasks: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–π–¥
        return await callback.message.edit_text("–≠—Ç–æ—Ç —Ä–µ–π–¥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    raid_data = await db.get_active_raid(chat_id)
    if not raid_data:
        return await callback.message.edit_text("–≠—Ç–æ—Ç —Ä–µ–π–¥ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    damage = 0
    cooldown = settings_manager.raid_hit_cooldown_minutes * 60
    
    if action == "normal":
        participant_data = await db.get_raid_participant(chat_id, user_id)
        if participant_data:
            last_hit_time = datetime.fromisoformat(participant_data[3])
            time_since_hit = (datetime.now() - last_hit_time).total_seconds()
            if time_since_hit < cooldown:
                await callback.answer(f"–û–±—ã—á–Ω—ã–π —É–¥–∞—Ä –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤!", show_alert=True)
                return await callback.message.delete()
        
        damage = random.randint(settings_manager.raid_normal_hit_damage_min, settings_manager.raid_normal_hit_damage_max)
        await db.add_raid_participant(chat_id, user_id, damage)
        await callback.message.edit_text(f"<i>{callback.from_user.full_name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞!</i>", parse_mode='HTML')

    elif action == "strong":
        cost = settings_manager.raid_strong_hit_cost
        balance = await db.get_user_beer_rating(user_id)
        if balance < cost:
            await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üç∫ –¥–ª—è —Å–∏–ª—å–Ω–æ–≥–æ —É–¥–∞—Ä–∞!", show_alert=True)
            return await callback.message.delete()
            
        await db.change_rating(user_id, -cost)
        damage = random.randint(settings_manager.raid_strong_hit_damage_min, settings_manager.raid_strong_hit_damage_max)
        await db.add_raid_participant(chat_id, user_id, damage)
        await callback.message.edit_text(f"<i>{callback.from_user.full_name} –∫–∏–¥–∞–µ—Ç –±–æ—á–æ–Ω–æ–∫ –∏ –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞!</i>", parse_mode='HTML')

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –±–æ—Å—Å–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await db.update_raid_health(chat_id, damage)
    new_data = await generate_raid_message(chat_id)
    
    try:
        await bot.edit_message_text(
            text=new_data["text"],
            chat_id=chat_id,
            message_id=raid_data[1], # message_id
            reply_markup=new_data["reply_markup"],
            parse_mode='HTML'
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–π–¥–∞: {e}")
             
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–±–∏–ª –ª–∏ —ç—Ç–æ—Ç —É–¥–∞—Ä –±–æ—Å—Å–∞
    await check_raid_status(chat_id, bot)
