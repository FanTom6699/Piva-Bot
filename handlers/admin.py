# handlers/admin.py
import html
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from database import Database
# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –£–±–∏—Ä–∞–µ–º 'SETTINGS_KEYS' –∏–∑ –∏–º–ø–æ—Ä—Ç–∞ ---
from settings import SettingsManager

admin_router = Router()

# --- –§–ò–õ–¨–¢–† –ê–î–ú–ò–ù–ê ---
class AdminFilter:
    def __init__(self, db: Database):
        self.db = db
    async def __call__(self, message: Message) -> bool:
        return await self.db.is_admin(message.from_user.id)

# --- –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–û–í ---
@admin_router.message(Command("admin"), AdminFilter)
async def cmd_admin(message: Message):
    # (–¢–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ–º–µ–Ω—è–ª–∏, –æ—Å—Ç–∞—é—Ç—Å—è)
    await message.answer(
        "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å '–ü–∏–≤–Ω–æ–π'</b> üîß\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –±–æ—Å—Å. –ß—Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º?\n\n"
        "‚Ä¢ <code>/set &lt;–∫–ª—é—á&gt; &lt;–∑–Ω–∞—á–µ–Ω–∏–µ&gt;</code> - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.\n"
        "‚Ä¢ <code>/give &lt;id&gt; &lt;–∫–æ–ª-–≤–æ&gt;</code> - –í—ã–¥–∞—Ç—å '–ø–∏–≤–æ' —é–∑–µ—Ä—É.\n"
        "‚Ä¢ <code>/stats</code> - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
        "‚Ä¢ <code>/reload_settings</code> - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î.",
        parse_mode='HTML'
    )

@admin_router.message(Command("set"), AdminFilter)
async def cmd_set(message: Message, db: Database, settings: SettingsManager):
    args = message.text.split()
    if len(args) < 3:
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ü–æ–ª—É—á–∞–µ–º SETTINGS_KEYS –∏–∑ 'settings', –∞ –Ω–µ –∏–∑ –∏–º–ø–æ—Ä—Ç–∞ ---
        keys_list = "\n".join(f"‚Ä¢ <code>{k}</code> ({v.get('type', 'str')}) - {v.get('desc', 'N/A')}" for k, v in settings.SETTINGS_KEYS.items())
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø 2 ---
        
        return await message.answer(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (SET)</b>\n"
            "<code>/set &lt;–∫–ª—é—á&gt; &lt;–∑–Ω–∞—á–µ–Ω–∏–µ&gt;</code>\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:</b>\n"
            f"{keys_list}",
            parse_mode='HTML'
        )

    key = args[1]
    value_str = args[2]

    try:
        await settings.set(key, value_str)
        await message.answer(
            f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n"
            f"<code>{key}</code> = <code>{html.escape(value_str)}</code>",
            parse_mode='HTML'
        )
    except Exception as e:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:</b>\n{e}")

@admin_router.message(Command("give"), AdminFilter)
async def cmd_give(message: Message, db: Database):
    args = message.text.split()
    if len(args) < 3:
        return await message.answer(
            "üéÅ <b>–í—ã–¥–∞—á–∞ '–ü–∏–≤–∞' (GIVE)</b>\n"
            "<code>/give &lt;user_id&gt; &lt;–∫–æ–ª-–≤–æ&gt;</code>\n\n"
            "<i>(<code>user_id</code> –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /id –∏–ª–∏ –≤ /stats)</i>",
            parse_mode='HTML'
        )
        
    try:
        user_id = int(args[1])
        amount = int(args[2])
    except ValueError:
        return await message.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

    if not await db.user_exists(user_id):
        return await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: <code>{user_id}</code>")

    await db.update_user_beer_rating(user_id, amount)
    
    await message.answer(
        f"üçª <b>–£–≥–æ—â–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ!</b>\n"
        f"<b>{amount} üç∫</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É <code>{user_id}</code>.",
        parse_mode='HTML'
    )

@admin_router.message(Command("stats"), AdminFilter)
async def cmd_stats(message: Message, db: Database):
    total_users = await db.get_total_users()
    total_chats = await db.get_total_chats()
    total_rating = await db.get_total_beer_rating()
    top_user = await db.get_top_users(1)
    
    top_user_str = "N/A"
    if top_user:
        user = top_user[0]
        user_name = html.escape(f"{user['first_name']} {user.get('last_name', '')}".strip())
        top_user_str = f"{user_name} (ID: <code>{user['user_id']}</code>) - <b>{user['beer_rating']}</b> üç∫"

    await message.answer(
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞</b>\n\n"
        f"üë§ –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: <b>{total_users}</b>\n"
        f"üë• –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: <b>{total_chats}</b>\n"
        f"üç∫ –í—Å–µ–≥–æ '–ø–∏–≤–∞' –≤ —Å–∏—Å—Ç–µ–º–µ: <b>{total_rating}</b>\n\n"
        f"üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫: {top_user_str}",
        parse_mode='HTML'
    )

@admin_router.message(Command("reload_settings"), AdminFilter)
async def cmd_reload_settings(message: Message, settings: SettingsManager):
    try:
        await settings.load_settings()
        await message.answer(
            "üîÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!</b>\n"
            "–í—Å–µ '–∫—Ä–∞–Ω—ã' —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ-–Ω–æ–≤–æ–º—É."
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:\n{e}")
