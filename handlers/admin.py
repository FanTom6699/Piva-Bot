# handlers/admin.py
import asyncio
from contextlib import suppress
import logging

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, Filter, StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ (–¥–æ–±–∞–≤–ª–µ–Ω—ã ..)
import config
from database import Database
from settings import SettingsManager
from .game_raid import start_raid_event # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
admin_router = Router()

# --- FSM –°–û–°–¢–û–Ø–ù–ò–Ø ---
class AdminStates(StatesGroup):
    broadcast_message = State()
    give_beer_user = State()
    give_beer_amount = State()
    waiting_for_setting_value = State()
    select_raid_chat = State()

# --- –§–ò–õ–¨–¢–†–´ ---
class IsAdmin(Filter):
    async def __call__(self, message: Message | CallbackQuery) -> bool:
        return message.from_user.id == config.ADMIN_ID

# --- CALLBACKDATA –§–ê–ë–†–ò–ö–ò ---
class AdminCallbackData(CallbackData, prefix="admin"):
    action: str

class AdminSettingsCallbackData(CallbackData, prefix="admin_set"):
    setting_key: str

class AdminRaidCallbackData(CallbackData, prefix="admin_raid"):
    action: str
    chat_id: int = 0
    page: int = 0


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é ---
async def get_main_admin_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üç∫ –í—ã–¥–∞—Ç—å –ø–∏–≤–æ", callback_data=AdminCallbackData(action="give_beer").pack())],
        [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=AdminCallbackData(action="broadcast").pack())],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=AdminCallbackData(action="stats").pack())],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data=AdminCallbackData(action="settings").pack())],
        [InlineKeyboardButton(text="‚öîÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–≤–µ–Ω—Ç–∞–º–∏", callback_data=AdminCallbackData(action="events").pack())]
    ])

async def get_settings_menu(settings_manager: SettingsManager) -> (str, InlineKeyboardMarkup):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    text = (
        f"{settings_manager.get_all_settings_text()}\n\n"
        f"<b>–ö–∞–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö—É–ª–¥–∞—É–Ω /beer", callback_data=AdminSettingsCallbackData(setting_key="beer_cooldown").pack())],
        [InlineKeyboardButton(text="–®–∞–Ω—Å –î–∂–µ–∫–ø–æ—Ç–∞ (1 –∫ X)", callback_data=AdminSettingsCallbackData(setting_key="jackpot_chance").pack())],
        [InlineKeyboardButton(text="–ö—É–ª–¥–∞—É–Ω –†—É–ª–µ—Ç–∫–∏", callback_data=AdminSettingsCallbackData(setting_key="roulette_cooldown").pack())],
        [
            InlineKeyboardButton(text="–ú–∏–Ω. –†—É–ª–µ—Ç–∫–∞", callback_data=AdminSettingsCallbackData(setting_key="roulette_min_bet").pack()),
            InlineKeyboardButton(text="–ú–∞–∫—Å. –†—É–ª–µ—Ç–∫–∞", callback_data=AdminSettingsCallbackData(setting_key="roulette_max_bet").pack())
        ],
        [
            InlineKeyboardButton(text="–ú–∏–Ω. –õ–µ—Å–µ–Ω–∫–∞", callback_data=AdminSettingsCallbackData(setting_key="ladder_min_bet").pack()),
            InlineKeyboardButton(text="–ú–∞–∫—Å. –õ–µ—Å–µ–Ω–∫–∞", callback_data=AdminSettingsCallbackData(setting_key="ladder_max_bet").pack())
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data=AdminCallbackData(action="main_admin_menu").pack())]
    ])
    return text, keyboard

async def get_events_menu() -> (str, InlineKeyboardMarkup):
    text = "<b>‚öîÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–≤–µ–Ω—Ç–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≤–µ–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞:"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëπ –í—ã—à–∏–±–∞–ª–∞ (–†–µ–π–¥-–ë–æ—Å—Å)", callback_data=AdminRaidCallbackData(action="menu").pack())],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data=AdminCallbackData(action="main_admin_menu").pack())]
    ])
    return text, keyboard

# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ (admin_router) ---
@admin_router.message(Command("cancel"), IsAdmin(), StateFilter("*"))
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@admin_router.message(Command("admin"), IsAdmin())
async def cmd_admin_panel(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=await get_main_admin_keyboard())

@admin_router.callback_query(AdminCallbackData.filter(), IsAdmin())
async def handle_admin_callback(callback: CallbackQuery, callback_data: AdminCallbackData, state: FSMContext, db: Database, settings: SettingsManager):
    action = callback_data.action
    await callback.answer()
    
    if action == "main_admin_menu":
        await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=await get_main_admin_keyboard())
        return

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∏–≤–µ–Ω—Ç–æ–≤
    if action not in ["settings", "events"]:
        await callback.message.edit_reply_markup(reply_markup=None)
    
    if action == "stats":
        total_users = await db.get_total_users_count()
        all_chats = await db.get_all_chat_ids()
        await callback.message.answer(
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(all_chats)}",
            parse_mode='HTML'
        )
    elif action == "broadcast":
        await state.set_state(AdminStates.broadcast_message)
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
    elif action == "give_beer":
        await state.set_state(AdminStates.give_beer_user)
        await callback.message.answer("–ö–æ–º—É –≤—ã–¥–∞—Ç—å –ø–∏–≤–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID, @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
    elif action == "settings":
        text, keyboard = await get_settings_menu(settings)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    elif action == "events":
        text, keyboard = await get_events_menu()
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
@admin_router.callback_query(AdminSettingsCallbackData.filter(), IsAdmin())
async def cq_admin_select_setting(callback: CallbackQuery, callback_data: AdminSettingsCallbackData, state: FSMContext, settings: SettingsManager):
    await callback.answer()
    setting_key = callback_data.setting_key
    await state.update_data(setting_key=setting_key)
    await state.set_state(AdminStates.waiting_for_setting_value)
    
    current_value = getattr(settings, setting_key)
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è <code>{setting_key}</code>.\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{current_value}</code>\n\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=AdminCallbackData(action="settings").pack())]
        ])
    )

@admin_router.message(AdminStates.waiting_for_setting_value, IsAdmin())
async def process_setting_value(message: Message, state: FSMContext, db: Database, settings: SettingsManager):
    if not message.text or not message.text.isdigit():
        await message.reply("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ò–ª–∏ /cancel.")
        return
    new_value = int(message.text)
    data = await state.get_data()
    setting_key = data.get('setting_key')
    await state.clear()
    
    try:
        await db.update_setting(setting_key, new_value)
        await settings.reload_setting(db, setting_key)
        await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '<code>{setting_key}</code>' –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <code>{new_value}</code>.", parse_mode='HTML')
        
        text, keyboard = await get_settings_menu(settings)
        await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –∏–≤–µ–Ω—Ç–æ–≤ ---
CHATS_PER_PAGE = 5

@admin_router.callback_query(AdminRaidCallbackData.filter(F.action == "menu"), IsAdmin())
async def cq_raid_menu(callback: CallbackQuery, settings: SettingsManager):
    await callback.answer()
    text = settings.get_raid_settings_text()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ò–í–ï–ù–¢", callback_data=AdminRaidCallbackData(action="select_chat", page=0).pack())],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å–º. /set)", callback_data="do_nothing")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdminCallbackData(action="events").pack())]
    ])
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')

@admin_router.callback_query(AdminRaidCallbackData.filter(F.action == "select_chat"), IsAdmin())
async def cq_raid_select_chat(callback: CallbackQuery, callback_data: AdminRaidCallbackData, db: Database):
    await callback.answer()
    page = callback_data.page
    
    all_chats = await db.get_all_chats()
    if not all_chats:
        await callback.message.edit_text("–ë–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdminRaidCallbackData(action="menu").pack())]
        ]))
        return

    start = page * CHATS_PER_PAGE
    end = start + CHATS_PER_PAGE
    chats_on_page = all_chats[start:end]

    buttons = []
    for chat_id, title in chats_on_page:
        buttons.append([InlineKeyboardButton(text=title, callback_data=AdminRaidCallbackData(action="start", chat_id=chat_id).pack())])
    
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=AdminRaidCallbackData(action="select_chat", page=page-1).pack()))
    if end < len(all_chats):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=AdminRaidCallbackData(action="select_chat", page=page+1).pack()))
    
    if nav_buttons: buttons.append(nav_buttons)
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdminRaidCallbackData(action="menu").pack())])

    await callback.message.edit_text(f"–í –∫–∞–∫–æ–º —á–∞—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≤–µ–Ω—Ç? (–°—Ç—Ä. {page+1})", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@admin_router.callback_query(AdminRaidCallbackData.filter(F.action == "start"), IsAdmin())
async def cq_raid_start(callback: CallbackQuery, callback_data: AdminRaidCallbackData, bot: Bot, db: Database, settings: SettingsManager):
    chat_id = callback_data.chat_id
    
    if await db.get_active_raid(chat_id):
        await callback.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç —Ä–µ–π–¥!", show_alert=True)
        return
        
    await callback.answer("–ó–∞–ø—É—Å–∫–∞—é —Ä–µ–π–¥...")
    
    try:
        await start_raid_event(chat_id, bot, db, settings)
        await callback.message.edit_text(f"‚úÖ –ò–≤–µ–Ω—Ç '–í—ã—à–∏–±–∞–ª–∞' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —á–∞—Ç–µ (ID: {chat_id})!")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≤–µ–Ω—Ç –≤ —á–∞—Ç–µ {chat_id}.\n–û—à–∏–±–∫–∞: {e}")


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ---
@admin_router.message(AdminStates.broadcast_message, IsAdmin())
async def handle_broadcast_message(message: Message, state: FSMContext, bot: Bot, db: Database):
    await state.clear()
    await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    user_ids = await db.get_all_user_ids()
    chat_ids = await db.get_all_chat_ids()
    success_users, failed_users = 0, 0
    
    for user_id in user_ids:
        with suppress(TelegramBadRequest):
            try:
                await bot.copy_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id)
                success_users += 1
            except Exception:
                failed_users += 1
            await asyncio.sleep(0.05)
            
    success_chats, failed_chats = 0, 0
    for chat_id in chat_ids:
        with suppress(TelegramBadRequest):
            try:
                sent_message = await bot.copy_message(chat_id=chat_id, from_chat_id=message.chat.id, message_id=message.message_id)
                try:
                    await bot.pin_chat_message(chat_id=chat_id, message_id=sent_message.message_id)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {e}")
                success_chats += 1
            except Exception:
                failed_chats += 1
            await asyncio.sleep(0.05)
            
    await message.answer(
        f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_users}\n‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_users}\n\n"
        f"<b>–ß–∞—Ç—ã:</b>\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_chats}\n‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_chats}",
        parse_mode='HTML'
    )

@admin_router.message(AdminStates.give_beer_user, IsAdmin())
async def process_give_beer_user(message: Message, state: FSMContext, db: Database):
    target_id = None
    if message.forward_from:
        target_id = message.forward_from.id
    elif message.text and message.text.startswith('@'):
        target_id = await db.get_user_by_username(message.text)
    elif message.text and message.text.isdigit():
        target_id = int(message.text)
    if not target_id or not await db.user_exists(target_id):
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ /cancel.")
        return
    await state.update_data(target_id=target_id)
    await state.set_state(AdminStates.give_beer_amount)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `100` –∏–ª–∏ `-50`).")

@admin_router.message(AdminStates.give_beer_amount, IsAdmin())
async def process_give_beer_amount(message: Message, state: FSMContext, bot: Bot, db: Database):
    if not message.text or not message.text.lstrip('-').isdigit():
        await message.reply("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ /cancel.")
        return
    amount = int(message.text)
    user_data = await state.get_data()
    target_id = user_data.get('target_id')
    await state.clear()
    await db.change_rating(target_id, amount)
    new_balance = await db.get_user_beer_rating(target_id)
    await message.answer(
        f"–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω!\nID: <code>{target_id}</code>\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {amount:+} üç∫\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} üç∫",
        parse_mode='HTML'
    )
    with suppress(TelegramBadRequest):
        await bot.send_message(chat_id=target_id, text=f"‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ {amount:+} üç∫.")

@admin_router.message(F.text.lower() == "–±–æ—Ç –≤—ã–π–¥–∏", IsAdmin())
async def admin_leave_chat(message: Message, bot: Bot):
    if message.chat.type in ['group', 'supergroup']:
        await message.reply("–•–æ—Ä–æ—à–æ, —Å–ª—É—à–∞—é—Å—å...")
        await bot.leave_chat(chat_id=message.chat.id)
    else:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")

@admin_router.message(Command("settings"), IsAdmin())
async def cmd_show_settings(message: Message, settings: SettingsManager):
    await show_settings_menu(message, settings)

@admin_router.message(Command("set"), IsAdmin())
async def cmd_set_setting(message: Message, bot: Bot, db: Database, settings: SettingsManager):
    args = message.text.split()
    if len(args) != 3:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/set &lt;–∫–ª—é—á&gt; &lt;–∑–Ω–∞—á–µ–Ω–∏–µ&gt;</code>\n"
                            "–ü—Ä–∏–º–µ—Ä: <code>/set beer_cooldown 3600</code>\n\n"
                            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:\n"
                            "<code>beer_cooldown, jackpot_chance, roulette_cooldown, "
                            "roulette_min_bet, roulette_max_bet, ladder_min_bet, ladder_max_bet, "
                            "raid_boss_health, raid_reward_pool, raid_duration_hours, raid_hit_cooldown_minutes, "
                            "raid_strong_hit_cost, raid_strong_hit_damage_min, raid_strong_hit_damage_max, "
                            "raid_normal_hit_damage_min, raid_normal_hit_damage_max, raid_reminder_hours</code>",
                            parse_mode='HTML')
        return

    key, value = args[1], args[2]

    if not hasattr(settings, key):
        await message.reply(f"–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '<code>{key}</code>'.")
        return
        
    if not value.isdigit():
        await message.reply("–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return
        
    int_value = int(value)
    
    try:
        await db.update_setting(key, int_value)
        await settings.reload_setting(db, key)
        await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '<code>{key}</code>' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <code>{int_value}</code>.", parse_mode='HTML')
        
        text, keyboard = await get_settings_menu(settings)
        await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
        
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
