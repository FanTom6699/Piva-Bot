# handlers/admin.py
import asyncio
from contextlib import suppress

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, Filter, StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

import config
from database import Database
from settings import settings_manager # <-- –ò–ú–ü–û–†–¢ –ú–ï–ù–ï–î–ñ–ï–†–ê

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
admin_router = Router()
db = Database(db_name='/data/bot_database.db')

# --- FSM –°–û–°–¢–û–Ø–ù–ò–Ø ---
class AdminStates(StatesGroup):
    broadcast_message = State()
    give_beer_user = State()
    give_beer_amount = State()

# --- –§–ò–õ–¨–¢–†–´ ---
class IsAdmin(Filter):
    async def __call__(self, message: Message | CallbackQuery) -> bool:
        return message.from_user.id == config.ADMIN_ID

# --- CALLBACKDATA –§–ê–ë–†–ò–ö–ò ---
class AdminCallbackData(CallbackData, prefix="admin"):
    action: str

# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ (admin_router) ---
@admin_router.message(Command("cancel"), IsAdmin(), StateFilter("*"))
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@admin_router.message(Command("admin"), IsAdmin())
async def cmd_admin_panel(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üç∫ –í—ã–¥–∞—Ç—å –ø–∏–≤–æ", callback_data=AdminCallbackData(action="give_beer").pack())],
        [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=AdminCallbackData(action="broadcast").pack())],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=AdminCallbackData(action="stats").pack())],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", callback_data=AdminCallbackData(action="settings").pack())]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=keyboard)

@admin_router.callback_query(AdminCallbackData.filter(), IsAdmin())
async def handle_admin_callback(callback: CallbackQuery, callback_data: AdminCallbackData, state: FSMContext):
    action = callback_data.action
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    
    if action == "stats":
        total_users = await db.get_total_users_count()
        all_chats = await db.get_all_chat_ids()
        await callback.message.answer(
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(all_chats)}",
            parse_mode='HTML'
        )
    elif action == "broadcast":
        await state.set_state(AdminStates.broadcast_message)
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
    elif action == "give_beer":
        await state.set_state(AdminStates.give_beer_user)
        await callback.message.answer("–ö–æ–º—É –≤—ã–¥–∞—Ç—å –ø–∏–≤–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID, @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
    elif action == "settings":
        await callback.message.answer(
            settings_manager.get_all_settings_text(),
            parse_mode='HTML'
        )

@admin_router.message(AdminStates.broadcast_message, IsAdmin())
async def handle_broadcast_message(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    user_ids = await db.get_all_user_ids()
    chat_ids = await db.get_all_chat_ids()
    success_users, failed_users = 0, 0
    
    # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–±–µ–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è)
    for user_id in user_ids:
        with suppress(TelegramBadRequest):
            try:
                await bot.copy_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id)
                success_users += 1
            except Exception:
                failed_users += 1
            await asyncio.sleep(0.05)
            
    # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ —á–∞—Ç–∞–º (–° –ó–ê–ö–†–ï–ü–õ–ï–ù–ò–ï–ú)
    success_chats, failed_chats = 0, 0
    for chat_id in chat_ids:
        with suppress(TelegramBadRequest):
            try:
                sent_message = await bot.copy_message(chat_id=chat_id, from_chat_id=message.chat.id, message_id=message.message_id)
                
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
                try:
                    await bot.pin_chat_message(chat_id=chat_id, message_id=sent_message.message_id)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {e}")
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
                    
                success_chats += 1
            except Exception:
                failed_chats += 1
            await asyncio.sleep(0.05)
            
    await message.answer(
        f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_users}\n‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_users}\n\n"
        f"<b>–ß–∞—Ç—ã:</b>\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_chats}\n‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_chats}",
        parse_mode='HTML'
    )

# ... (–∫–æ–¥ –≤—ã–¥–∞—á–∏ –ø–∏–≤–∞ process_give_beer_user –∏ process_give_beer_amount –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

@admin_router.message(F.text.lower() == "–±–æ—Ç –≤—ã–π–¥–∏", IsAdmin())
async def admin_leave_chat(message: Message, bot: Bot):
    if message.chat.type in ['group', 'supergroup']:
        await message.reply("–•–æ—Ä–æ—à–æ, —Å–ª—É—à–∞—é—Å—å...")
        await bot.leave_chat(chat_id=message.chat.id)
    else:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")

# --- –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö ---
@admin_router.message(Command("settings"), IsAdmin())
async def cmd_show_settings(message: Message):
    await message.answer(
        settings_manager.get_all_settings_text(),
        parse_mode='HTML'
    )

@admin_router.message(Command("set"), IsAdmin())
async def cmd_set_setting(message: Message, bot: Bot):
    args = message.text.split()
    if len(args) != 3:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/set &lt;–∫–ª—é—á&gt; &lt;–∑–Ω–∞—á–µ–Ω–∏–µ&gt;</code>\n"
                            "–ü—Ä–∏–º–µ—Ä: <code>/set beer_cooldown 3600</code>\n\n"
                            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:\n"
                            "<code>beer_cooldown, jackpot_chance, roulette_cooldown, "
                            "roulette_min_bet, roulette_max_bet, ladder_min_bet, ladder_max_bet</code>",
                            parse_mode='HTML')
        return

    key, value = args[1], args[2]

    if not hasattr(settings_manager, key):
        await message.reply(f"–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '<code>{key}</code>'.")
        return
        
    if not value.isdigit():
        await message.reply("–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
        return
        
    int_value = int(value)
    
    try:
        await db.update_setting(key, int_value)
        await settings_manager.reload_setting(db, key)
        await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '<code>{key}</code>' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <code>{int_value}</code>.", parse_mode='HTML')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await cmd_show_settings(message)
        
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
