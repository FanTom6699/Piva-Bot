# handlers/user_commands.py
import random
from datetime import datetime, timedelta

from aiogram import Router, Bot
from aiogram.types import Message
from aiogram.filters import Command

from database import Database
from .common import check_user_registered
from utils import format_time_delta

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
user_commands_router = Router()
db = Database(db_name='/data/bot_database.db')

BEER_COOLDOWN_SECONDS = 7200
user_spam_tracker = {}

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –ó–∞–º–µ–Ω—è–µ–º * –Ω–∞ <i> ---
BEER_WIN_PHRASES = [
    "ü•≥üçª <i>–¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª!</i>\n–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—Ä–æ—Å –Ω–∞: <b>+{rating_change}</b> üç∫!",
    "üéâüçª <i>–û—Ç–ª–∏—á–Ω—ã–π –≥–ª–æ—Ç–æ–∫! –£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!</i>\n–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—Ä–æ—Å –Ω–∞: <b>+{rating_change}</b> üç∫!",
    "üòåüçª <i>–ö–∞–∫–æ–π –ø—Ä–∏—è—Ç–Ω—ã–π –≤–∫—É—Å –ø–æ–±–µ–¥—ã!</i>\n–¢—ã –≤—ã–ø–∏–ª +<b>{rating_change}</b> üç∫!",
    "üåüüçª <i>–ü–æ–±–µ–¥–∞! –ë–∞—Ä–º–µ–Ω –Ω–∞–ª–∏–ª —Ç–µ–±–µ –µ—â–µ!</i>\n–ü–æ–ª—É—á–∞–µ—à—å +<b>{rating_change}</b> üç∫!",
]
BEER_LOSE_PHRASES_RATING = [
    "üòñüçª <i>–ù–µ—É–¥–∞—á–∞! –¢—ã –ø—Ä–æ–ª–∏–ª –ø–∏–≤–æ...</i>\n–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É–ø–∞–ª –Ω–∞: <b>{rating_loss}</b> üç∫.",
    "üò°üçª <i>–û–±–∏–¥–Ω–æ! –ö—Ç–æ-—Ç–æ —Ç–æ–ª–∫–Ω—É–ª —Ç–µ–±—è –ø–æ–¥ –ª–æ–∫–æ—Ç—å!</i>\n–¢—ã –ø–æ—Ç–µ—Ä—è–ª <b>{rating_loss}</b> üç∫ —Ä–µ–π—Ç–∏–Ω–≥–∞.",
]
BEER_LOSE_PHRASES_ZERO = [
    "üò≠üíî <i>–ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞! –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —É —Ç–µ–±—è –≤—Å—ë!</i>\n–¢—ã –ø–æ—Ç–µ—Ä—è–ª <b>{rating_loss}</b> üç∫ –∏ —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –æ–±–Ω—É–ª–∏–ª—Å—è!",
    "üòñüçª <i>–ü–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª! –í—Å–µ –ø–∏–≤–æ –Ω–∞ –ø–æ–ª!</i>\n<b>{rating_loss}</b> üç∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ—Ç–µ—Ä—è–Ω–æ. –¢—ã –Ω–∞ –Ω—É–ª–µ.",
]
# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

# --- –ö–û–ú–ê–ù–î–´ ---
@user_commands_router.message(Command("beer"))
async def cmd_beer(message: Message, bot: Bot):
    user_id = message.from_user.id
    now = datetime.now()
    if user_id in user_spam_tracker:
        if (now - user_spam_tracker[user_id]).total_seconds() < 5:
            return
    user_spam_tracker[user_id] = now
    if message.chat.type != 'private' and not await check_user_registered(message, bot):
        return
    last_beer_time = await db.get_last_beer_time(user_id)
    if last_beer_time:
        time_since = datetime.now() - last_beer_time
        if time_since.total_seconds() < BEER_COOLDOWN_SECONDS:
            remaining = timedelta(seconds=BEER_COOLDOWN_SECONDS) - time_since
            return await message.answer(f"‚åõ –¢—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–∏–ª! üçª\n–í–µ—Ä–Ω–∏—Å—å –≤ –±–∞—Ä —á–µ—Ä–µ–∑: {format_time_delta(remaining)}.")
    current_rating = await db.get_user_beer_rating(user_id)
    outcomes = ['small_win', 'loss', 'big_win']
    weights = [0.60, 0.25, 0.15]
    chosen_outcome = random.choices(outcomes, weights=weights, k=1)[0]
    if chosen_outcome == 'small_win': rating_change = random.randint(1, 4)
    elif chosen_outcome == 'big_win': rating_change = random.randint(5, 10)
    else: rating_change = random.randint(-5, -1)
    if rating_change > 0:
        new_rating = current_rating + rating_change
        phrase = random.choice(BEER_WIN_PHRASES).format(rating_change=rating_change)
    else:
        rating_loss = abs(rating_change)
        if current_rating - rating_loss <= 0:
            actual_loss = current_rating
            new_rating = 0
            phrase = random.choice(BEER_LOSE_PHRASES_ZERO).format(rating_loss=actual_loss) if actual_loss > 0 else "–¢—ã –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–∏—Ç—å, –Ω–æ —É —Ç–µ–±—è –∏ —Ç–∞–∫ 0 üç∫."
        else:
            new_rating = current_rating - rating_loss
            phrase = random.choice(BEER_LOSE_PHRASES_RATING).format(rating_loss=rating_loss)
    await db.update_beer_data(user_id, new_rating)
    await message.answer(phrase, parse_mode='HTML')

@user_commands_router.message(Command("top"))
async def cmd_top(message: Message, bot: Bot):
    if message.chat.type != 'private' and not await check_user_registered(message, bot):
        return
    top_users = await db.get_top_users()
    if not top_users: return await message.answer("–í –±–∞—Ä–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ø.")
    
    max_rating_width = 0
    if top_users:
        max_rating_width = len(str(top_users[0][2]))
    
    top_text = "üèÜ <b>–¢–æ–ø-10 –ø–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤:</b> üèÜ\n\n"
    medals = ["ü•á", "ü•à", "ü•â"]
    
    for i, (first_name, last_name, rating) in enumerate(top_users):
        full_name = first_name + (f" {last_name}" if last_name else "")
        place = i + 1
        medal = medals[i] if i < 3 else "üèÖ"
        
        rating_str = str(rating).rjust(max_rating_width)
        
        top_text += f"{medal} {place}. {full_name} ‚Äî <code>{rating_str}</code> üç∫\n"
            
    await message.answer(top_text, parse_mode='HTML')
    
