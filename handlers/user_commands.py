# handlers/user_commands.py
import asyncio
import random
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.formatting import as_key_value, as_line, Bold
from aiogram.exceptions import TelegramBadRequest

import config
from database import Database
from settings import SettingsManager

user_router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–æ–≤
user_cooldowns = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
active_games = {} 

# --- FSM –°–û–°–¢–û–Ø–ù–ò–Ø ---
class RouletteStates(StatesGroup):
    bet = State()
    color = State()

class LadderStates(StatesGroup):
    bet = State()
    playing = State()

# --- –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò ---
async def update_user_data(db: Database, message: Message):
    user_id = message.from_user.id
    if not await db.user_exists(user_id):
        await db.add_user(
            user_id=user_id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username
        )

# --- –ò–ì–†–û–í–´–ï –ú–ï–•–ê–ù–ò–ö–ò ---

# --- –†–£–õ–ï–¢–ö–ê ---
ROULETTE_COOLDOWN_KEY = "roulette_cd"
LADDER_COOLDOWN_KEY = "ladder_cd" # (–î–æ–±–∞–≤–∏–º, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
GAME_ACTIVE_KEY = "game_active"

def is_on_cooldown(user_id: int, key: str, duration: int) -> int:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—É–ª–¥–∞—É–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0, –µ—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω–∞ –Ω–µ—Ç, –∏–ª–∏ time_left, –µ—Å–ª–∏ –µ—Å—Ç—å."""
    if user_id not in user_cooldowns:
        return 0
    
    last_time = user_cooldowns[user_id].get(key)
    if not last_time:
        return 0
        
    time_passed = (datetime.now() - last_time).total_seconds()
    if time_passed < duration:
        return int(duration - time_passed)
    return 0

def set_cooldown(user_id: int, key: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫—É–ª–¥–∞—É–Ω."""
    if user_id not in user_cooldowns:
        user_cooldowns[user_id] = {}
    user_cooldowns[user_id][key] = datetime.now()

def set_game_active(chat_id: int, user_id: int, active: bool):
    """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –≤ —á–∞—Ç–µ –∏–¥–µ—Ç –∏–≥—Ä–∞."""
    if active:
        active_games[chat_id] = {GAME_ACTIVE_KEY: True, "user_id": user_id}
    else:
        if chat_id in active_games:
            del active_games[chat_id]

def is_game_active(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ –≤ —á–∞—Ç–µ –¥—Ä—É–≥–∞—è –∏–≥—Ä–∞."""
    return active_games.get(chat_id, {}).get(GAME_ACTIVE_KEY, False)

async def get_bet(message: Message, db: Database, settings: SettingsManager) -> (int, int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        bet_amount = int(message.text)
    except (ValueError, TypeError):
        await message.reply("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return None, None
        
    user_balance = await db.get_user_beer_rating(message.from_user.id)
    
    if bet_amount < settings.roulette_min_bet:
        await message.reply(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {settings.roulette_min_bet} üç∫")
        return None, user_balance
        
    if bet_amount > settings.roulette_max_bet:
        await message.reply(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {settings.roulette_max_bet} üç∫")
        return None, user_balance
        
    if bet_amount > user_balance:
        await message.reply(f"–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∏–≤–∞! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} üç∫")
        return None, user_balance
        
    return bet_amount, user_balance


@user_router.message(Command("roulette"))
async def cmd_roulette(message: Message, state: FSMContext, db: Database, settings: SettingsManager):
    if message.chat.type == 'private':
        await message.reply("–≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
        
    if is_game_active(message.chat.id):
        await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –¥—Ä—É–≥–∞—è –∏–≥—Ä–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return

    await update_user_data(db, message)
    user_id = message.from_user.id
    
    cooldown_duration = settings.roulette_cooldown
    time_left = is_on_cooldown(user_id, ROULETTE_COOLDOWN_KEY, cooldown_duration)
    
    if time_left > 0:
        minutes, seconds = divmod(time_left, 60)
        await message.reply(f"–†—É–ª–µ—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è! ‚è≥ –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes}–º {seconds}—Å.")
        return
        
    balance = await db.get_user_beer_rating(user_id)
    if balance < settings.roulette_min_bet:
        await message.reply(f"–£ –≤–∞—Å {balance} üç∫. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ ({settings.roulette_min_bet} üç∫).")
        return

    set_game_active(message.chat.id, user_id, True)
    await state.set_state(RouletteStates.bet)
    await message.reply(
        f"{message.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É üç∫ (–æ—Ç {settings.roulette_min_bet} –¥–æ {settings.roulette_max_bet}).\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} üç∫"
    )

@user_router.message(RouletteStates.bet)
async def process_roulette_bet(message: Message, state: FSMContext, db: Database, settings: SettingsManager):
    active_game = active_games.get(message.chat.id)
    if not active_game or active_game.get("user_id") != message.from_user.id:
        return # –≠—Ç–æ –Ω–µ —Ç–æ—Ç —é–∑–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏–ª –∏–≥—Ä—É

    bet, balance = await get_bet(message, db, settings)
    
    if bet is None:
        return # get_bet() —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

    await db.change_rating(message.from_user.id, -bet)
    await state.update_data(bet=bet, balance=balance - bet)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¥ –ö—Ä–∞—Å–Ω–æ–µ (x2)", callback_data="roulette_red")],
        [InlineKeyboardButton(text="‚ö´Ô∏è –ß–µ—Ä–Ω–æ–µ (x2)", callback_data="roulette_black")],
        [InlineKeyboardButton(text="üçÄ –ó–µ–ª–µ–Ω–æ–µ (x14)", callback_data="roulette_green")]
    ])
    
    await state.set_state(RouletteStates.color)
    await message.reply(
        f"–°—Ç–∞–≤–∫–∞ {bet} üç∫ –ø—Ä–∏–Ω—è—Ç–∞!\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance - bet} üç∫.\n"
        "–ù–∞ –∫–∞–∫–æ–π —Ü–≤–µ—Ç —Å—Ç–∞–≤–∏—Ç–µ?",
        reply_markup=kb
    )

@user_router.callback_query(RouletteStates.color, F.data.startswith("roulette_"))
async def process_roulette_color(callback: CallbackQuery, state: FSMContext, db: Database, settings: SettingsManager):
    active_game = active_games.get(callback.message.chat.id)
    if not active_game or active_game.get("user_id") != callback.from_user.id:
        await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", show_alert=True)
        return

    choice = callback.data.split("_")[1]
    
    # 0 - green, 1-7 - red, 8-14 - black
    roll = random.randint(0, 14)
    
    if roll == 0:
        result = "green"
        result_text = "üçÄ –ó–ï–õ–ï–ù–û–ï (x14)"
    elif 1 <= roll <= 7:
        result = "red"
        result_text = "üî¥ –ö–†–ê–°–ù–û–ï (x2)"
    else:
        result = "black"
        result_text = "‚ö´Ô∏è –ß–ï–†–ù–û–ï (x2)"

    data = await state.get_data()
    bet = data.get("bet")
    balance = data.get("balance")
    
    text = f"üé≤ {callback.from_user.first_name}, –≤—ã–ø–∞–¥–∞–µ—Ç: {result_text}!\n\n"
    
    win = 0
    if choice == result:
        if result == "green":
            win = bet * 14
        else:
            win = bet * 2
            
        text += f"üéâ –ü–û–ë–ï–î–ê! üéâ\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} üç∫!\n"
        await db.change_rating(callback.from_user.id, win)
        text += f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance + win} üç∫."
    else:
        text += f"üò• –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} üç∫.\n"
        text += f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} üç∫."
        
    await state.clear()
    set_game_active(callback.message.chat.id, callback.from_user.id, False)
    set_cooldown(callback.from_user.id, ROULETTE_COOLDOWN_KEY)
    
    await callback.message.edit_text(text, reply_markup=None)
    await callback.answer()


# --- –õ–ï–°–ï–ù–ö–ê ---
class LadderCallbackData(CallbackData, prefix="ladder"):
    action: str
    step: int = 0

LADDER_MULTIPLIERS = [1.25, 1.5, 2.0, 3.0, 5.0, 8.0, 12.0, 20.0, 50.0, 100.0]

def get_ladder_keyboard(step: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="?", callback_data=LadderCallbackData(action="play", step=step).pack()),
            InlineKeyboardButton(text="?", callback_data=LadderCallbackData(action="play", step=step).pack())
        ],
        [InlineKeyboardButton(text=f"üí∏ –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à ({LADDER_MULTIPLIERS[step-1]:.2f}x)", callback_data=LadderCallbackData(action="cashout", step=step).pack())]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_ladder_text(bet: int, step: int, current_win: float) -> str:
    text = f"ü™ú <b>–ü–∏–≤–Ω–∞—è –õ–µ—Å–µ–Ω–∫–∞</b> ü™ú\n\n"
    text += f"<b>–°—Ç–∞–≤–∫–∞:</b> {bet} üç∫\n"
    text += f"<b>–¢–µ–∫—É—â–∏–π –≤—ã–∏–≥—Ä—ã—à:</b> {current_win:.2f} üç∫\n"
    text += f"<b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (x{LADDER_MULTIPLIERS[step]:.2f}):</b> {bet * LADDER_MULTIPLIERS[step]:.2f} üç∫\n\n"
    
    for i in range(len(LADDER_MULTIPLIERS) - 1, -1, -1):
        if i == step:
            text += f"<b>‚û°Ô∏è {i+1}. x{LADDER_MULTIPLIERS[i]:.2f} </b>\n"
        else:
            text += f"   {i+1}. x{LADDER_MULTIPLIERS[i]:.2f}\n"
    
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–≤—É—Ö –∫–Ω–æ–ø–æ–∫. –£–¥–∞—á–∏!"
    return text

@user_router.message(Command("ladder"))
async def cmd_ladder(message: Message, state: FSMContext, db: Database, settings: SettingsManager):
    if message.chat.type == 'private':
        await message.reply("–≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
        
    if is_game_active(message.chat.id):
        await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –¥—Ä—É–≥–∞—è –∏–≥—Ä–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return

    await update_user_data(db, message)
    user_id = message.from_user.id
    
    # (–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫—É–ª–¥–∞—É–Ω –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å —Ä—É–ª–µ—Ç–∫–æ–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    
    balance = await db.get_user_beer_rating(user_id)
    if balance < settings.ladder_min_bet:
        await message.reply(f"–£ –≤–∞—Å {balance} üç∫. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–∏ ({settings.ladder_min_bet} üç∫).")
        return

    set_game_active(message.chat.id, user_id, True)
    await state.set_state(LadderStates.bet)
    await message.reply(
        f"{message.from_user.first_name}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É üç∫ (–æ—Ç {settings.ladder_min_bet} –¥–æ {settings.ladder_max_bet}).\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} üç∫"
    )

@user_router.message(LadderStates.bet)
async def process_ladder_bet(message: Message, state: FSMContext, db: Database, settings: SettingsManager):
    active_game = active_games.get(message.chat.id)
    if not active_game or active_game.get("user_id") != message.from_user.id:
        return 
        
    try:
        bet_amount = int(message.text)
    except (ValueError, TypeError):
        await message.reply("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return
        
    user_balance = await db.get_user_beer_rating(message.from_user.id)
    
    if bet_amount < settings.ladder_min_bet:
        await message.reply(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {settings.ladder_min_bet} üç∫")
        return
    if bet_amount > settings.ladder_max_bet:
        await message.reply(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {settings.ladder_max_bet} üç∫")
        return
    if bet_amount > user_balance:
        await message.reply(f"–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–∏–≤–∞! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance} üç∫")
        return

    await db.change_rating(message.from_user.id, -bet_amount)
    
    # 0 - lose, 1 - win
    winning_button = random.randint(0, 1)
    
    await state.set_state(LadderStates.playing)
    await state.update_data(bet=bet_amount, step=0, win=winning_button)
    
    await message.answer(
        get_ladder_text(bet_amount, 0, 0.0),
        reply_markup=get_ladder_keyboard(0)
    )

@user_router.callback_query(LadderStates.playing, LadderCallbackData.filter(F.action == "play"))
async def process_ladder_play(callback: CallbackQuery, callback_data: LadderCallbackData, state: FSMContext, db: Database):
    active_game = active_games.get(callback.message.chat.id)
    if not active_game or active_game.get("user_id") != callback.from_user.id:
        await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", show_alert=True)
        return

    data = await state.get_data()
    bet = data.get("bet")
    step = data.get("step")
    winning_button_index = data.get("win") # 0 or 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —é–∑–µ—Ä (0 –∏–ª–∏ 1)
    buttons_in_row = callback.message.reply_markup.inline_keyboard[0]
    pressed_button_text = ""
    for i, button in enumerate(buttons_in_row):
        if button.callback_data == callback.data:
            user_choice_index = i
            pressed_button_text = button.text
            break
            
    if pressed_button_text != "?":
        await callback.answer("–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ—Ç —Ö–æ–¥!", show_alert=True)
        return
        
    if user_choice_index == winning_button_index:
        # --- –ü–û–ë–ï–î–ê ---
        new_step = step + 1
        current_win = bet * LADDER_MULTIPLIERS[step]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        new_keyboard_markup = callback.message.reply_markup.inline_keyboard
        new_keyboard_markup[0][winning_button_index] = InlineKeyboardButton(text="‚úÖ", callback_data="ladder_done")
        
        other_index = 1 - winning_button_index
        new_keyboard_markup[0][other_index] = InlineKeyboardButton(text="‚ùå", callback_data="ladder_done")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏ "–∑–∞–±—Ä–∞—Ç—å"
        await callback.message.edit_reply_markup(reply_markup=InlineKeyboardMarkup(inline_keyboard=[new_keyboard_markup[0]]))
        
        if new_step == len(LADDER_MULTIPLIERS):
            # --- –ü–û–õ–ù–ê–Ø –ü–û–ë–ï–î–ê (–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥) ---
            await db.change_rating(callback.from_user.id, current_win)
            await state.clear()
            set_game_active(callback.message.chat.id, callback.from_user.id, False)
            await callback.message.answer(
                f"üéâüéâüéâ <b>–î–ñ–ï–ö–ü–û–¢ –õ–ï–°–ï–ù–ö–ò!</b> üéâüéâüéâ\n"
                f"{callback.from_user.first_name} –ø—Ä–æ—à–µ–ª –≤—Å—é –ª–µ—Å–µ–Ω–∫—É!\n"
                f"<b>–í—ã–∏–≥—Ä—ã—à: {current_win:.2f} üç∫!</b>"
            )
        else:
            # --- –°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì ---
            new_winning_button = random.randint(0, 1)
            await state.update_data(step=new_step, win=new_winning_button)
            await asyncio.sleep(1) # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ —É–≤–∏–¥–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await callback.message.answer(
                get_ladder_text(bet, new_step, current_win),
                reply_markup=get_ladder_keyboard(new_step)
            )
            
    else:
        # --- –ü–†–û–ò–ì–†–´–® ---
        await state.clear()
        set_game_active(callback.message.chat.id, callback.from_user.id, False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø—Ä–æ–∏–≥—Ä—ã—à
        new_keyboard_markup = callback.message.reply_markup.inline_keyboard
        new_keyboard_markup[0][winning_button_index] = InlineKeyboardButton(text="‚úÖ", callback_data="ladder_done")
        
        other_index = 1 - winning_button_index
        new_keyboard_markup[0][other_index] = InlineKeyboardButton(text="‚ùå", callback_data="ladder_done")
        
        await callback.message.edit_text(
            f"üò• <b>–ü—Ä–æ–∏–≥—Ä—ã—à!</b> üò•\n"
            f"{callback.from_user.first_name}, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} üç∫.\n"
            f"–í—ã –¥–æ—à–ª–∏ –¥–æ {step+1} —Å—Ç—É–ø–µ–Ω–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[new_keyboard_markup[0]])
        )
        
    await callback.answer()

@user_router.callback_query(LadderStates.playing, LadderCallbackData.filter(F.action == "cashout"))
async def process_ladder_cashout(callback: CallbackQuery, callback_data: LadderCallbackData, state: FSMContext, db: Database):
    active_game = active_games.get(callback.message.chat.id)
    if not active_game or active_game.get("user_id") != callback.from_user.id:
        await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", show_alert=True)
        return
        
    data = await state.get_data()
    bet = data.get("bet")
    step = data.get("step")
    
    # step —Ç—É—Ç - —ç—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—É–ø–µ–Ω–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 0), –∞ –≤—ã–∏–≥—Ä—ã—à - –∑–∞ –ø—Ä–æ—à–ª—É—é (step-1)
    win_multiplier_index = step - 1 
    
    if win_multiplier_index < 0:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ!", show_alert=True)
        return
        
    win_amount = bet * LADDER_MULTIPLIERS[win_multiplier_index]
    
    await db.change_rating(callback.from_user.id, win_amount)
    await state.clear()
    set_game_active(callback.message.chat.id, callback.from_user.id, False)
    
    await callback.message.edit_text(
        f"üí∏ <b>–í—ã–∏–≥—Ä—ã—à –∑–∞–±—Ä–∞–Ω!</b> üí∏\n"
        f"{callback.from_user.first_name}, –≤—ã –∑–∞–±–∏—Ä–∞–µ—Ç–µ {win_amount:.2f} üç∫!\n"
        f"–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ {step} —Å—Ç—É–ø–µ–Ω–∏.",
        reply_markup=None
    )
    await callback.answer()


# --- –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
@user_router.message(Command("start"))
async def cmd_start(message: Message, db: Database):
    await update_user_data(db, message)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–∏–≤–Ω–æ–π –ë–æ—Ç! üçª\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"
        "üç∫ –ü–æ–ª—É—á–∏—Ç—å –ø–∏–≤–æ (–∫–æ–º–∞–Ω–¥–∞ /beer)\n"
        "üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ç–æ–ø–µ (/top)\n"
        "üé≤ –ò–≥—Ä–∞—Ç—å –≤ –†—É–ª–µ—Ç–∫—É (/roulette)\n"
        "ü™ú –ò–≥—Ä–∞—Ç—å –≤ –õ–µ—Å–µ–Ω–∫—É (/ladder)\n\n"
        "–ò–≤–µ–Ω—Ç—ã:\n"
        "üëπ –°—Ä–∞–∂–∞—Ç—å—Å—è —Å –†–µ–π–¥-–ë–æ—Å—Å–æ–º (–∫–æ–≥–¥–∞ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω)\n"
        "üé≤ –ò–≥—Ä–∞—Ç—å –≤ –ú–∞—Ñ–∏—é (/mafia)\n\n"
        "–ê–¥–º–∏–Ω: @FanDomiy"
    )

@user_router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/beer - –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ—é –ø–æ—Ä—Ü–∏—é –ø–∏–≤–∞ (1 —Ä–∞–∑ –≤ N —á–∞—Å–æ–≤)\n"
        "/top - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –ø–∏–≤–Ω—ã—Ö –º–∞–≥–Ω–∞—Ç–æ–≤\n"
        "/profile - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "\n<b>–ò–≥—Ä—ã:</b>\n"
        "/roulette - –ü–∏–≤–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞ (—Å—Ç–∞–≤–∫–∏ –æ—Ç 5 –¥–æ 100 üç∫)\n"
        "/ladder - –ü–∏–≤–Ω–∞—è –ª–µ—Å–µ–Ω–∫–∞ (—Ä–∏—Å–∫-–∏–≥—Ä–∞)\n"
        "/mafia - –ù–∞—á–∞—Ç—å –Ω–∞–±–æ—Ä –≤ '–ü–∏–≤–Ω–æ–π –ü–µ—Ä–µ–ø–æ–ª–æ—Ö'\n"
        "/mafia_top - –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –≤ –ú–∞—Ñ–∏—é\n"
        "\n<b>–ò–≤–µ–Ω—Ç—ã:</b>\n"
        "–ö–æ–≥–¥–∞ –≤ —á–∞—Ç–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –†–µ–π–¥-–ë–æ—Å—Å, –∂–º–∏ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –∞—Ç–∞–∫–æ–≤–∞—Ç—å!"
    )

@user_router.message(Command("profile"))
async def cmd_profile(message: Message, db: Database):
    await update_user_data(db, message)
    user_id = message.from_user.id
    
    beer = await db.get_user_beer_rating(user_id)
    mafia_stats = await db.get_mafia_user_stats(user_id)
    
    if not mafia_stats:
        mafia_authority = 1000
        mafia_games = 0
        mafia_wins = 0
    else:
        mafia_authority, mafia_games, mafia_wins = mafia_stats

    win_rate = (mafia_wins / mafia_games * 100) if mafia_games > 0 else 0

    user_data = as_line(
        Bold("üë§ –ü—Ä–æ—Ñ–∏–ª—å:"), f" {message.from_user.full_name}\n\n",
        "üç∫ –ü–∏–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: ", f"{beer}\n",
        "üé© –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç (–ú–∞—Ñ–∏—è): ", f"{mafia_authority}\n",
        "üé≤ –ò–≥—Ä—ã –≤ –ú–∞—Ñ–∏—é: ", f"{mafia_games}\n",
        "üèÜ –ü–æ–±–µ–¥—ã –≤ –ú–∞—Ñ–∏–∏: ", f"{mafia_wins} ({win_rate:.1f}%)"
    )
    await message.answer(user_data.as_html())


@user_router.message(Command("beer"))
async def cmd_beer(message: Message, db: Database, settings: SettingsManager):
    await update_user_data(db, message)
    user_id = message.from_user.id
    cooldown_seconds = settings.beer_cooldown
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    last_time = await db.get_last_beer_time(user_id)
    if last_time:
        time_passed = (datetime.now() - last_time).total_seconds()
        if time_passed < cooldown_seconds:
            time_left = int(cooldown_seconds - time_passed)
            hours, rem = divmod(time_left, 3600)
            minutes, seconds = divmod(rem, 60)
            await message.reply(f"–¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–≤–æ–µ –ø–∏–≤–æ! ‚è≥ –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {hours}—á {minutes}–º {seconds}—Å.")
            return

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ
    current_rating = await db.get_user_beer_rating(user_id)
    beer_amount = 10
    
    # –®–∞–Ω—Å –Ω–∞ –¥–∂–µ–∫–ø–æ—Ç
    jackpot_chance = settings.jackpot_chance
    if random.randint(1, jackpot_chance) == 1:
        jackpot = await db.get_jackpot()
        beer_amount += jackpot
        await db.reset_jackpot()
        await message.answer(f"üéâüçª <b>–î–ñ–ï–ö–ü–û–¢!</b> üçªüéâ\n{message.from_user.first_name} —Å—Ä—ã–≤–∞–µ—Ç –∫—É—à –≤ <b>{jackpot} üç∫</b>!")
    else:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∂–µ–∫–ø–æ—Ç, –µ—Å–ª–∏ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏
        await db.update_jackpot(1)


    await db.update_beer_data(user_id, current_rating + beer_amount)
    if message.chat.type != 'private':
        await message.reply(f"üçª {message.from_user.first_name} –ø–æ–ª—É—á–∞–µ—Ç {beer_amount} üç∫! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {current_rating + beer_amount} üç∫.")
    else:
        await message.reply(f"üçª –¢—ã –ø–æ–ª—É—á–∏–ª {beer_amount} üç∫! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {current_rating + beer_amount} üç∫.")

@user_router.message(Command("top"))
async def cmd_top(message: Message, db: Database):
    await update_user_data(db, message)
    top_users = await db.get_top_users(10)
    
    if not top_users:
        await message.answer("–í –±–∞—Ä–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ, —Ç—ã –±—É–¥–µ—à—å –ø–µ—Ä–≤—ã–º!")
        return

    response = "üèÜ <b>–¢–æ–ø-10 –ü–∏–≤–Ω—ã—Ö –ú–∞–≥–Ω–∞—Ç–æ–≤:</b> üèÜ\n\n"
    place_emojis = ["ü•á", "ü•à", "ü•â"]
    
    for i, (first_name, last_name, rating) in enumerate(top_users):
        name = first_name
        if last_name:
            name += f" {last_name}"
            
        place = place_emojis[i] if i < 3 else f" {i+1}. "
        response += f"{place} <b>{name}</b> ‚Äî {rating} üç∫\n"

    await message.answer(response)

# --- –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ú–ê–§–ò–ò ---
@user_router.message(Command("mafia_top"))
async def cmd_mafia_top(message: Message, db: Database):
    await update_user_data(db, message)
    top_players = await db.get_mafia_top(10)
    
    response = "üèÜ <b>–ó–ê–õ –°–õ–ê–í–´ '–ü–ò–í–ù–û–ì–û –ü–ï–†–ï–ü–û–õ–û–•–ê'</b> üèÜ\n\n"
    response += "<i>–†–µ–π—Ç–∏–Ω–≥ —Å–∞–º—ã—Ö –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:</i>\n\n"
    
    if not top_players:
        await message.answer(f"{response}–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª –≤ –ú–∞—Ñ–∏—é. –°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º!")
        return

    place_emojis = ["ü•á", "ü•à", "ü•â"]
    
    for i, (first_name, last_name, authority, games, wins) in enumerate(top_players):
        name = first_name
        if last_name:
            name += f" {last_name}"
        
        win_rate = (wins / games * 100) if games > 0 else 0
        place = place_emojis[i] if i < 3 else f" {i+1}. "
        
        response += f"{place} <b>{name}</b> ‚Äî <b>{authority} üé© –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞</b>\n"
        response += f"    <i>(–ò–≥—Ä: {games}, –ü–æ–±–µ–¥: {wins}, –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%)</i>\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = await db.get_mafia_user_stats(message.from_user.id)
    if user_stats and user_stats[1] > 0: # user_stats[1] - —ç—Ç–æ mafia_games
        authority, games, wins = user_stats
        win_rate = (wins / games * 100) if games > 0 else 0
        response += f"\n---\n<b>–¢–≤–æ–π —Ä–∞–Ω–≥:</b>\n"
        response += f"<b>{message.from_user.first_name}</b> ‚Äî <b>{authority} üé© –ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–∞</b>\n"
        response += f"<i>(–ò–≥—Ä: {games}, –ü–æ–±–µ–¥: {wins}, –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%)</i>"
    else:
        response += "\n---\n<i>–¢—ã –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª –≤ –ú–∞—Ñ–∏—é. –ù–∞–ø–∏—à–∏ /mafia –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</i>"

    await message.answer(response)

@user_router.message(Command("cancel"), F.state != None)
async def cmd_cancel_game(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É (–†—É–ª–µ—Ç–∫–∞, –õ–µ—Å–µ–Ω–∫–∞)."""
    current_state = await state.get_state()
    if current_state is None:
        return

    data = await state.get_data()
    bet = data.get("bet")
    
    if bet:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞
        await db.change_rating(message.from_user.id, bet)
        await message.reply(f"–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {bet} üç∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
    else:
        await message.reply("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        
    set_game_active(message.chat.id, message.from_user.id, False)
    await state.clear()
