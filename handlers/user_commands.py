# handlers/user_commands.py
import random
import time
import html  # --- –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω –≤ /top ---
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command
from database import Database
from settings import SettingsManager
from utils import format_time_delta
from handlers.common import check_user_registered

user_router = Router()

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –§—Ä–∞–∑—ã –≤—ã–∏–≥—Ä—ã—à–∞ (–ë–æ–ª–µ–µ –∂–∏–≤—ã–µ) ---
BEER_WIN_PHRASES = [
    "üçª –ß–∏–Ω-—á–∏–Ω! <i>–û—Ç–ª–∏—á–Ω—ã–π –≥–ª–æ—Ç–æ–∫!</i>\n–ë–∞—Ä–º–µ–Ω –ø–æ–¥–º–∏–≥–Ω—É–ª –∏ –Ω–∞–ª–∏–ª —Ç–µ–±–µ –µ—â–µ: <b>+{rating_change}</b> üç∫!",
    "üòãüçª <i>–í–∫—É—Å–Ω–æ—Ç–∏—â–∞!</i>\n–¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Ä–∞—Å—Ç–µ—Ç: <b>+{rating_change}</b> üç∫!",
    "üåüüçª <i>–í–µ–∑–µ—Ç –∂–µ! –ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –ø–∏–≤–æ –±—ã–ª–æ –∑–∞ —Å—á–µ—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è.</i>\n–ü–æ–ª—É—á–µ–Ω–æ +<b>{rating_change}</b> üç∫!",
    "ü•≥ <i>–ó–∞ —Ç–≤–æ–π —Å—á–µ—Ç!</i>\n...—à—É—Ç–∫–∞! –ë–∞—Ä–º–µ–Ω —É–≥–æ—â–∞–µ—Ç: <b>+{rating_change}</b> üç∫!"
]

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –§—Ä–∞–∑—ã –ø—Ä–æ–∏–≥—Ä—ã—à–∞ (–û–±—ä—è—Å–Ω—è–µ–º UX: –ø—Ä–æ–∏–≥—Ä—ã—à = –≤–∫–ª–∞–¥ –≤ –¥–∂–µ–∫–ø–æ—Ç) ---
BEER_LOSE_PHRASES_RATING = [
    "üòñ –û—Ö! <i>–ü—Ä–æ–ª–∏–ª... –±—ã–≤–∞–µ—Ç.</i>\n–ü–æ—Ç–µ—Ä—è–Ω–æ: <b>{rating_loss}</b> üç∫. (–ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –≤—Å—ë –ø–æ—à–ª–æ –≤ <b>–æ–±—â–∏–π –¥–∂–µ–∫–ø–æ—Ç!</b> üòâ)",
    "üò≠ <i>–ú–∏–º–æ —Ä—Ç–∞!</i>\n–¢—ã —Ç–µ—Ä—è–µ—à—å <b>{rating_loss}</b> üç∫. (–ó–∞—Ç–æ <b>–¥–∂–µ–∫–ø–æ—Ç —Å—Ç–∞–ª –±–æ–ª—å—à–µ!</b>)",
    "ü§¢ <i>–ö–∞–∂–µ—Ç—Å—è, –ø–∏–≤–æ –±—ã–ª–æ... –Ω–µ –æ—á–µ–Ω—å.</i>\n–ú–∏–Ω—É—Å <b>{rating_loss}</b> üç∫. (–ë–∞–Ω–∫ –¥–∂–µ–∫–ø–æ—Ç–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω!)",
    "ü§¶‚Äç‚ôÇÔ∏è <i>–£—Ä–æ–Ω–∏–ª –∫—Ä—É–∂–∫—É!</i>\n–ü–æ—Ç–µ—Ä—è: <b>{rating_loss}</b> üç∫. (–ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ, –¥–∂–µ–∫–ø–æ—Ç –≤—ã—Ä–æ—Å...)"
]
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô 1 –∏ 2 ---


@user_router.message(Command("beer"))
async def cmd_beer(message: Message, bot: Bot, db: Database, settings: SettingsManager):
    if message.chat.type != "private":
        if not await check_user_registered(message, bot, db):
            return

    user_id = message.from_user.id
    current_time = int(time.time())
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    last_beer_time = await db.get_user_last_beer_time(user_id)
    cooldown = settings.beer_cooldown
    
    if last_beer_time and (current_time - last_beer_time) < cooldown:
        remaining = cooldown - (current_time - last_beer_time)
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –¢–µ–∫—Å—Ç –∫—É–ª–¥–∞—É–Ω–∞ (–ë–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π) ---
        return await message.answer(f"‚åõ –ü–æ–ª–µ–≥—á–µ, –¥—Ä—É–≥! üçª\n–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–∏–ª. –°–ª–µ–¥—É—é—â–∞—è –∫—Ä—É–∂–∫–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ —á–µ—Ä–µ–∑: {format_time_delta(remaining)}.")
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø 3 ---

    await db.update_user_last_beer_time(user_id, current_time)

    # –õ–æ–≥–∏–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞/–ø—Ä–æ–∏–≥—Ä—ã—à–∞
    chance = random.random()
    
    # 1. –®–∞–Ω—Å –Ω–∞ –¥–∂–µ–∫–ø–æ—Ç
    if chance < settings.jackpot_chance:
        current_jackpot = await db.get_jackpot()
        if current_jackpot < 1: # –ï—Å–ª–∏ –¥–∂–µ–∫–ø–æ—Ç –ø—É—Å—Ç, –≤—ã–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –±–∏–≥ –≤–∏–Ω
             rating_change = random.randint(settings.big_win_min, settings.big_win_max)
             phrase = random.choice(BEER_WIN_PHRASES).format(rating_change=rating_change)
             await db.update_user_beer_rating(user_id, rating_change)
             return await message.answer(phrase, parse_mode='HTML')

        await db.reset_jackpot()
        await db.update_user_beer_rating(user_id, current_jackpot)
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –¢–µ–∫—Å—Ç –¥–∂–µ–∫–ø–æ—Ç–∞ (–ë–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π) ---
        text=f"üí•üí∞ <b>–î –ñ –ï –ö –ü –û –¢!</b> üí∞üí•\n\n" \
             f"<i>–ó–≤–æ–Ω –º–æ–Ω–µ—Ç –∑–∞–≥–ª—É—à–∏–ª —à—É–º –±–∞—Ä–∞!</i>\n\n" \
             f"<b>{message.from_user.full_name}</b> —Å—Ä—ã–≤–∞–µ—Ç –∫—É—à! –í—Å—è '–∫–æ–ø–∏–ª–∫–∞' —Ç–≤–æ—è!\n\n" \
             f"<b>–í—ã–∏–≥—Ä—ã—à: +{current_jackpot} üç∫!</b>"
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø 4 ---
        
        return await message.answer(text, parse_mode='HTML')

    # 2. –®–∞–Ω—Å –Ω–∞ –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à
    if chance < (settings.jackpot_chance + settings.big_win_chance):
        rating_change = random.randint(settings.big_win_min, settings.big_win_max)
        phrase = random.choice(BEER_WIN_PHRASES).format(rating_change=rating_change)
        await db.update_user_beer_rating(user_id, rating_change)
        return await message.answer(phrase, parse_mode='HTML')

    # 3. –®–∞–Ω—Å –Ω–∞ –æ–±—ã—á–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à
    if chance < (settings.jackpot_chance + settings.big_win_chance + settings.normal_win_chance):
        rating_change = random.randint(settings.normal_win_min, settings.normal_win_max)
        phrase = random.choice(BEER_WIN_PHRASES).format(rating_change=rating_change)
        await db.update_user_beer_rating(user_id, rating_change)
        return await message.answer(phrase, parse_mode='HTML')

    # 4. –ü—Ä–æ–∏–≥—Ä—ã—à (—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–∂–µ–∫–ø–æ—Ç–∞)
    rating_loss = random.randint(settings.lose_min, settings.lose_max)
    user_rating = await db.get_user_beer_rating(user_id)
    
    actual_loss = min(user_rating, rating_loss)
    
    if actual_loss > 0:
        await db.update_user_beer_rating(user_id, -actual_loss)
        await db.update_jackpot(actual_loss)
        phrase = random.choice(BEER_LOSE_PHRASES_RATING).format(rating_loss=actual_loss)
        return await message.answer(phrase, parse_mode='HTML')
    else:
        # –ï—Å–ª–∏ —É —é–∑–µ—Ä–∞ 0, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞—Ç—å, –¥–∞–µ–º –µ–º—É +1 (—É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π)
        rating_change = 1
        phrase = f"<i>–¢–≤–æ—è –∫—Ä—É–∂–∫–∞ –ø—É—Å—Ç–∞...</i>\n–ë–∞—Ä–º–µ–Ω —Å–∂–∞–ª–∏–ª—Å—è –∏ –ø–ª–µ—Å–Ω—É–ª –Ω–∞ –¥–Ω–æ: <b>+1</b> üç∫."
        await db.update_user_beer_rating(user_id, rating_change)
        return await message.answer(phrase, parse_mode='HTML')


@user_router.message(Command("top"))
async def cmd_top(message: Message, db: Database):
    top_users = await db.get_top_users(10)
    
    if not top_users:
        return await message.answer("–í –±–∞—Ä–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç... üçª")

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 5: –¢–µ–∫—Å—Ç /top (–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ + –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ) ---
    text = "üèÜ <b>–õ–µ–≥–µ–Ω–¥—ã –ù–∞—à–µ–≥–æ –ë–∞—Ä–∞</b> üèÜ\n\n(–¢–æ–ø-10 –∑–∞–≤—Å–µ–≥–¥–∞—Ç–∞–µ–≤)\n\n"
    for i, user in enumerate(top_users, 1):
        emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üç∫"
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–º—è
        user_name = user['first_name']
        if user['last_name']:
            user_name += f" {user['last_name']}"
        
        # –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å HTML-–∏–Ω—ä–µ–∫—Ü–∏–π
        user_name = html.escape(user_name)
        
        text += f"{emoji} {i}. {user_name} - <b>{user['beer_rating']}</b> üç∫\n"
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø 5 ---

    await message.answer(text, parse_mode='HTML')
