# handlers/user_commands.py
import asyncio
import random
import logging
from aiogram import Router, Bot, F, html
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from contextlib import suppress
from datetime import datetime, timedelta

from database import Database
from settings import SettingsManager

user_router = Router()

# --- –°–õ–û–í–ê–†–ò –î–õ–Ø –ê–ö–¢–ò–í–ù–´–• –ò–ì–† ---
# (–ú—ã –≤—ã–Ω–æ—Å–∏–º –∏—Ö —Å—é–¥–∞, —á—Ç–æ–±—ã lobby.py –º–æ–≥ –∏—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å)
GAME_ACTIVE_KEY = 'is_active'
active_games = {} # {chat_id: {'is_active': True, 'user_id': user_id, 'game_type': 'roulette'}}

def is_game_active(chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ *–ª—é–±–∞—è* –∏–≥—Ä–∞ (—Ä—É–ª–µ—Ç–∫–∞, –ª–µ—Å–µ–Ω–∫–∞, –º–∞—Ñ–∏—è) –≤ —á–∞—Ç–µ."""
    return chat_id in active_games and active_games[chat_id].get(GAME_ACTIVE_KEY, False)

# --- –ù–û–í–ê–Ø –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def calculate_win_rate(wins, games):
    if games == 0:
        return 0.0
    return round((wins / games) * 100, 1)

# --- –û–ë–´–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ ---

@user_router.message(Command("top"))
async def cmd_top(message: Message, db: Database):
    top_users = await db.get_top_users(limit=10)
    
    if not top_users:
        await message.reply("–ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø–∏–ª –ø–∏–≤–æ üçª")
        return
        
    response = "<b>üèÜ –¢–æ–ø 10 –ª—é–±–∏—Ç–µ–ª–µ–π –ø–∏–≤–∞:</b>\n\n"
    for i, user in enumerate(top_users):
        first_name, last_name, rating = user
        user_name = first_name + (f" {last_name}" if last_name else "")
        emoji = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else "üç∫"
        response += f"{emoji} {html.quote(user_name)} ‚Äî {rating} –ª.\n"
        
    await message.reply(response, parse_mode="HTML")

# --- –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: /mafiastats ---
@user_router.message(Command("mafiastats", "topmafia"))
async def cmd_mafiastats(message: Message, db: Database):
    top_players = await db.get_mafia_top(limit=10)
    
    if not top_players:
        await message.reply("–ï—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª –≤ '–ü–∏–≤–Ω–æ–π –ü–µ—Ä–µ–ø–æ–ª–æ—Ö' üëë")
        return
        
    response = "<b>üëë –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ '–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç—É':</b>\n\n"
    for i, player in enumerate(top_players):
        # first_name, last_name, mafia_authority, mafia_games, mafia_wins
        first_name, last_name, authority, games, wins = player
        user_name = first_name + (f" {last_name}" if last_name else "")
        emoji = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else "üçª"
        
        win_rate = calculate_win_rate(wins, games)
        
        response += (f"{emoji} {html.quote(user_name)} ‚Äî <b>{authority}</b> üëë "
                    f"(<i>{wins}/{games} –∏–≥—Ä, {win_rate}% –ø–æ–±–µ–¥</i>)\n")
        
    await message.reply(response, parse_mode="HTML")


@user_router.message(Command("me"))
async def cmd_me(message: Message, db: Database, settings: SettingsManager):
    user_id = message.from_user.id
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –ë–î
    if not await db.user_exists(user_id):
        await db.add_user(
            user_id=user_id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username
        )
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –ü–∏–≤–Ω–æ–π –†–µ–π—Ç–∏–Ω–≥
    rating = await db.get_user_beer_rating(user_id)
    last_beer_time = await db.get_last_beer_time(user_id)
    
    response = f"<b>üç∫ –í–∞—à –ü–∏–≤–Ω–æ–π –†–µ–π—Ç–∏–Ω–≥:</b> {rating} –ª.\n"
    
    cooldown = timedelta(seconds=settings.beer_cooldown)
    if last_beer_time and (datetime.now() - last_beer_time) < cooldown:
        time_left = (last_beer_time + cooldown) - datetime.now()
        hours, remainder = divmod(time_left.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        response += f"<i>–°–ª–µ–¥—É—é—â–∞—è –∫—Ä—É–∂–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {hours} —á {minutes} –º.</i>\n"
    else:
        response += f"<i>–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–ø–∏—Ç—å –ø–∏–≤–∞ (/beer)!</i>\n"

    # --- –û–ë–ù–û–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ú–∞—Ñ–∏–∏ ---
    mafia_stats = await db.get_mafia_user_stats(user_id)
    if mafia_stats:
        authority, games, wins = mafia_stats
        win_rate = calculate_win_rate(wins, games)
        
        response += "\n"
        response += f"<b>üëë –í–∞—à '–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç' –≤ –ú–∞—Ñ–∏–∏:</b> {authority}\n"
        response += f"<i>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {games}</i>\n"
        response += f"<i>–ü–æ–±–µ–¥: {wins} ({win_rate}%)</i>\n"

    await message.reply(response, parse_mode="HTML")

# --- –ò–ì–†–û–í–´–ï –ö–û–ú–ê–ù–î–´ ---

@user_router.message(Command("beer"))
async def cmd_beer(message: Message, db: Database, settings: SettingsManager):
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    if is_game_active(chat_id):
        await message.reply("–í —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞, –ø–∏–≤–æ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è!")
        return
        
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä –≤ –ë–î
    if not await db.user_exists(user_id):
        await db.add_user(
            user_id=user_id,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            username=message.from_user.username
        )

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–î
    last_beer_time = await db.get_last_beer_time(user_id)
    cooldown = timedelta(seconds=settings.beer_cooldown)

    if last_beer_time and (datetime.now() - last_beer_time) < cooldown:
        time_left = (last_beer_time + cooldown) - datetime.now()
        hours, remainder = divmod(time_left.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        await message.reply(f"–í—ã —É–∂–µ –ø–∏–ª–∏ –ø–∏–≤–æ. –°–ª–µ–¥—É—é—â–∞—è –∫—Ä—É–∂–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {hours} —á {minutes} –º.")
        return

    # 3. –®–∞–Ω—Å –Ω–∞ –î–∂–µ–∫–ø–æ—Ç
    jackpot_chance = settings.jackpot_chance
    if random.randint(1, jackpot_chance) == 1:
        jackpot_amount = await db.get_jackpot()
        new_rating = await db.get_user_beer_rating(user_id) + jackpot_amount
        await db.update_beer_data(user_id, new_rating)
        await db.reset_jackpot()
        await message.reply(f"<b>üí• –î–ñ–ï–ö–ü–û–¢! üí•</b>\n–í—ã –Ω–∞—à–ª–∏ {jackpot_amount} –ª. –ø–∏–≤–∞! üçª\n–í–∞—à –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {new_rating} –ª.", parse_mode="HTML")
    else:
        # 4. –û–±—ã—á–Ω–∞—è –≤—ã–¥–∞—á–∞
        amount = random.randint(1, 100)
        new_rating = await db.get_user_beer_rating(user_id) + amount
        await db.update_beer_data(user_id, new_rating)
        await db.update_jackpot(amount // 10) # 10% –≤ –¥–∂–µ–∫–ø–æ—Ç
        await message.reply(f"–í—ã –≤—ã–ø–∏–ª–∏ {amount} –ª. –ø–∏–≤–∞ üçª\n–í–∞—à –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {new_rating} –ª.")


@user_router.message(Command("roulette"))
async def cmd_roulette(message: Message, command: CommandObject, db: Database, settings: SettingsManager):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    if is_game_active(chat_id):
        await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –¥—Ä—É–≥–∞—è –∏–≥—Ä–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return

    if not await db.user_exists(user_id):
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π /beer —Ä–µ–π—Ç–∏–Ω–≥, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏.")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–≤–∫–∏
    try:
        bet_arg = command.args
        if not bet_arg:
            raise ValueError("–°—Ç–∞–≤–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
        
        bet = int(bet_arg)
        min_bet = settings.roulette_min_bet
        max_bet = settings.roulette_max_bet
        
        if not (min_bet <= bet <= max_bet):
            raise ValueError(f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {min_bet} –¥–æ {max_bet} –ª.")
            
        current_rating = await db.get_user_beer_rating(user_id)
        if bet > current_rating:
            raise ValueError(f"–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –ø–∏–≤–∞! –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {current_rating} –ª.")

    except ValueError as e:
        await message.reply(f"–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏: {e}\n–ü—Ä–∏–º–µ—Ä: /roulette {settings.roulette_min_bet}")
        return

    # –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
    active_games[chat_id] = {GAME_ACTIVE_KEY: True, "user_id": user_id, "game_type": "roulette"}
    
    await db.change_rating(user_id, -bet)
    
    msg = await message.reply(
        f"{message.from_user.first_name} —Å—Ç–∞–≤–∏—Ç {bet} –ª. –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç '–ü–∏–≤–Ω—É—é –†—É–ª–µ—Ç–∫—É'...\n"
        "–ó–∞—Ä—è–∂–∞–µ–º 6-–∑–∞—Ä—è–¥–Ω—ã–π —Ä–µ–≤–æ–ª—å–≤–µ—Ä –æ–¥–Ω–∏–º –ø–∞—Ç—Ä–æ–Ω–æ–º... üçª"
    )
    await asyncio.sleep(2)
    
    result_msg = ""
    for i in range(1, 7):
        await asyncio.sleep(1.5)
        roll = random.randint(i, 6)
        if roll == 6: # –í—ã—Å—Ç—Ä–µ–ª
            await msg.edit_text(msg.text + f"\n\n<b>...–ë–ê-–ë–ê–•!</b> üí• –ù–∞ {i}-–º –≤—ã—Å—Ç—Ä–µ–ª–µ!\n"
                                          f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet} –ª. –ø–∏–≤–∞.", parse_mode="HTML")
            break
        else:
            await msg.edit_text(msg.text + f"\n...{i}-–π –≤—ã—Å—Ç—Ä–µ–ª... —â–µ–ª–∫! (–ø—É—Å—Ç–æ)")
    else:
        # –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –≤—ã—Å—Ç—Ä–µ–ª–∞
        win_amount = bet * 2
        await db.change_rating(user_id, win_amount + bet) # (–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É + –≤—ã–∏–≥—Ä—ã—à)
        await msg.edit_text(msg.text + f"\n\n<b>...—â–µ–ª–∫!</b> –í—Å–µ 6 –ø–∞—Ç—Ä–æ–Ω–æ–≤ –ø—É—Å—Ç—ã–µ! ü•≥\n"
                                      f"–í—ã –≤—ã–∂–∏–ª–∏ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ {win_amount} –ª. –ø–∏–≤–∞!", parse_mode="HTML")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    if chat_id in active_games:
        del active_games[chat_id]


@user_router.message(Command("ladder"))
async def cmd_ladder(message: Message, command: CommandObject, db: Database, settings: SettingsManager):
    chat_id = message.chat.id
    user_id = message.from_user.id

    if is_game_active(chat_id):
        await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –¥—Ä—É–≥–∞—è –∏–≥—Ä–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return

    if not await db.user_exists(user_id):
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π /beer —Ä–µ–π—Ç–∏–Ω–≥, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏.")
        return

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–≤–∫–∏
    try:
        bet_arg = command.args
        if not bet_arg:
            raise ValueError("–°—Ç–∞–≤–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.")
        
        bet = int(bet_arg)
        min_bet = settings.ladder_min_bet
        max_bet = settings.ladder_max_bet
        
        if not (min_bet <= bet <= max_bet):
            raise ValueError(f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {min_bet} –¥–æ {max_bet} –ª.")
            
        current_rating = await db.get_user_beer_rating(user_id)
        if bet > current_rating:
            raise ValueError(f"–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –ø–∏–≤–∞! –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {current_rating} –ª.")

    except ValueError as e:
        await message.reply(f"–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏: {e}\n–ü—Ä–∏–º–µ—Ä: /ladder {settings.ladder_min_bet}")
        return

    # –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞
    active_games[chat_id] = {GAME_ACTIVE_KEY: True, "user_id": user_id, "game_type": "ladder"}
    
    await db.change_rating(user_id, -bet)
    
    steps = ["üü•", "üü•", "üü•", "üü•", "üü•"]
    win_step = random.randint(0, 4)
    steps[win_step] = "üü©"
    
    steps_text = " ".join(f"[{i+1}]" for i in range(5))
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=str(i+1), callback_data=f"ladder_{i}_{win_step}_{bet}_{user_id}") for i in range(5)]
    ])
    
    await message.reply(
        f"{message.from_user.first_name} —Å—Ç–∞–≤–∏—Ç {bet} –ª. –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç '–ü–∏–≤–Ω—É—é –õ–µ—Å–µ–Ω–∫—É'!\n"
        f"–û–¥–Ω–∞ –∏–∑ 5 —Å—Ç—É–ø–µ–Ω–µ–∫ ‚Äî –≤—ã–∏–≥—Ä—ã—à (x4). –ö–∞–∫—É—é –≤—ã–±–µ—Ä–µ—Ç–µ?\n\n{steps_text}",
        reply_markup=keyboard
    )
    
    # (–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã (del active_games) –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ callback'–µ)

@user_router.callback_query(F.data.startswith("ladder_"))
async def cq_ladder_step(callback: CallbackQuery, bot: Bot, db: Database):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    
    # 1. –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    try:
        _, choice_str, win_step_str, bet_str, owner_id_str = callback.data.split("_")
        choice = int(choice_str)
        win_step = int(win_step_str)
        bet = int(bet_str)
        owner_id = int(owner_id_str)
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∂–∞–ª –≤–ª–∞–¥–µ–ª–µ—Ü
    if user_id != owner_id:
        await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", show_alert=True)
        return
        
    # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    steps = ["üü•", "üü•", "üü•", "üü•", "üü•"]
    steps[win_step] = "üü©"
    
    result_text = f"<b>–ü–∏–≤–Ω–∞—è –õ–µ—Å–µ–Ω–∫–∞</b>\n–°—Ç–∞–≤–∫–∞: {bet} –ª.\n\n"
    result_text += " ".join(steps) + "\n"
    
    arrow_steps = [" "] * 5
    arrow_steps[choice] = "‚¨ÜÔ∏è"
    result_text += " ".join(arrow_steps) + "\n\n"

    if choice == win_step:
        win_amount = bet * 4
        await db.change_rating(user_id, win_amount + bet) # (–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É + –≤—ã–∏–≥—Ä—ã—à)
        result_text += f"ü•≥ <b>–í–´–ò–ì–†–´–®!</b>\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–µ—Ä–Ω—É—é —Å—Ç—É–ø–µ–Ω—å–∫—É –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ {win_amount} –ª. –ø–∏–≤–∞!"
    else:
        result_text += f"üò• <b>–ü—Ä–æ–∏–≥—Ä—ã—à!</b>\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—Ç—É–ø–µ–Ω—å–∫—É –∏ —Ç–µ—Ä—è–µ—Ç–µ {bet} –ª."

    await callback.message.edit_text(result_text, reply_markup=None, parse_mode="HTML")
    await callback.answer()

    # 4. –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    if chat_id in active_games:
        del active_games[chat_id]
