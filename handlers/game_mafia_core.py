# handlers/game_mafia_core.py
import asyncio
import random
import logging
from aiogram import Router, Bot, F, html
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from contextlib import suppress
from typing import Dict, List, Set, Any
from collections import Counter

from database import Database
from settings import SettingsManager
from utils import format_time_left
from .user_commands import active_games, GAME_ACTIVE_KEY # –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–≥—Ä—ã –≤ –∫–æ–Ω—Ü–µ

mafia_game_router = Router()

# --- FSM (–ì–ª–∞–≤–Ω—ã–π) ---
class MafiaGameStates(StatesGroup):
    game_in_progress = State()
    awaiting_last_word = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–±–∏—Ç–æ–≥–æ (–∂–¥–µ–º 30 —Å–µ–∫)
    night_voting = State()        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –º–∞—Ñ–∏–∏
    # (FSM –¥–ª—è –¥–Ω—è –ø–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω—ã, –º–æ–¥–µ—Ä–∞—Ü–∏—è –∏–¥–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å—É –≤ –ë–î)


# --- CallbackData ---
class MafiaNightVoteCallbackData(CallbackData, prefix="mafia_vote"):
    action: str # 'kill', 'check', 'heal', 'self_heal'
    target_user_id: int = 0

class MafiaDayVoteCallbackData(CallbackData, prefix="mafia_day_vote"):
    action: str # 'nominate'
    target_user_id: int = 0
    
class MafiaLynchVoteCallbackData(CallbackData, prefix="mafia_lynch"):
    action: str # 'lynch', 'pardon'


# --- –ö–û–ù–°–¢–ê–ù–¢–´ –†–û–õ–ï–ô (—á—Ç–æ–±—ã –Ω–µ –æ—à–∏–±–∏—Ç—å—Å—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö) ---
ROLE_MAFIA_LEADER = 'mafia_leader' # ü•§ –ì–ª–∞–≤–∞—Ä—å
ROLE_MAFIA = 'mafia'               # ü•§ –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫
ROLE_DETECTIVE = 'detective'       # üïµÔ∏è‚Äç‚ôÇÔ∏è –ë–∞—Ä–º–µ–Ω
ROLE_DOCTOR = 'doctor'             # ü©∫ –ü–æ—Ö–º–µ—Ç–æ–ª–æ–≥
ROLE_CIVILIAN = 'civilian'         # üçª –õ—é–±–∏—Ç–µ–ª—å –ü–∏–≤–∞

MAFIA_TEAM_ROLES = [ROLE_MAFIA_LEADER, ROLE_MAFIA]
CIVILIAN_TEAM_ROLES = [ROLE_DETECTIVE, ROLE_DOCTOR, ROLE_CIVILIAN]
ACTIVE_NIGHT_ROLES = [ROLE_MAFIA_LEADER, ROLE_MAFIA, ROLE_DETECTIVE, ROLE_DOCTOR]

ROLE_NAMES_RU = {
    ROLE_MAFIA_LEADER: "ü•§ –ì–ª–∞–≤–∞—Ä—å –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤",
    ROLE_MAFIA: "ü•§ –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫",
    ROLE_DETECTIVE: "üïµÔ∏è‚Äç‚ôÇÔ∏è –ë–∞—Ä–º–µ–Ω",
    ROLE_DOCTOR: "ü©∫ –ü–æ—Ö–º–µ—Ç–æ–ª–æ–≥",
    ROLE_CIVILIAN: "üçª –õ—é–±–∏—Ç–µ–ª—å –ü–∏–≤–∞"
}


# --- –ú–ê–¢–†–ò–¶–ê –†–û–õ–ï–ô (–ö–∞–∫ –º—ã –∏ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å) ---
MAFIA_ROLES_MATRIX = {
    5:  {'l': 1, 'm': 0, 'd': 1, 'h': 1, 'c': 2},
    6:  {'l': 1, 'm': 1, 'd': 1, 'h': 1, 'c': 2},
    7:  {'l': 1, 'm': 1, 'd': 1, 'h': 1, 'c': 3},
    8:  {'l': 1, 'm': 2, 'd': 1, 'h': 1, 'c': 3},
    9:  {'l': 1, 'm': 2, 'd': 1, 'h': 1, 'c': 4},
    10: {'l': 1, 'm': 2, 'd': 1, 'h': 1, 'c': 5},
}

# --- –û–ü–ò–°–ê–ù–ò–Ø –†–û–õ–ï–ô (–¥–ª—è –õ–°) ---
ROLE_DESCRIPTIONS = {
    ROLE_MAFIA_LEADER: {
        "title": "ü•§ –ì–ª–∞–≤–∞—Ä—å –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤",
        "description": ("–í—ã ‚Äî —Ç–∞–π–Ω—ã–π –ª–∏–¥–µ—Ä –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤. "
                        "–í–∞—à–∞ —Ü–µ–ª—å ‚Äî –≤—ã–≥–Ω–∞—Ç—å –∏–∑ –±–∞—Ä–∞ –≤—Å–µ—Ö –õ—é–±–∏—Ç–µ–ª–µ–π –ü–∏–≤–∞.\n\n"
                        "‚Ä¢ –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –∏ –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç–µ, –∫–æ–≥–æ '–ø—Ä–æ–ª–∏—Ç—å'.\n"
                        "‚Ä¢ <b>–í–∞—à –≥–æ–ª–æ—Å ‚Äî —Ä–µ—à–∞—é—â–∏–π!</b>\n"
                        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø–æ–∫–∞ –¥–ª–∏—Ç—Å—è –Ω–æ—á—å.")
    },
    ROLE_MAFIA: {
        "title": "ü•§ –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫",
        "description": ("–í—ã ‚Äî –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫. "
                        "–í–∞—à–∞ —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Å–≤–æ–µ–º—É –ì–ª–∞–≤–∞—Ä—é –≤—ã–≥–Ω–∞—Ç—å –∏–∑ –±–∞—Ä–∞ –≤—Å–µ—Ö –õ—é–±–∏—Ç–µ–ª–µ–π –ü–∏–≤–∞.\n\n"
                        "‚Ä¢ –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã —Å –∫–æ–º–∞–Ω–¥–æ–π –≤—ã–±–∏—Ä–∞–µ—Ç–µ, –∫–æ–≥–æ '–ø—Ä–æ–ª–∏—Ç—å'.\n"
                        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø–æ–∫–∞ –¥–ª–∏—Ç—Å—è –Ω–æ—á—å.")
    },
    ROLE_DETECTIVE: {
        "title": "üïµÔ∏è‚Äç‚ôÇÔ∏è –ë–∞—Ä–º–µ–Ω",
        "description": ("–í—ã ‚Äî –ë–∞—Ä–º–µ–Ω. "
                        "–í–∞—à–∞ —Ü–µ–ª—å ‚Äî –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—Å–µ—Ö –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤.\n\n"
                        "‚Ä¢ –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –º–æ–∂–µ—Ç–µ '–ø—Ä–æ—Ç–µ—Ä–µ—Ç—å —Å—Ç–∞–∫–∞–Ω—ã' (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å) –æ–¥–Ω–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è.\n"
                        "‚Ä¢ –í—ã —É–∑–Ω–∞–µ—Ç–µ, –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫ –æ–Ω –∏–ª–∏ –Ω–µ—Ç (–ì–ª–∞–≤–∞—Ä—è –≤—ã —Ç–æ–∂–µ –≤–∏–¥–∏—Ç–µ –∫–∞–∫ –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–∞).")
    },
    ROLE_DOCTOR: {
        "title": "ü©∫ –ü–æ—Ö–º–µ—Ç–æ–ª–æ–≥",
        "description": ("–í—ã ‚Äî –ü–æ—Ö–º–µ—Ç–æ–ª–æ–≥. "
                        "–í–∞—à–∞ —Ü–µ–ª—å ‚Äî —Å–ø–∞—Å—Ç–∏ –õ—é–±–∏—Ç–µ–ª–µ–π –ü–∏–≤–∞ –æ—Ç –≤—ã–≥–æ–Ω–∞.\n\n"
                        "‚Ä¢ –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –º–æ–∂–µ—Ç–µ '–¥–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ' (—Å–ø–∞—Å—Ç–∏) –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç –Ω–∞–ø–∞–¥–µ–Ω–∏—è –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤.\n"
                        "‚Ä¢ <b>–í—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å—Ç–∏ —Å–µ–±—è, –Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –∑–∞ –∏–≥—Ä—É.</b>")
    },
    ROLE_CIVILIAN: {
        "title": "üçª –õ—é–±–∏—Ç–µ–ª—å –ü–∏–≤–∞",
        "description": ("–í—ã ‚Äî –æ–±—ã—á–Ω—ã–π –õ—é–±–∏—Ç–µ–ª—å –ü–∏–≤–∞. "
                        "–í–∞—à–∞ —Ü–µ–ª—å ‚Äî –Ω–∞–π—Ç–∏ –∏ –≤—ã–≥–Ω–∞—Ç—å –≤—Å–µ—Ö –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏–∑ –±–∞—Ä–∞.\n\n"
                        "‚Ä¢ –î–Ω–µ–º —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ –∏ –≥–æ–ª–æ—Å—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π.\n"
                        "‚Ä¢ –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –ø–æ–ø–∞—Å—Ç—å—Å—è –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–∞–º –Ω–æ—á—å—é!")
    }
}

# --- –ú–ï–ù–ï–î–ñ–ï–† –ò–ì–†–´ (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è '–∂–∏–≤—ã—Ö' –¥–∞–Ω–Ω—ã—Ö) ---
class GameManager:
    """–•—Ä–∞–Ω–∏—Ç '–∂–∏–≤—ã–µ' –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã (–≥–æ–ª–æ—Å–∞, —Ç–∞–π–º–µ—Ä—ã)."""
    def __init__(self, chat_id: int, bot: Bot, db: Database, settings: SettingsManager):
        self.chat_id = chat_id
        self.bot = bot
        self.db = db
        self.settings = settings
        self.day_count = 0
        self.players: Dict[int, Dict[str, Any]] = {} # {user_id: {'role': '...', 'is_alive': True, 'name': '...'}}
        # –ù–æ—á—å
        self.night_votes: Dict[str, Dict[int, int]] = {'kill': {}, 'heal': {}, 'check': {}}
        self.night_voted_users: Set[int] = set()
        self.mafia_leader_id: int = 0
        self.night_timer_task: asyncio.Task = None
        # –î–µ–Ω—å
        self.day_timer_task: asyncio.Task = None
        self.last_word_task: asyncio.Task = None
        self.day_votes_nominations: Dict[int, int] = {} # {voter_id: target_id}
        self.day_vote_timer_task: asyncio.Task = None
        # –°—É–¥ –õ–∏–Ω—á–∞
        self.lynch_candidate_id: int = 0
        self.day_votes_lynch: Dict[int, str] = {} # {voter_id: 'lynch'/'pardon'}
        self.lynch_vote_timer_task: asyncio.Task = None
        self.lynch_message_id: int = 0


    async def load_players_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ë–î –≤ self.players –∏ –Ω–∞—Ö–æ–¥–∏—Ç –õ–∏–¥–µ—Ä–∞."""
        players_data = await self.db.get_mafia_players(self.chat_id)
        for p in players_data:
            user_id = p[1]
            role = p[2]
            is_alive = bool(p[3])
            db_user = await self.db.get_user_by_id(user_id)
            name = db_user[0] if db_user else f"–ò–≥—Ä–æ–∫ {user_id}"
            
            self.players[user_id] = {'role': role, 'is_alive': is_alive, 'name': html.quote(name)}
            
            if role == ROLE_MAFIA_LEADER and is_alive:
                self.mafia_leader_id = user_id
                
    def get_alive_players(self, roles: List[str] = None) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ —Ä–æ–ª—è–º."""
        alive = []
        for user_id, data in self.players.items():
            if data['is_alive']:
                if roles is None: # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ –≤–∞–∂–Ω—ã
                    alive.append(user_id)
                elif data['role'] in roles: # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
                    alive.append(user_id)
        return alive
    
    def get_player_name(self, user_id: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π)."""
        if user_id in self.players:
            return self.players[user_id]['name']
        return "<i>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π</i>"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö GameManager'–æ–≤
active_game_managers: Dict[int, GameManager] = {}


# --- –Ø–î–†–û –ò–ì–†–´: –†–ê–ó–î–ê–ß–ê –†–û–õ–ï–ô ---
async def distribute_roles_and_start(chat_id: int, bot: Bot, db: Database, settings: SettingsManager, players: list):
    logging.info(f"[Mafia {chat_id}] –®–∞–≥ 2: –†–∞–∑–¥–∞—á–∞ —Ä–æ–ª–µ–π...")
    
    player_count = len(players)
    player_ids = [p[1] for p in players] # p[1] —ç—Ç–æ user_id
    random.shuffle(player_ids)
    
    roles_config = MAFIA_ROLES_MATRIX[player_count]
    roles_list = []
    roles_list.extend([ROLE_MAFIA_LEADER] * roles_config['l'])
    roles_list.extend([ROLE_MAFIA] * roles_config['m'])
    roles_list.extend([ROLE_DETECTIVE] * roles_config['d'])
    roles_list.extend([ROLE_DOCTOR] * roles_config['h'])
    roles_list.extend([ROLE_CIVILIAN] * roles_config['c'])
    random.shuffle(roles_list)
    
    assigned_roles = {} # {user_id: role_key}
    mafia_team_info = {} # {user_id: "Name (Role)"}
    
    player_names = {} # {user_id: first_name}
    for user_id in player_ids:
        db_user = await db.get_user_by_id(user_id)
        player_names[user_id] = html.quote(db_user[0]) if db_user else f"–ò–≥—Ä–æ–∫ {user_id}"
        
    for i, user_id in enumerate(player_ids):
        role = roles_list[i]
        assigned_roles[user_id] = role
        if role in [ROLE_MAFIA, ROLE_MAFIA_LEADER]:
            role_name = "–ì–ª–∞–≤–∞—Ä—å" if role == ROLE_MAFIA_LEADER else "–¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫"
            mafia_team_info[user_id] = f"{player_names[user_id]} (ü•§ {role_name})"

    tasks = []
    
    for user_id, role in assigned_roles.items():
        tasks.append(
            db.update_mafia_player_role(chat_id, user_id, role)
        )

    for user_id, role in assigned_roles.items():
        role_data = ROLE_DESCRIPTIONS[role]
        text = f"<b>{role_data['title']}</b>\n\n{role_data['description']}"
        
        if role in [ROLE_MAFIA, ROLE_MAFIA_LEADER]:
            text += "\n\n<b>–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:</b>\n"
            for mafia_id, mafia_name in mafia_team_info.items():
                if mafia_id == user_id:
                    text += f"‚Ä¢ <b>{mafia_name} (–í—ã)</b>\n"
                else:
                    text += f"‚Ä¢ {mafia_name}\n"
                    
        tasks.append(
            bot.send_message(user_id, text, parse_mode="HTML")
        )

    try:
        await asyncio.gather(*tasks)
    except Exception as e:
        logging.error(f"[Mafia {chat_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Ä–æ–ª–µ–π: {e}")
        pass 

    await db.update_mafia_game_status(chat_id, "night_1", day_count=1)

    game_db = await db.get_mafia_game(chat_id)
    message_id = game_db[1]
    
    with suppress(TelegramBadRequest):
        await bot.unpin_chat_message(chat_id, message_id)
    
    await bot.edit_message_text(
        ("üåô <b>–ù–ê–°–¢–£–ü–ê–ï–¢ –ù–û–ß–¨ 1</b> üåô\n\n"
         "–í—Å–µ —Ä–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã –≤ –õ–°! –ë–∞—Ä –ø–æ–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ —Ç–∏—à–∏–Ω—É.\n"
         "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏ –¥–µ–ª–∞—é—Ç —Å–≤–æ–π —Ö–æ–¥..."),
        chat_id, message_id,
        reply_markup=None 
    )
    
    logging.info(f"[Mafia {chat_id}] –†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –ù–æ—á—å 1...")

    await start_night_phase(chat_id, bot, db, settings, day_count=1)


# --- –Ø–î–†–û –ò–ì–†–´: –§–ê–ó–ê –ù–û–ß–ò ---

async def night_timer_task(game: GameManager):
    """–¢–∞–π–º–µ—Ä –Ω–æ—á–∏. –ñ–¥–µ—Ç N —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç 'end_night_phase'."""
    await asyncio.sleep(game.settings.mafia_night_timer)
    
    if game.chat_id not in active_game_managers:
        logging.info(f"[Mafia {game.chat_id}] –¢–∞–π–º–µ—Ä –Ω–æ—á–∏: –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–º–µ–Ω–∞.")
        return
        
    logging.info(f"[Mafia {game.chat_id}] –ù–æ—á–Ω–æ–π —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫. –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏...")
    
    tasks = []
    for user_id in game.get_alive_players(MAFIA_TEAM_ROLES):
        fsm_context = FSMContext(game.bot, user_id=user_id, chat_id=user_id)
        tasks.append(fsm_context.clear())
    await asyncio.gather(*tasks)
    
    await end_night_phase(game)


async def generate_night_vote_keyboard(game: GameManager, player_role: str, user_id: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –õ–°."""
    buttons = []
    
    if player_role in MAFIA_TEAM_ROLES:
        action = "kill"
        targets = game.get_alive_players()
        mafia_team_ids = game.get_alive_players(MAFIA_TEAM_ROLES)
        targets = [pid for pid in targets if pid not in mafia_team_ids]
    
    elif player_role == ROLE_DETECTIVE:
        action = "check"
        targets = [pid for pid in game.get_alive_players() if pid != user_id]
        
    elif player_role == ROLE_DOCTOR:
        action = "heal"
        targets = game.get_alive_players() 
    
    else: return None 
    
    for target_user_id in targets:
        target_name = game.players[target_user_id]['name']
        buttons.append([
            InlineKeyboardButton(
                text=target_name,
                callback_data=MafiaNightVoteCallbackData(action=action, target_user_id=target_user_id).pack()
            )
        ])
    
    if player_role == ROLE_DOCTOR:
        player_data = await game.db.get_mafia_player(game.chat_id, user_id)
        self_heals_used = player_data[4]
        
        if self_heals_used == 0:
            buttons.append([
                InlineKeyboardButton(
                    text="üõ°Ô∏è –°–ø–∞—Å—Ç–∏ –°–ï–ë–Ø (–û—Å—Ç–∞–ª—Å—è 1 —Ä–∞–∑)",
                    callback_data=MafiaNightVoteCallbackData(action="self_heal", target_user_id=user_id).pack()
                )
            ])
            
    if not buttons:
        return None 

    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def start_night_phase(chat_id: int, bot: Bot, db: Database, settings: SettingsManager, day_count: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É."""
    logging.info(f"[Mafia {chat_id}] –ù–æ—á—å {day_count} –Ω–∞—á–∞–ª–∞—Å—å.")
    await db.update_mafia_game_status(chat_id, f"night_{day_count}", day_count=day_count)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª, –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if chat_id in active_game_managers:
        del active_game_managers[chat_id]
        
    game = GameManager(chat_id, bot, db, settings)
    game.day_count = day_count
    await game.load_players_from_db()
    active_game_managers[chat_id] = game 

    tasks = []
    alive_players = game.get_alive_players()
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    game_db = await db.get_mafia_game(chat_id)
    message_id = game_db[1] # C–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –ª–æ–±–±–∏
    
    with suppress(TelegramBadRequest):
        await bot.edit_message_text(
            f"üåô <b>–ù–ê–°–¢–£–ü–ê–ï–¢ –ù–û–ß–¨ {day_count}</b> üåô\n\n"
            "–ë–∞—Ä –ø–æ–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ —Ç–∏—à–∏–Ω—É. –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏ –¥–µ–ª–∞—é—Ç —Å–≤–æ–π —Ö–æ–¥...",
            chat_id, message_id,
            reply_markup=None 
        )
    
    for user_id in alive_players:
        role = game.players[user_id]['role']
        
        keyboard = await generate_night_vote_keyboard(game, role, user_id)
        
        if keyboard:
            tasks.append(
                bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö–æ–¥:", reply_markup=keyboard)
            )
        
        if role in MAFIA_TEAM_ROLES:
            fsm_context = FSMContext(bot, user_id=user_id, chat_id=user_id)
            tasks.append(
                fsm_context.set_state(MafiaGameStates.night_voting)
            )
            
    await asyncio.gather(*tasks)

    task = asyncio.create_task(night_timer_task(game))
    game.night_timer_task = task


# --- –•–≠–ù–î–õ–ï–†–´ –ù–û–ß–ù–û–ô –§–ê–ó–´ ---

@mafia_game_router.callback_query(MafiaNightVoteCallbackData.filter(), StateFilter("*"))
async def cq_mafia_night_vote(callback: CallbackQuery, callback_data: MafiaNightVoteCallbackData, bot: Bot):
    user_id = callback.from_user.id
    
    game_id = None
    game_manager = None
    for chat_id_key, game in active_game_managers.items():
        if user_id in game.players:
            game_id = chat_id_key
            game_manager = game
            break
            
    if not game_manager:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É.", show_alert=True)
        return

    if not game_manager.players[user_id]['is_alive']:
        await callback.answer("–ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç.", show_alert=True)
        return
        
    if not game_manager.night_timer_task or game_manager.night_timer_task.done():
        await callback.answer("–ù–æ—á—å —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –≤–∞—à –≥–æ–ª–æ—Å –Ω–µ –ø—Ä–∏–Ω—è—Ç.", show_alert=True)
        return

    action = callback_data.action
    target_user_id = callback_data.target_user_id
    target_name = game_manager.get_player_name(target_user_id)
    
    await game_manager.db.reset_mafia_player_inactive(game_id, user_id)
    game_manager.night_voted_users.add(user_id)
    
    if action == "kill":
        game_manager.night_votes['kill'][user_id] = target_user_id
        await callback.message.edit_text(f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç: '–ø—Ä–æ–ª–∏—Ç—å' <b>{target_name}</b>.", parse_mode="HTML")
        
        voter_name = game_manager.get_player_name(user_id)
        tasks = []
        for mafia_id in game_manager.get_alive_players(MAFIA_TEAM_ROLES):
            if mafia_id != user_id: 
                tasks.append(
                    bot.send_message(mafia_id, f"üó≥Ô∏è *{voter_name}* –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–≥–Ω–∞—Ç—å *{target_name}*.")
                )
        await asyncio.gather(*tasks)

    elif action == "check":
        game_manager.night_votes['check'][user_id] = target_user_id
        await callback.message.edit_text(f"‚úÖ –í—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å <b>{target_name}</b>. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–≤–µ—Ç–∞...", parse_mode="HTML")

    elif action == "heal":
        game_manager.night_votes['heal'][user_id] = target_user_id
        await callback.message.edit_text(f"‚úÖ –í—ã —Ä–µ—à–∏–ª–∏ —Å–ø–∞—Å—Ç–∏ <b>{target_name}</b>. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–≤–µ—Ç–∞...", parse_mode="HTML")

    elif action == "self_heal":
        player_data = await game_manager.db.get_mafia_player(game_id, user_id)
        if player_data[4] > 0:
             await callback.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–∞–º–æ–ª–µ—á–µ–Ω–∏–µ!", show_alert=True)
             return
             
        game_manager.night_votes['heal'][user_id] = user_id
        await game_manager.db.set_mafia_player_self_heal(game_id, user_id)
        
        await callback.message.edit_text(
            f"‚úÖ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–µ <b>–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–∞–º–æ–ª–µ—á–µ–Ω–∏–µ</b>. "
            f"–ë–æ–ª—å—à–µ –≤—ã —Å–µ–±—è —Å–ø–∞—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç–µ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–≤–µ—Ç–∞...",
            parse_mode="HTML"
        )
    
    await callback.answer()


@mafia_game_router.message(MafiaGameStates.night_voting)
async def handle_mafia_chat(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    
    game_id = None
    game_manager = None
    for chat_id_key, game in active_game_managers.items():
        if user_id in game.players:
            game_id = chat_id_key
            game_manager = game
            break
    if not game_manager: return

    if not game_manager.players[user_id]['is_alive']:
        await state.clear() 
        return
        
    role = game_manager.players[user_id]['role']
    prefix = "ü•§ (–ì–ª–∞–≤–∞—Ä—å)" if role == ROLE_MAFIA_LEADER else "ü•§"
    sender_name = game_manager.get_player_name(user_id)
    
    text_to_send = f"üí¨ <b>{sender_name} {prefix}:</b>\n{html.quote(message.text)}"
    
    tasks = []
    for mafia_id in game_manager.get_alive_players(MAFIA_TEAM_ROLES):
        if mafia_id != user_id: 
            tasks.append(
                bot.send_message(mafia_id, text_to_send, parse_mode="HTML")
            )
            
    await asyncio.gather(*tasks)


# --- –Ø–î–†–û –ò–ì–†–´: –§–ê–ó–ê –£–¢–†–ê ---

async def end_night_phase(game: GameManager):
    """–ü–æ–¥–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏ –Ω–æ—á–∏."""
    chat_id = game.chat_id
    logging.info(f"[Mafia {chat_id}] –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –Ω–æ—á–∏...")
    
    mafia_kill_target = None
    doctor_save_target = None
    detective_check_target = None
    detective_id = None
    
    mafia_votes = game.night_votes['kill']
    
    if game.mafia_leader_id in mafia_votes:
        mafia_kill_target = mafia_votes[game.mafia_leader_id]
    
    elif mafia_votes:
        vote_counts = Counter(mafia_votes.values())
        most_voted = vote_counts.most_common(1)
        
        if len(most_voted) > 0:
            top_target, top_count = most_voted[0]
            is_tie = sum(1 for target, count in vote_counts.items() if count == top_count) > 1
            if not is_tie:
                mafia_kill_target = top_target

    doctor_votes = game.night_votes['heal']
    if doctor_votes:
        doctor_save_target = list(doctor_votes.values())[0]
        
    detective_votes = game.night_votes['check']
    if detective_votes:
        detective_id = list(detective_votes.keys())[0]
        detective_check_target = list(detective_votes.values())[0]
        
    afk_kicked_players = []
    
    all_active_players = await game.db.get_mafia_players_by_role(chat_id, ACTIVE_NIGHT_ROLES, is_alive=True)
    
    for p_data in all_active_players:
        user_id = p_data[1]
        role = p_data[2]
        inactive_count = p_data[5] # inactive_nights_count
        
        if user_id not in game.night_voted_users:
            await game.db.increment_mafia_player_inactive(chat_id, user_id)
            
            if inactive_count + 1 >= 2:
                await game.db.set_mafia_player_alive(chat_id, user_id, is_alive=False)
                game.players[user_id]['is_alive'] = False
                afk_kicked_players.append(user_id)
                logging.info(f"[Mafia {chat_id}] –ò–≥—Ä–æ–∫ {user_id} ({role}) –∫–∏–∫–Ω—É—Ç –∑–∞ –ê–§–ö.")

    final_killed_user_id = None
    was_saved = False
    
    if mafia_kill_target:
        if mafia_kill_target == doctor_save_target:
            was_saved = True
            logging.info(f"[Mafia {chat_id}] –î–æ–∫—Ç–æ—Ä —Å–ø–∞—Å {mafia_kill_target}.")
        else:
            final_killed_user_id = mafia_kill_target
            await game.db.set_mafia_player_alive(chat_id, final_killed_user_id, is_alive=False)
            game.players[final_killed_user_id]['is_alive'] = False
            logging.info(f"[Mafia {chat_id}] –ú–∞—Ñ–∏—è —É–±–∏–ª–∞ {final_killed_user_id}.")

    if detective_check_target:
        target_role = game.players[detective_check_target]['role']
        is_mafia = target_role in MAFIA_TEAM_ROLES
        
        check_result_text = f"üïµÔ∏è‚Äç‚ôÇÔ∏è –í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ <b>{game.get_player_name(detective_check_target)}</b>.\n"
        if is_mafia:
            check_result_text += "<b>–û–Ω(–∞) ‚Äî ü•§ –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫!</b>"
        else:
            check_result_text += "–û–Ω(–∞) –Ω–µ –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫."
            
        with suppress(TelegramBadRequest):
            await game.bot.send_message(detective_id, check_result_text, parse_mode="HTML")
            
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
    if await check_for_win_condition(game):
        return # (–§—É–Ω–∫—Ü–∏—è check_for_win_condition —Å–∞–º–∞ –∑–∞–≤–µ—Ä—à–∏—Ç –∏–≥—Ä—É)

    await start_morning_phase(game, final_killed_user_id, was_saved, afk_kicked_players)


async def start_morning_phase(game: GameManager, killed_user_id: int, was_saved: bool, afk_kicked_players: List[int]):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç "–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ" –∏–ª–∏ "–î–µ–Ω—å"."""
    chat_id = game.chat_id
    day_count = game.day_count
    
    report = f"‚òÄÔ∏è <b>–£—Ç—Ä–æ –≤ –ë–∞—Ä–µ (–î–µ–Ω—å {day_count})</b> ‚òÄÔ∏è\n\n"
    
    if afk_kicked_players:
        for user_id in afk_kicked_players:
            name = game.get_player_name(user_id)
            role_key = game.players[user_id]['role']
            role_name = ROLE_NAMES_RU.get(role_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
            report += f"üò¥ *{name}* –±—ã–ª(–∞) –∏–∑–≥–Ω–∞–Ω(–∞) –∏–∑ –±–∞—Ä–∞ –∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ! –û–Ω(–∞) –±—ã–ª(–∞)... **{role_name}**!\n"
        report += "\n"

    if killed_user_id:
        name = game.get_player_name(killed_user_id)
        role_key = game.players[killed_user_id]['role']
        role_name = ROLE_NAMES_RU.get(role_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        report += f"–≠—Ç–æ–π –Ω–æ—á—å—é –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–∏ –≤—ã–≥–Ω–∞–ª–∏ <b>{name}</b>.\n"
        report += f"–û–Ω(–∞) –±—ã–ª(–∞)... <b>{role_name}</b>!\n"
        
    elif was_saved:
        report += "–≠—Ç–æ–π –Ω–æ—á—å—é –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–∏ –Ω–∞–ø–∞–ª–∏, –Ω–æ ü©∫ <b>–ü–æ—Ö–º–µ—Ç–æ–ª–æ–≥</b> —É—Å–ø–µ–ª(–∞) —Å–ø–∞—Å—Ç–∏ –∂–µ—Ä—Ç–≤—É!\n"
    else:
        report += "–≠—Ç–∞ –Ω–æ—á—å –ø—Ä–æ—à–ª–∞ —Å–ø–æ–∫–æ–π–Ω–æ. –ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –≤—ã–≥–Ω–∞–Ω.\n"
        
    report += "\n---\n<b>–ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:</b>\n"
    alive_players = game.get_alive_players()
    for i, user_id in enumerate(alive_players):
        report += f"{i+1}. {game.get_player_name(user_id)}\n"
        
    await game.bot.send_message(chat_id, report, parse_mode="HTML")
    
    if killed_user_id:
        task = asyncio.create_task(last_word_task(game, killed_user_id))
        game.last_word_task = task
    else:
        await start_day_discussion(game)


async def last_word_task(game: GameManager, killed_user_id: int):
    """–î–∞–µ—Ç 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–Ω—å."""
    try:
        fsm_context = FSMContext(game.bot, user_id=killed_user_id, chat_id=killed_user_id)
        await fsm_context.set_state(MafiaGameStates.awaiting_last_word)
        await game.bot.send_message(killed_user_id, "–£ –≤–∞—Å –µ—Å—Ç—å <b>30 —Å–µ–∫—É–Ω–¥</b> –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ. –ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.", parse_mode="HTML")
    except Exception as e:
        logging.warning(f"[Mafia {game.chat_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ '–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ' –∏–≥—Ä–æ–∫—É {killed_user_id}: {e}")
        await start_day_discussion(game)
        return

    await asyncio.sleep(30)
    
    if game.chat_id not in active_game_managers:
        return
        
    with suppress(Exception):
        await fsm_context.clear()
        
    await start_day_discussion(game)

# --- –•–≠–ù–î–õ–ï–†: –õ–û–í–ò–¢ –ü–û–°–õ–ï–î–ù–ï–ï –°–õ–û–í–û ---
@mafia_game_router.message(MafiaGameStates.awaiting_last_word)
async def handle_last_word(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    
    game_id = None
    game_manager = None
    for chat_id_key, game in active_game_managers.items():
        if user_id in game.players:
            game_id = chat_id_key
            game_manager = game
            break
    if not game_manager: return
    
    await state.clear()
    
    name = game_manager.get_player_name(user_id)
    text = html.quote(message.text[:200]) # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É
    
    await bot.send_message(game_id, f"üì£ <b>{name}</b> –∫—Ä–∏–∫–Ω—É–ª(–∞) –ø–µ—Ä–µ–¥ —Å–º–µ—Ä—Ç—å—é:\n<i>¬´{text}¬ª</i>", parse_mode="HTML")
    
    if game_manager.last_word_task and not game_manager.last_word_task.done():
        game_manager.last_word_task.cancel()
        await start_day_discussion(game_manager) # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–Ω—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    

# --- –Ø–î–†–û –ò–ì–†–´: –§–ê–ó–ê –î–ù–Ø (–û–±—Å—É–∂–¥–µ–Ω–∏–µ) ---

async def day_timer_task(game: GameManager):
    """–¢–∞–π–º–µ—Ä –¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è."""
    await asyncio.sleep(game.settings.mafia_day_timer)
    
    if game.chat_id not in active_game_managers:
        return
        
    logging.info(f"[Mafia {game.chat_id}] –í—Ä–µ–º—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤—ã—à–ª–æ. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–º–∏–Ω–∞—Ü–∏—é.")
    
    await start_day_vote_nominating(game)


async def start_day_discussion(game: GameManager):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∞–∑—É –î–Ω—è ("–¢–æ–ª—å–∫–æ –¢–µ–∫—Å—Ç")."""
    chat_id = game.chat_id
    day_count = game.day_count
    
    await game.db.update_mafia_game_status(chat_id, f"day_discussion_{day_count}")
    
    time_str = format_time_left(game.settings.mafia_day_timer)
    await game.bot.send_message(
        chat_id,
        f"‚òÄÔ∏è <b>–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Å—É–∂–¥–µ–Ω–∏–µ! (–î–µ–Ω—å {day_count})</b> ‚òÄÔ∏è\n\n"
        f"–£ –≤–∞—Å –µ—Å—Ç—å <b>{time_str}</b>, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å, –∫—Ç–æ –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫.\n"
        f"–í —á–∞—Ç–µ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º <b>'–¢–æ–ª—å–∫–æ –¢–µ–∫—Å—Ç'</b> (GIF, —Å—Ç–∏–∫–µ—Ä—ã –∏ –º–µ–¥–∏–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã).",
        parse_mode="HTML"
    )
    
    task = asyncio.create_task(day_timer_task(game))
    game.day_timer_task = task


# --- –Ø–î–†–û –ò–ì–†–´: –§–ê–ó–ê –î–ù–Ø (–ù–æ–º–∏–Ω–∞—Ü–∏—è) ---

async def day_vote_timer_task(game: GameManager):
    """–¢–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (–ù–æ–º–∏–Ω–∞—Ü–∏–∏)."""
    await asyncio.sleep(game.settings.mafia_vote_timer)
    
    if game.chat_id not in active_game_managers:
        return
        
    logging.info(f"[Mafia {game.chat_id}] –í—Ä–µ–º—è –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ –≤—ã—à–ª–æ. –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤...")
    
    await end_day_vote_nominating(game)
    

async def end_day_vote_nominating(game: GameManager):
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–∞ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏.
    –ï—Å–ª–∏ –µ—Å—Ç—å 1 –∫–∞–Ω–¥–∏–¥–∞—Ç (>1 –≥–æ–ª–æ—Å–∞, –Ω–µ—Ç –Ω–∏—á—å–∏) -> –∑–∞–ø—É—Å–∫–∞–µ—Ç –°—É–¥ –õ–∏–Ω—á–∞.
    –ò–Ω–∞—á–µ -> –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ù–æ—á—å.
    """
    chat_id = game.chat_id
    logging.info(f"[Mafia {chat_id}] –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏...")
    
    votes = game.day_votes_nominations
    if not votes:
        await game.bot.send_message(chat_id, "‚öñÔ∏è –ù–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª. –°—É–¥ –õ–∏–Ω—á–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è. –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å.")
        await start_night_phase(game.chat_id, game.bot, game.db, game.settings, game.day_count + 1)
        return

    vote_counts = Counter(votes.values())
    most_voted = vote_counts.most_common(2) 

    if not most_voted or most_voted[0][1] == 1: 
        await game.bot.send_message(chat_id, "‚öñÔ∏è –ù–∏ –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–±—Ä–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≥–æ–ª–æ—Å–æ–≤ ( > 1). –°—É–¥ –õ–∏–Ω—á–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è. –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å.")
        await start_night_phase(game.chat_id, game.bot, game.db, game.settings, game.day_count + 1)
        return
        
    candidate_id, top_count = most_voted[0]
    
    if len(most_voted) > 1 and most_voted[1][1] == top_count:
        await game.bot.send_message(chat_id, "‚öñÔ∏è –ì–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å. –°—É–¥ –õ–∏–Ω—á–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è. –ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å.")
        await start_night_phase(game.chat_id, game.bot, game.db, game.settings, game.day_count + 1)
        return

    game.lynch_candidate_id = candidate_id
    await start_day_vote_lynching(game)


async def generate_day_nominate_keyboard(game: GameManager, voter_user_id: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ –≤ –õ–°."""
    buttons = []
    
    targets = [pid for pid in game.get_alive_players() if pid != voter_user_id]
    
    for target_user_id in targets:
        target_name = game.get_player_name(target_user_id)
        buttons.append([
            InlineKeyboardButton(
                text=target_name,
                callback_data=MafiaDayVoteCallbackData(action="nominate", target_user_id=target_user_id).pack()
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def start_day_vote_nominating(game: GameManager):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∞–∑—É –ù–æ–º–∏–Ω–∞—Ü–∏–∏ ("–ü–æ–ª–Ω–∞—è –¢–∏—à–∏–Ω–∞").
    –†–∞—Å—Å—ã–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –õ–°.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    """
    chat_id = game.chat_id
    day_count = game.day_count
    
    await game.db.update_mafia_game_status(chat_id, f"day_vote_nominate_{day_count}")
    
    time_str = format_time_left(game.settings.mafia_vote_timer)
    await game.bot.send_message(
        chat_id,
        f"‚öñÔ∏è <b>–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ!</b> ‚öñÔ∏è\n\n"
        f"–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è <b>–ù–æ–º–∏–Ω–∞—Ü–∏—è</b>. –£ –≤–∞—Å –µ—Å—Ç—å <b>{time_str}</b>, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤ –õ–°.\n"
        f"–í —á–∞—Ç–µ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º <b>'–ü–æ–ª–Ω–æ–π –¢–∏—à–∏–Ω—ã'</b>.",
        parse_mode="HTML"
    )
    
    tasks = []
    alive_players = game.get_alive_players()
    for user_id in alive_players:
        keyboard = await generate_day_nominate_keyboard(game, user_id)
        tasks.append(
            game.bot.send_message(user_id, "–ö–æ–≥–æ –≤—ã –Ω–æ–º–∏–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞ –≤—ã–≥–æ–Ω?", reply_markup=keyboard)
        )
        
    await asyncio.gather(*tasks)
    
    task = asyncio.create_task(day_vote_timer_task(game))
    game.day_vote_timer_task = task


# --- –•–≠–ù–î–õ–ï–†: –õ–û–í–ò–¢ –ì–û–õ–û–° –ù–û–ú–ò–ù–ê–¶–ò–ò ---
@mafia_game_router.callback_query(MafiaDayVoteCallbackData.filter(F.action == "nominate"), StateFilter("*"))
async def cq_mafia_day_vote_nominate(callback: CallbackQuery, callback_data: MafiaDayVoteCallbackData, bot: Bot):
    user_id = callback.from_user.id
    
    game_id = None
    game_manager = None
    for chat_id_key, game in active_game_managers.items():
        if user_id in game.players:
            game_id = chat_id_key
            game_manager = game
            break
            
    if not game_manager:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É.", show_alert=True)
        return

    if not game_manager.players[user_id]['is_alive']:
        await callback.answer("–ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç.", show_alert=True)
        return
        
    if not game_manager.day_vote_timer_task or game_manager.day_vote_timer_task.done():
        await callback.answer("–í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—ã—à–ª–æ, –≤–∞—à –≥–æ–ª–æ—Å –Ω–µ –ø—Ä–∏–Ω—è—Ç.", show_alert=True)
        return

    action = callback_data.action
    target_user_id = callback_data.target_user_id
    target_name = game_manager.get_player_name(target_user_id)
    
    game_manager.day_votes_nominations[user_id] = target_user_id
    
    await callback.message.edit_text(f"‚úÖ –í—ã –Ω–æ–º–∏–Ω–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ –≤—ã–≥–æ–Ω: <b>{target_name}</b>.", parse_mode="HTML")
    await callback.answer()


# --- –Ø–î–†–û –ò–ì–†–´: –§–ê–ó–ê –î–ù–Ø (–°—É–¥ –õ–∏–Ω—á–∞) ---

async def lynch_vote_timer_task(game: GameManager):
    """–¢–∞–π–º–µ—Ä –°—É–¥–∞ –õ–∏–Ω—á–∞."""
    await asyncio.sleep(game.settings.mafia_vote_timer)
    
    if game.chat_id not in active_game_managers:
        return
        
    logging.info(f"[Mafia {game.chat_id}] –í—Ä–µ–º—è –°—É–¥–∞ –õ–∏–Ω—á–∞ –≤—ã—à–ª–æ. –ü–æ–¥—Å—á–µ—Ç...")
    
    # (–ó–ê–ì–õ–£–®–ö–ê –£–ë–†–ê–ù–ê)
    await end_day_vote_lynching(game)
    
    
async def end_day_vote_lynching(game: GameManager):
    """
    –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–∞ –°—É–¥–∞ –õ–∏–Ω—á–∞.
    –í—ã–≥–æ–Ω—è–µ—Ç –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ > 50% "–ó–∞").
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–±–µ–¥—É.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ù–æ—á—å.
    """
    chat_id = game.chat_id
    candidate_id = game.lynch_candidate_id
    candidate_name = game.get_player_name(candidate_id)
    
    # 1. –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    with suppress(TelegramBadRequest):
        await game.bot.edit_message_reply_markup(chat_id, game.lynch_message_id, reply_markup=None)
        
    # 2. –°—á–∏—Ç–∞–µ–º –≥–æ–ª–æ—Å–∞
    votes = game.day_votes_lynch.values()
    lynch_votes = sum(1 for v in votes if v == 'lynch')
    pardon_votes = sum(1 for v in votes if v == 'pardon')
    total_votes = lynch_votes + pardon_votes
    
    # (–î–ª—è –Ω–∏—á—å–∏: lynch_votes == pardon_votes -> –ø–æ–º–∏–ª–æ–≤–∞–Ω)
    # (–î–ª—è –ø–æ–±–µ–¥—ã: lynch_votes > pardon_votes)
    
    is_lynched = lynch_votes > pardon_votes
    
    if is_lynched:
        logging.info(f"[Mafia {chat_id}] –ò–≥—Ä–æ–∫ {candidate_id} –≤—ã–≥–Ω–∞–Ω –°—É–¥–æ–º –õ–∏–Ω—á–∞.")
        # "–£–±–∏–≤–∞–µ–º" –∏–≥—Ä–æ–∫–∞
        await game.db.set_mafia_player_alive(chat_id, candidate_id, is_alive=False)
        game.players[candidate_id]['is_alive'] = False
        
        role_key = game.players[candidate_id]['role']
        role_name = ROLE_NAMES_RU.get(role_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        await game.bot.send_message(
            chat_id,
            f"‚öñÔ∏è <b>–ü—Ä–∏–≥–æ–≤–æ—Ä –≤—ã–Ω–µ—Å–µ–Ω!</b> ‚öñÔ∏è\n\n"
            f"–ò–≥—Ä–æ–∫ <b>{candidate_name}</b> –±—ã–ª(–∞) –∏–∑–≥–Ω–∞–Ω(–∞) –∏–∑ –±–∞—Ä–∞! ({lynch_votes} ‚¨ÜÔ∏è vs {pardon_votes} ‚¨áÔ∏è)\n"
            f"–û–Ω(–∞) –±—ã–ª(–∞)... <b>{role_name}</b>!",
            parse_mode="HTML"
        )
    else:
        logging.info(f"[Mafia {chat_id}] –ò–≥—Ä–æ–∫ {candidate_id} –ø–æ–º–∏–ª–æ–≤–∞–Ω –°—É–¥–æ–º –õ–∏–Ω—á–∞.")
        await game.bot.send_message(
            chat_id,
            f"‚öñÔ∏è <b>–ò–≥—Ä–æ–∫ –ø–æ–º–∏–ª–æ–≤–∞–Ω!</b> ‚öñÔ∏è\n\n"
            f"<b>{candidate_name}</b> –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –±–∞—Ä–µ. ({lynch_votes} ‚¨ÜÔ∏è vs {pardon_votes} ‚¨áÔ∏è)\n",
            parse_mode="HTML"
        )
        
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É (—Ç.–∫. –∏–≥—Ä–æ–∫ –º–æ–≥ —É–º–µ—Ä–µ—Ç—å)
    if is_lynched:
        if await check_for_win_condition(game):
            return # –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞
            
    # 4. –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–æ—á—å
    await start_night_phase(game.chat_id, game.bot, game.db, game.settings, game.day_count + 1)


async def start_day_vote_lynching(game: GameManager):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –°—É–¥ –õ–∏–Ω—á–∞ ("–¢–æ–ª—å–∫–æ –∂–∏–≤—ã–µ, –¢–æ–ª—å–∫–æ –¢–µ–∫—Å—Ç").
    –ü—É–±–ª–∏–∫—É–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ —á–∞—Ç.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –°—É–¥–∞ –õ–∏–Ω—á–∞.
    """
    chat_id = game.chat_id
    day_count = game.day_count
    await game.db.update_mafia_game_status(chat_id, f"day_vote_lynch_{day_count}")
    
    candidate_name = game.get_player_name(game.lynch_candidate_id)
    time_str = format_time_left(game.settings.mafia_vote_timer)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"‚öñÔ∏è –í—ã–≥–Ω–∞—Ç—å ({game.get_player_name(game.lynch_candidate_id)})", callback_data=MafiaLynchVoteCallbackData(action="lynch").pack()),
            InlineKeyboardButton(text="üïäÔ∏è –ü–æ–º–∏–ª–æ–≤–∞—Ç—å", callback_data=MafiaLynchVoteCallbackData(action="pardon").pack())
        ]
    ])
    
    msg = await game.bot.send_message(
        chat_id,
        f"‚öñÔ∏è <b>–°–£–î –õ–ò–ù–ß–ê</b> ‚öñÔ∏è\n\n"
        f"–ù–∞ –≤—ã–≥–æ–Ω –Ω–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω: <b>{candidate_name}</b>\n"
        f"–í—Å–µ –∂–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏, —Ä–µ—à–∏—Ç–µ –µ–≥–æ(–µ–µ) —Å—É–¥—å–±—É. –£ –≤–∞—Å <b>{time_str}</b>.\n"
        f"–í —á–∞—Ç–µ —Ä–µ–∂–∏–º: <b>'–¢–æ–ª—å–∫–æ –∂–∏–≤—ã–µ, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç'</b>.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    game.lynch_message_id = msg.message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    
    task = asyncio.create_task(lynch_vote_timer_task(game))
    game.lynch_vote_timer_task = task


# --- –•–≠–ù–î–õ–ï–†: –õ–û–í–ò–¢ –ì–û–õ–û–° –°–£–î–ê –õ–ò–ù–ß–ê ---
@mafia_game_router.callback_query(MafiaLynchVoteCallbackData.filter(), StateFilter("*"))
async def cq_mafia_day_vote_lynch(callback: CallbackQuery, callback_data: MafiaLynchVoteCallbackData, bot: Bot):
    user_id = callback.from_user.id
    
    game_id = None
    game_manager = None
    for chat_id_key, game in active_game_managers.items():
        if user_id in game.players:
            game_id = chat_id_key
            game_manager = game
            break
    if not game_manager:
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    if not game_manager.players[user_id]['is_alive']:
        await callback.answer("–ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç.", show_alert=True)
        return
        
    if not game_manager.lynch_vote_timer_task or game_manager.lynch_vote_timer_task.done():
        await callback.answer("–í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤—ã—à–ª–æ.", show_alert=True)
        return
    
    action = callback_data.action # 'lynch' or 'pardon'
    
    game_manager.day_votes_lynch[user_id] = action
    
    action_text = "–í–´–ì–ù–ê–¢–¨" if action == "lynch" else "–ü–û–ú–ò–õ–û–í–ê–¢–¨"
    await callback.answer(f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {action_text}")


# --- –Ø–î–†–û –ò–ì–†–´: –ü–†–û–í–ï–†–ö–ê –ü–û–ë–ï–î–´ –ò –ó–ê–í–ï–†–®–ï–ù–ò–ï ---

async def check_for_win_condition(game: GameManager) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–±–µ–¥–∏–ª–∞ –ª–∏ –æ–¥–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥.
    –ï—Å–ª–∏ –¥–∞, –∑–∞–ø—É—Å–∫–∞–µ—Ç 'cleanup_and_end_game' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    –ò–Ω–∞—á–µ False.
    """
    chat_id = game.chat_id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Ç.–∫. –∫—Ç–æ-—Ç–æ –º–æ–≥ —É–º–µ—Ä–µ—Ç—å)
    alive_mafia = game.get_alive_players(MAFIA_TEAM_ROLES)
    alive_civilians = game.get_alive_players(CIVILIAN_TEAM_ROLES)
    
    mafia_count = len(alive_mafia)
    civilian_count = len(alive_civilians)
    
    winner = None # 'mafia' or 'civilians'
    
    if mafia_count == 0:
        winner = 'civilians'
    elif mafia_count >= civilian_count:
        winner = 'mafia'
        
    if winner:
        logging.info(f"[Mafia {chat_id}] –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}")
        await cleanup_and_end_game(game, winner)
        return True
        
    return False

async def cleanup_and_end_game(game: GameManager, winner: str):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É, —á–∏—Å—Ç–∏—Ç –¥–∞–Ω–Ω—ã–µ, –Ω–∞—á–∏—Å–ª—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã.
    """
    chat_id = game.chat_id
    
    # 1. –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if game.night_timer_task: game.night_timer_task.cancel()
    if game.day_timer_task: game.day_timer_task.cancel()
    if game.last_word_task: game.last_word_task.cancel()
    if game.day_vote_timer_task: game.day_vote_timer_task.cancel()
    if game.lynch_vote_timer_task: game.lynch_vote_timer_task.cancel()
    
    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
    winners = []
    losers = []
    
    win_team_roles = MAFIA_TEAM_ROLES if winner == 'mafia' else CIVILIAN_TEAM_ROLES
    
    for user_id, data in game.players.items():
        if data['role'] in win_team_roles:
            winners.append(user_id)
        else:
            losers.append(user_id)
            
    # 3. –ì–æ—Ç–æ–≤–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report = "üçª <b>–ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!</b> üçª\n\n"
    if winner == 'mafia':
        report += "<b>–ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ ü•§ –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤!</b>\n"
    else:
        report += "<b>–ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ üçª –õ—é–±–∏—Ç–µ–ª–µ–π –ü–∏–≤–∞!</b>\n"
        
    report += "\n<b>–°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥:</b>\n"
    for user_id, data in game.players.items():
        role_name = ROLE_NAMES_RU.get(data['role'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        report += f"‚Ä¢ {game.get_player_name(user_id)} ‚Äî {role_name}\n"
        
    # 4. –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
    tasks = []
    report += "\n<b>–ù–∞–≥—Ä–∞–¥—ã:</b>\n"
    
    # –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏
    win_reward = game.settings.mafia_win_reward
    win_auth = game.settings.mafia_win_authority
    for user_id in winners:
        tasks.append(game.db.change_rating(user_id, win_reward))
        tasks.append(game.db.update_mafia_stats(user_id, has_won=True, authority_change=win_auth))
        report += f"‚Ä¢ {game.get_player_name(user_id)}: +{win_reward} üç∫, +{win_auth} üëë\n"

    # –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ
    lose_reward = game.settings.mafia_lose_reward
    lose_auth = game.settings.mafia_lose_authority
    for user_id in losers:
        tasks.append(game.db.change_rating(user_id, lose_reward))
        tasks.append(game.db.update_mafia_stats(user_id, has_won=False, authority_change=lose_auth))
        report += f"‚Ä¢ {game.get_player_name(user_id)}: +{lose_reward} üç∫, {lose_auth} üëë\n"
        
    await asyncio.gather(*tasks)
    
    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    await game.bot.send_message(chat_id, report, parse_mode="HTML")
    
    # 6. –ß–∏—Å—Ç–∏–º –≤—Å–µ
    await game.db.delete_mafia_game(chat_id)
    if chat_id in active_game_managers:
        del active_game_managers[chat_id]
    if chat_id in active_games:
        del active_games[chat_id]
    
    logging.info(f"[Mafia {chat_id}] –ò–≥—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –æ—á–∏—â–µ–Ω–∞.")


# --- –•–≠–ù–î–õ–ï–†–´ –ú–û–î–ï–†–ê–¶–ò–ò ---

@mafia_game_router.message(F.chat.type.in_({'group', 'supergroup'}))
async def handle_game_moderation_global(message: Message, bot: Bot):
    """
    –£–î–ê–õ–Ø–ï–¢ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ, –ø–æ–∫–∞ –∏–¥–µ—Ç –∏–≥—Ä–∞.
    (–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é 'active_game_managers')
    """
    chat_id = message.chat.id
    if chat_id in active_game_managers:
        game = active_game_managers[chat_id] # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        game_status_row = await game.db.get_mafia_game(chat_id)
        if not game_status_row: return # –ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        
        game_status = game_status_row[3] # status
        
        # --- –ú–û–î–ï–†–ê–¶–ò–Ø (–ü–û–õ–ù–ê–Ø –¢–ò–®–ò–ùA) ---
        # –ù–æ—á—å –ò–õ–ò –ù–æ–º–∏–Ω–∞—Ü–∏—è
        if game_status.startswith('night') or game_status.startswith('day_vote_nominate'):
            with suppress(TelegramBadRequest):
                await message.delete()
            return
            
        # --- –ú–û–î–ï–†–ê–¶–ò–Ø –î–ù–Ø (–¢–æ–ª—å–∫–æ –¢–µ–∫—Å—Ç) ---
        if game_status.startswith('day_discussion'):
            if message.content_type != 'text':
                 with suppress(TelegramBadRequest):
                    await message.delete()
            return
        
        # --- –ú–û–î–ï–†–ê–¶–ò–Ø (–°—É–¥ –õ–∏–Ω—á–∞: –¢–æ–ª—å–∫–æ –∂–∏–≤—ã–µ, –¢–æ–ª—å–∫–æ –¢–µ–∫—Å—Ç) ---
        if game_status.startswith('day_vote_lynch'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫
            is_alive = message.from_user.id in game.players and game.players[message.from_user.id]['is_alive']
            
            if not is_alive:
                 with suppress(TelegramBadRequest):
                    await message.delete() # –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã—Ö –∏ –∑—Ä–∏—Ç–µ–ª–µ–π
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º–µ–¥–∏–∞
            elif message.content_type != 'text':
                 with suppress(TelegramBadRequest):
                    await message.delete() # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞
            return
