# handlers/game_mafia_core.py
import asyncio
import random
import logging
from aiogram import Router, Bot, F, html
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
from contextlib import suppress
from typing import Dict, List, Set, Any

from database import Database
from settings import SettingsManager
from .user_commands import active_games, GAME_ACTIVE_KEY # –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–≥—Ä—ã –≤ –∫–æ–Ω—Ü–µ

mafia_game_router = Router()

# --- FSM (–ì–ª–∞–≤–Ω—ã–π) ---
class MafiaGameStates(StatesGroup):
    game_in_progress = State()      # –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞)
    awaiting_last_word = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–±–∏—Ç–æ–≥–æ (–∂–¥–µ–º 30 —Å–µ–∫)
    night_voting = State()        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –º–∞—Ñ–∏–∏

# --- CallbackData ---
class MafiaNightVoteCallbackData(CallbackData, prefix="mafia_vote"):
    action: str # 'kill', 'check', 'heal', 'self_heal'
    target_user_id: int = 0

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –†–û–õ–ï–ô (—á—Ç–æ–±—ã –Ω–µ –æ—à–∏–±–∏—Ç—å—Å—è –≤ —Å—Ç—Ä–æ–∫–∞—Ö) ---
ROLE_MAFIA_LEADER = 'mafia_leader' # ü•§ –ì–ª–∞–≤–∞—Ä—å
ROLE_MAFIA = 'mafia'               # ü•§ –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫
ROLE_DETECTIVE = 'detective'       # üïµÔ∏è‚Äç‚ôÇÔ∏è –ë–∞—Ä–º–µ–Ω
ROLE_DOCTOR = 'doctor'             # ü©∫ –ü–æ—Ö–º–µ—Ç–æ–ª–æ–≥
ROLE_CIVILIAN = 'civilian'         # üçª –õ—é–±–∏—Ç–µ–ª—å –ü–∏–≤–∞

MAFIA_TEAM_ROLES = [ROLE_MAFIA_LEADER, ROLE_MAFIA]

# --- –ú–ê–¢–†–ò–¶–ê –†–û–õ–ï–ô (–ö–∞–∫ –º—ã –∏ –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å) ---
# 'l' - leader, 'm' - mafia, 'd' - detective, 'h' - doctor, 'c' - civilian
MAFIA_ROLES_MATRIX = {
    5:  {'l': 1, 'm': 0, 'd': 1, 'h': 1, 'c': 2},
    6:  {'l': 1, 'm': 1, 'd': 1, 'h': 1, 'c': 2},
    7:  {'l': 1, 'm': 1, 'd': 1, 'h': 1, 'c': 3},
    8:  {'l': 1, 'm': 2, 'd': 1, 'h': 1, 'c': 3},
    9:  {'l': 1, 'm': 2, 'd': 1, 'h': 1, 'c': 4},
    10: {'l': 1, 'm': 2, 'd': 1, 'h': 1, 'c': 5},
}

# --- –û–ü–ò–°–ê–ù–ò–Ø –†–û–õ–ï–ô (–¥–ª—è –õ–°) ---
ROLE_DESCRIPTIONS = {
    ROLE_MAFIA_LEADER: {
        "title": "ü•§ –ì–ª–∞–≤–∞—Ä—å –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤",
        "description": ("–í—ã ‚Äî —Ç–∞–π–Ω—ã–π –ª–∏–¥–µ—Ä –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤. "
                        "–í–∞—à–∞ —Ü–µ–ª—å ‚Äî –≤—ã–≥–Ω–∞—Ç—å –∏–∑ –±–∞—Ä–∞ –≤—Å–µ—Ö –õ—é–±–∏—Ç–µ–ª–µ–π –ü–∏–≤–∞.\n\n"
                        "‚Ä¢ –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –∏ –≤–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–±–∏—Ä–∞–µ—Ç–µ, –∫–æ–≥–æ '–ø—Ä–æ–ª–∏—Ç—å'.\n"
                        "‚Ä¢ <b>–í–∞—à –≥–æ–ª–æ—Å ‚Äî —Ä–µ—à–∞—é—â–∏–π!</b>\n"
                        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø–æ–∫–∞ –¥–ª–∏—Ç—Å—è –Ω–æ—á—å.")
    },
    ROLE_MAFIA: {
        "title": "ü•§ –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫",
        "description": ("–í—ã ‚Äî –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫. "
                        "–í–∞—à–∞ —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —Å–≤–æ–µ–º—É –ì–ª–∞–≤–∞—Ä—é –≤—ã–≥–Ω–∞—Ç—å –∏–∑ –±–∞—Ä–∞ –≤—Å–µ—Ö –õ—é–±–∏—Ç–µ–ª–µ–π –ü–∏–≤–∞.\n\n"
                        "‚Ä¢ –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã —Å –∫–æ–º–∞–Ω–¥–æ–π –≤—ã–±–∏—Ä–∞–µ—Ç–µ, –∫–æ–≥–æ '–ø—Ä–æ–ª–∏—Ç—å'.\n"
                        "‚Ä¢ –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ø–æ–∫–∞ –¥–ª–∏—Ç—Å—è –Ω–æ—á—å.")
    },
    ROLE_DETECTIVE: {
        "title": "üïµÔ∏è‚Äç‚ôÇÔ∏è –ë–∞—Ä–º–µ–Ω",
        "description": ("–í—ã ‚Äî –ë–∞—Ä–º–µ–Ω. "
                        "–í–∞—à–∞ —Ü–µ–ª—å ‚Äî –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—Å–µ—Ö –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤.\n\n"
                        "‚Ä¢ –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –º–æ–∂–µ—Ç–µ '–ø—Ä–æ—Ç–µ—Ä–µ—Ç—å —Å—Ç–∞–∫–∞–Ω—ã' (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å) –æ–¥–Ω–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è.\n"
                        "‚Ä¢ –í—ã —É–∑–Ω–∞–µ—Ç–µ, –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫ –æ–Ω –∏–ª–∏ –Ω–µ—Ç (–ì–ª–∞–≤–∞—Ä—è –≤—ã —Ç–æ–∂–µ –≤–∏–¥–∏—Ç–µ –∫–∞–∫ –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–∞).")
    },
    ROLE_DOCTOR: {
        "title": "ü©∫ –ü–æ—Ö–º–µ—Ç–æ–ª–æ–≥",
        "description": ("–í—ã ‚Äî –ü–æ—Ö–º–µ—Ç–æ–ª–æ–≥. "
                        "–í–∞—à–∞ —Ü–µ–ª—å ‚Äî —Å–ø–∞—Å—Ç–∏ –õ—é–±–∏—Ç–µ–ª–µ–π –ü–∏–≤–∞ –æ—Ç –≤—ã–≥–æ–Ω–∞.\n\n"
                        "‚Ä¢ –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –º–æ–∂–µ—Ç–µ '–¥–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ' (—Å–ø–∞—Å—Ç–∏) –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –æ—Ç –Ω–∞–ø–∞–¥–µ–Ω–∏—è –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤.\n"
                        "‚Ä¢ <b>–í—ã –º–æ–∂–µ—Ç–µ —Å–ø–∞—Å—Ç–∏ —Å–µ–±—è, –Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –∑–∞ –∏–≥—Ä—É.</b>")
    },
    ROLE_CIVILIAN: {
        "title": "üçª –õ—é–±–∏—Ç–µ–ª—å –ü–∏–≤–∞",
        "description": ("–í—ã ‚Äî –æ–±—ã—á–Ω—ã–π –õ—é–±–∏—Ç–µ–ª—å –ü–∏–≤–∞. "
                        "–í–∞—à–∞ —Ü–µ–ª—å ‚Äî –Ω–∞–π—Ç–∏ –∏ –≤—ã–≥–Ω–∞—Ç—å –≤—Å–µ—Ö –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏–∑ –±–∞—Ä–∞.\n\n"
                        "‚Ä¢ –î–Ω–µ–º —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ –∏ –≥–æ–ª–æ—Å—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π.\n"
                        "‚Ä¢ –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –ø–æ–ø–∞—Å—Ç—å—Å—è –¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫–∞–º –Ω–æ—á—å—é!")
    }
}

# --- –ú–ï–ù–ï–î–ñ–ï–† –ò–ì–†–´ (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è '–∂–∏–≤—ã—Ö' –¥–∞–Ω–Ω—ã—Ö) ---
class GameManager:
    """–•—Ä–∞–Ω–∏—Ç '–∂–∏–≤—ã–µ' –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã (–≥–æ–ª–æ—Å–∞, —Ç–∞–π–º–µ—Ä—ã)."""
    def __init__(self, chat_id: int, bot: Bot, db: Database, settings: SettingsManager):
        self.chat_id = chat_id
        self.bot = bot
        self.db = db
        self.settings = settings
        self.players: Dict[int, Dict[str, Any]] = {} # {user_id: {'role': '...', 'is_alive': True, 'name': '...'}}
        self.night_votes: Dict[str, Dict[int, int]] = { # {'kill': {voter_id: target_id}, 'heal': ..., 'check': ...}
            'kill': {}, 'heal': {}, 'check': {}
        }
        self.mafia_leader_id: int = 0
        self.night_timer_task: asyncio.Task = None

    async def load_players_from_db(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –ë–î –≤ self.players –∏ –Ω–∞—Ö–æ–¥–∏—Ç –õ–∏–¥–µ—Ä–∞."""
        players_data = await self.db.get_mafia_players(self.chat_id)
        for p in players_data:
            user_id = p[1]
            role = p[2]
            is_alive = bool(p[3])
            db_user = await self.db.get_user_by_id(user_id)
            name = db_user[0] if db_user else f"–ò–≥—Ä–æ–∫ {user_id}"
            
            self.players[user_id] = {'role': role, 'is_alive': is_alive, 'name': html.quote(name)}
            
            if role == ROLE_MAFIA_LEADER:
                self.mafia_leader_id = user_id
                
    def get_alive_players(self, roles: List[str] = None) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id –∂–∏–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ —Ä–æ–ª—è–º."""
        alive = []
        for user_id, data in self.players.items():
            if data['is_alive']:
                if roles is None: # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ –≤–∞–∂–Ω—ã
                    alive.append(user_id)
                elif data['role'] in roles: # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
                    alive.append(user_id)
        return alive

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö GameManager'–æ–≤
active_game_managers: Dict[int, GameManager] = {}


# --- –Ø–î–†–û –ò–ì–†–´: –†–ê–ó–î–ê–ß–ê –†–û–õ–ï–ô ---
async def distribute_roles_and_start(chat_id: int, bot: Bot, db: Database, settings: SettingsManager, players: list):
    logging.info(f"[Mafia {chat_id}] –®–∞–≥ 2: –†–∞–∑–¥–∞—á–∞ —Ä–æ–ª–µ–π...")
    
    player_count = len(players)
    player_ids = [p[1] for p in players] # p[1] —ç—Ç–æ user_id
    random.shuffle(player_ids)
    
    roles_config = MAFIA_ROLES_MATRIX[player_count]
    roles_list = []
    roles_list.extend([ROLE_MAFIA_LEADER] * roles_config['l'])
    roles_list.extend([ROLE_MAFIA] * roles_config['m'])
    roles_list.extend([ROLE_DETECTIVE] * roles_config['d'])
    roles_list.extend([ROLE_DOCTOR] * roles_config['h'])
    roles_list.extend([ROLE_CIVILIAN] * roles_config['c'])
    random.shuffle(roles_list)
    
    assigned_roles = {} # {user_id: role_key}
    mafia_team_info = {} # {user_id: "Name (Role)"}
    
    player_names = {} # {user_id: first_name}
    for user_id in player_ids:
        db_user = await db.get_user_by_id(user_id)
        player_names[user_id] = html.quote(db_user[0]) if db_user else f"–ò–≥—Ä–æ–∫ {user_id}"
        
    for i, user_id in enumerate(player_ids):
        role = roles_list[i]
        assigned_roles[user_id] = role
        if role in [ROLE_MAFIA, ROLE_MAFIA_LEADER]:
            role_name = "–ì–ª–∞–≤–∞—Ä—å" if role == ROLE_MAFIA_LEADER else "–¢—Ä–µ–∑–≤–µ–Ω–Ω–∏–∫"
            mafia_team_info[user_id] = f"{player_names[user_id]} (ü•§ {role_name})"

    tasks = []
    
    for user_id, role in assigned_roles.items():
        tasks.append(
            db.update_mafia_player_role(chat_id, user_id, role)
        )

    for user_id, role in assigned_roles.items():
        role_data = ROLE_DESCRIPTIONS[role]
        text = f"<b>{role_data['title']}</b>\n\n{role_data['description']}"
        
        if role in [ROLE_MAFIA, ROLE_MAFIA_LEADER]:
            text += "\n\n<b>–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:</b>\n"
            for mafia_id, mafia_name in mafia_team_info.items():
                if mafia_id == user_id:
                    text += f"‚Ä¢ <b>{mafia_name} (–í—ã)</b>\n"
                else:
                    text += f"‚Ä¢ {mafia_name}\n"
                    
        tasks.append(
            bot.send_message(user_id, text, parse_mode="HTML")
        )

    try:
        await asyncio.gather(*tasks)
    except Exception as e:
        logging.error(f"[Mafia {chat_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Ä–æ–ª–µ–π: {e}")
        pass 

    await db.update_mafia_game_status(chat_id, "night", day_count=1)

    game = await db.get_mafia_game(chat_id)
    message_id = game[1]
    
    with suppress(TelegramBadRequest):
        await bot.unpin_chat_message(chat_id, message_id)
    
    await bot.edit_message_text(
        ("üåô <b>–ù–ê–°–¢–£–ü–ê–ï–¢ –ù–û–ß–¨ 1</b> üåô\n\n"
         "–í—Å–µ —Ä–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã –≤ –õ–°! –ë–∞—Ä –ø–æ–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ —Ç–∏—à–∏–Ω—É.\n"
         "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–ª–∏ –¥–µ–ª–∞—é—Ç —Å–≤–æ–π —Ö–æ–¥..."),
        chat_id, message_id,
        reply_markup=None 
    )
    
    logging.info(f"[Mafia {chat_id}] –†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º –ù–æ—á—å 1...")

    # 7. –í—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ñ–∞–∑—É
    await start_night_phase(chat_id, bot, db, settings, day_count=1)

# --- –Ø–î–†–û –ò–ì–†–´: –§–ê–ó–ê –ù–û–ß–ò ---

async def generate_night_vote_keyboard(game: GameManager, player_role: str, user_id: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –õ–°."""
    buttons = []
    
    if player_role in MAFIA_TEAM_ROLES:
        action = "kill"
        text = "ü•§ –ö–æ–≥–æ '–ø—Ä–æ–ª–∏–≤–∞–µ–º'?"
        # –ú–∞—Ñ–∏—è –Ω–µ –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–≤–æ–∏—Ö
        targets = game.get_alive_players()
        mafia_team_ids = game.get_alive_players(MAFIA_TEAM_ROLES)
        targets = [pid for pid in targets if pid not in mafia_team_ids]
    
    elif player_role == ROLE_DETECTIVE:
        action = "check"
        text = "üïµÔ∏è‚Äç‚ôÇÔ∏è –ö–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º?"
        # –î–µ—Ç–µ–∫—Ç–∏–≤ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–µ–±—è
        targets = [pid for pid in game.get_alive_players() if pid != user_id]
        
    elif player_role == ROLE_DOCTOR:
        action = "heal"
        text = "ü©∫ –ö–æ–≥–æ —Å–ø–∞—Å–∞–µ–º?"
        targets = game.get_alive_players() # –î–æ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–ø–∞—Å–∞—Ç—å —Å–µ–±—è
    
    else: return None # –£ –ú–∏—Ä–Ω–æ–≥–æ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫
    
    for target_user_id in targets:
        target_name = game.players[target_user_id]['name']
        buttons.append([
            InlineKeyboardButton(
                text=target_name,
                callback_data=MafiaNightVoteCallbackData(action=action, target_user_id=target_user_id).pack()
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ø–∞—Å—Ç–∏ —Å–µ–±—è" –¥–ª—è –î–æ–∫—Ç–æ—Ä–∞
    if player_role == ROLE_DOCTOR:
        player_data = await game.db.get_mafia_player(game.chat_id, user_id)
        self_heals_used = player_data[4] # self_heals_used
        
        if self_heals_used == 0:
            buttons.append([
                InlineKeyboardButton(
                    text="üõ°Ô∏è –°–ø–∞—Å—Ç–∏ –°–ï–ë–Ø (–û—Å—Ç–∞–ª—Å—è 1 —Ä–∞–∑)",
                    callback_data=MafiaNightVoteCallbackData(action="self_heal", target_user_id=user_id).pack()
                )
            ])
            
    if not buttons:
        return None # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—Ñ–∏–∏ –Ω–µ–∫–æ–≥–æ —É–±–∏–≤–∞—Ç—å)

    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def start_night_phase(chat_id: int, bot: Bot, db: Database, settings: SettingsManager, day_count: int):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ—á–Ω—É—é —Ñ–∞–∑—É:
    1. –°–æ–∑–¥–∞–µ—Ç GameManager.
    2. –†–∞—Å—Å—ã–ª–∞–µ—Ç –≤—Å–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –õ–°.
    3. –í–∫–ª—é—á–∞–µ—Ç FSM –¥–ª—è —á–∞—Ç–∞ –º–∞—Ñ–∏–∏.
    4. –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ—á–Ω–æ–π —Ç–∞–π–º–µ—Ä.
    """
    logging.info(f"[Mafia {chat_id}] –ù–æ—á—å {day_count} –Ω–∞—á–∞–ª–∞—Å—å.")
    
    # 1. –°–æ–∑–¥–∞–µ–º –ú–µ–Ω–µ–¥–∂–µ—Ä –ò–≥—Ä—ã
    game = GameManager(chat_id, bot, db, settings)
    await game.load_players_from_db()
    active_game_managers[chat_id] = game # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ

    # 2. –†–∞—Å—Å—ã–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –≤–∫–ª—é—á–∞–µ–º FSM
    tasks = []
    alive_players = game.get_alive_players()
    
    for user_id in alive_players:
        role = game.players[user_id]['role']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = await generate_night_vote_keyboard(game, role, user_id)
        
        if keyboard:
            tasks.append(
                bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö–æ–¥:", reply_markup=keyboard)
            )
        
        # –í–∫–ª—é—á–∞–µ–º FSM –¥–ª—è —á–∞—Ç–∞ –º–∞—Ñ–∏–∏
        if role in MAFIA_TEAM_ROLES:
            fsm_context = FSMContext(bot, user_id=user_id, chat_id=user_id)
            tasks.append(
                fsm_context.set_state(MafiaGameStates.night_voting)
            )
            
    await asyncio.gather(*tasks)

    # 3. (–ó–ê–ì–õ–£–®–ö–ê) –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ—á–Ω–æ–π —Ç–∞–π–º–µ—Ä
    # task = asyncio.create_task(night_timer_task(game))
    # game.night_timer_task = task
    
    # --- (–í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê) ---
    # (–ü–æ–∫–∞ –Ω–µ—Ç —Ç–∞–π–º–µ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º 15 —Å–µ–∫ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É)
    await asyncio.sleep(15)
    logging.warning(f"[Mafia {chat_id}] –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê: –ù–æ—á—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.")
    if chat_id in active_games:
        del active_games[chat_id]
    if chat_id in active_game_managers:
        del active_game_managers[chat_id]
    await db.delete_mafia_game(chat_id)
    await bot.send_message(chat_id, "<i>(–í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê: –ù–æ—á—å 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.)</i>")
    # --- (–ö–û–ù–ï–¶ –ó–ê–ì–õ–£–®–ö–ò) ---


# --- –•–≠–ù–î–õ–ï–†–´ –ù–û–ß–ù–û–ô –§–ê–ó–´ ---

@mafia_game_router.callback_query(MafiaNightVoteCallbackData.filter(), StateFilter("*"))
async def cq_mafia_night_vote(callback: CallbackQuery, callback_data: MafiaNightVoteCallbackData, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –Ω–æ—á–Ω—ã–µ –≥–æ–ª–æ—Å–∞ (—É–±–∏–π—Å—Ç–≤–æ, –ø—Ä–æ–≤–µ—Ä–∫–∞, –ª–µ—á–µ–Ω–∏–µ).
    """
    chat_id = callback.message.chat.id # –≠—Ç–æ –õ–°, –Ω–æ –Ω–∞–º –Ω—É–∂–µ–Ω ID –∏–≥—Ä—ã
    user_id = callback.from_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º ID –∏–≥—Ä—ã (—ç—Ç–æ —Ö–∞–∫, —Ç.–∫. –∫–æ–ª–±—ç–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ –õ–°)
    # –ù–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏, –≤ –∫–∞–∫–æ–π –∏–≥—Ä–µ —Å–æ—Å—Ç–æ–∏—Ç —ç—Ç–æ—Ç user_id
    game_id = None
    game_manager = None
    for chat_id_key, game in active_game_managers.items():
        if user_id in game.players:
            game_id = chat_id_key
            game_manager = game
            break
            
    if not game_manager:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –∏–≥—Ä–æ–∫
    if not game_manager.players[user_id]['is_alive']:
        await callback.answer("–ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç.", show_alert=True)
        return

    action = callback_data.action
    target_user_id = callback_data.target_user_id
    target_name = game_manager.players[target_user_id]['name']
    
    # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞ –ú–∞—Ñ–∏–∏
    if action == "kill":
        game_manager.night_votes['kill'][user_id] = target_user_id
        await callback.message.edit_text(f"‚úÖ –í–∞—à –≥–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç: '–ø—Ä–æ–ª–∏—Ç—å' <b>{target_name}</b>.", parse_mode="HTML")
        
        # --- –ê–Ω–æ–Ω—Å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –º–∞—Ñ–∏–∏ ---
        voter_name = game_manager.players[user_id]['name']
        tasks = []
        for mafia_id in game_manager.get_alive_players(MAFIA_TEAM_ROLES):
            if mafia_id != user_id: # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–º—É —Å–µ–±–µ
                tasks.append(
                    bot.send_message(mafia_id, f"üó≥Ô∏è *{voter_name}* –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–≥–Ω–∞—Ç—å *{target_name}*.")
                )
        await asyncio.gather(*tasks)

    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –î–µ—Ç–µ–∫—Ç–∏–≤–∞
    elif action == "check":
        game_manager.night_votes['check'][user_id] = target_user_id
        await callback.message.edit_text(f"‚úÖ –í—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å <b>{target_name}</b>. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–≤–µ—Ç–∞...", parse_mode="HTML")

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –î–æ–∫—Ç–æ—Ä–∞ (–æ–±—ã—á–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ)
    elif action == "heal":
        game_manager.night_votes['heal'][user_id] = target_user_id
        await callback.message.edit_text(f"‚úÖ –í—ã —Ä–µ—à–∏–ª–∏ —Å–ø–∞—Å—Ç–∏ <b>{target_name}</b>. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–≤–µ—Ç–∞...", parse_mode="HTML")

    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –î–æ–∫—Ç–æ—Ä–∞ (—Å–∞–º–æ–ª–µ—á–µ–Ω–∏–µ)
    elif action == "self_heal":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –æ–Ω –µ–≥–æ —É–∂–µ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        player_data = await game_manager.db.get_mafia_player(game_id, user_id)
        if player_data[4] > 0:
             await callback.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–∞–º–æ–ª–µ—á–µ–Ω–∏–µ!", show_alert=True)
             return
             
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î
        game_manager.night_votes['heal'][user_id] = user_id
        await game_manager.db.set_mafia_player_self_heal(game_id, user_id) # (–ù–∞–º –Ω—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ DB)
        
        await callback.message.edit_text(
            f"‚úÖ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–µ <b>–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–∞–º–æ–ª–µ—á–µ–Ω–∏–µ</b>. "
            f"–ë–æ–ª—å—à–µ –≤—ã —Å–µ–±—è —Å–ø–∞—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç–µ. –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–≤–µ—Ç–∞...",
            parse_mode="HTML"
        )
    
    await callback.answer()


@mafia_game_router.message(MafiaGameStates.night_voting)
async def handle_mafia_chat(message: Message, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¢–ê–ô–ù–´–ô –ß–ê–¢ –ú–∞—Ñ–∏–∏.
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∂–∏–≤—ã–º —á–ª–µ–Ω–∞–º –∫–æ–º–∞–Ω–¥—ã.
    """
    user_id = message.from_user.id
    
    # 1. –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game_id = None
    game_manager = None
    for chat_id_key, game in active_game_managers.items():
        if user_id in game.players:
            game_id = chat_id_key
            game_manager = game
            break
    if not game_manager: return

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏
    if not game_manager.players[user_id]['is_alive']:
        await state.clear() # –ú–µ—Ä—Ç–≤—ã–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —ç—Ç–æ–º FSM
        return
        
    # 3. –ì–æ—Ç–æ–≤–∏–º –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    role = game_manager.players[user_id]['role']
    prefix = "ü•§ (–ì–ª–∞–≤–∞—Ä—å)" if role == ROLE_MAFIA_LEADER else "ü•§"
    sender_name = game_manager.players[user_id]['name']
    
    text_to_send = f"üí¨ <b>{sender_name} {prefix}:</b>\n{html.quote(message.text)}"
    
    tasks = []
    for mafia_id in game_manager.get_alive_players(MAFIA_TEAM_ROLES):
        if mafia_id != user_id: # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–º—É —Å–µ–±–µ
            tasks.append(
                bot.send_message(mafia_id, text_to_send, parse_mode="HTML")
            )
            
    await asyncio.gather(*tasks)


# --- –•–≠–ù–î–õ–ï–†–´ –ú–û–î–ï–†–ê–¶–ò–ò ---

@mafia_game_router.message(StateFilter(MafiaGameStates.game_in_progress))
async def handle_game_moderation(message: Message, bot: Bot):
    """
    –£–î–ê–õ–Ø–ï–¢ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ, –ø–æ–∫–∞ –∏–¥–µ—Ç –∏–≥—Ä–∞.
    (–≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –≤–∫–ª—é—á–∏–º FSM –¥–ª—è *—á–∞—Ç–∞*)
    
    –ü–õ–ê–ù –ë: –ï—Å–ª–∏ FSM –¥–ª—è —á–∞—Ç–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    –ø—Ä–æ–≤–µ—Ä–∫—É 'if chat_id in active_game_managers'
    """
    pass # (–ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)


@mafia_game_router.message(F.chat.type.in_({'group', 'supergroup'}))
async def handle_game_moderation_global(message: Message, bot: Bot):
    """
    –£–î–ê–õ–Ø–ï–¢ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ, –ø–æ–∫–∞ –∏–¥–µ—Ç –∏–≥—Ä–∞.
    (–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ —Å–ª–æ–≤–∞—Ä—é 'active_game_managers')
    """
    chat_id = message.chat.id
    if chat_id in active_game_managers:
        game_status = (await active_game_managers[chat_id].db.get_mafia_game(chat_id))[3]
        
        # --- –ú–û–î–ï–†–ê–¶–ò–Ø –ù–û–ß–ò ---
        if game_status.startswith('night'):
            with suppress(TelegramBadRequest):
                await message.delete()
            # (–¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –º—É—Ç–∞ –∑–∞ –ø–æ–≤—Ç–æ—Ä)
            
        # --- –ú–û–î–ï–†–ê–¶–ò–Ø –î–ù–Ø (–û–±—Å—É–∂–¥–µ–Ω–∏–µ) ---
        elif game_status.startswith('day') and message.content_type != 'text':
             with suppress(TelegramBadRequest):
                await message.delete()
        
        # --- –ú–û–î–ï–†–ê–¶–ò–Ø –î–ù–Ø (–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ) ---
        elif game_status.startswith('vote'):
            game = active_game_managers[chat_id]
            if not game.players[message.from_user.id]['is_alive']:
                 with suppress(TelegramBadRequest):
                    await message.delete() # –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã—Ö
            elif message.content_type != 'text':
                 with suppress(TelegramBadRequest):
                    await message.delete() # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞
