# handlers/game_roulette.py
import asyncio
import random
from datetime import datetime, timedelta
from contextlib import suppress
import logging

from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.exceptions import TelegramBadRequest

from database import Database
from .common import check_user_registered
from utils import format_time_delta
from settings import settings_manager

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
roulette_router = Router()
db = Database(db_name='/data/bot_database.db')


# --- CALLBACKDATA ---
class RouletteCallbackData(CallbackData, prefix="roulette"):
    action: str


# --- –ö–õ–ê–°–°–´ –ò –ö–û–ù–°–¢–ê–ù–¢–´ ---
class GameState:
    def __init__(self, creator, stake, max_players, lobby_message_id):
        self.creator = creator
        self.stake = stake
        self.max_players = max_players
        self.lobby_message_id = lobby_message_id
        self.players = {creator.id: creator}
        self.task = None

ROULETTE_LOBBY_TIMEOUT_SECONDS = 60
active_games = {}
chat_cooldowns = {}


# --- –§–£–ù–ö–¶–ò–ò –ò–ì–†–´ ---
def get_roulette_keyboard(game: GameState, user_id: int) -> InlineKeyboardMarkup:
    buttons = [InlineKeyboardButton(text="üç∫ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=RouletteCallbackData(action="join").pack())]
    if user_id in game.players:
        if user_id == game.creator.id:
            buttons.append(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=RouletteCallbackData(action="cancel").pack()))
        else:
            buttons.append(InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data=RouletteCallbackData(action="leave").pack()))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

async def generate_lobby_text(game: GameState) -> str:
    players_list = "\n".join(f"‚Ä¢ {p.full_name}" for p in game.players.values())
    return (
        f"üçª <b>–ü–∏–≤–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b> üçª\n\n"
        f"–°–æ–∑–¥–∞–ª –∏–≥—Ä—É: <b>{game.creator.full_name}</b>\n"
        f"–°—Ç–∞–≤–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: <b>{game.stake} üç∫</b>\n"
        f"–ò–≥—Ä–æ–∫–∏: ({len(game.players)}/{game.max_players})\n{players_list}\n\n"
        f"<i>–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {ROULETTE_LOBBY_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –∫–æ–≥–¥–∞ –Ω–∞–±–µ—Ä–µ—Ç—Å—è {game.max_players} –∏–≥—Ä–æ–∫–æ–≤.</i>"
    )

@roulette_router.message(Command("roulette"))
async def cmd_roulette(message: Message, bot: Bot):
    if message.chat.type == 'private': return await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
    args = message.text.split()
    if len(args) != 3 or not args[1].isdigit() or not args[2].isdigit():
        return await message.reply(
            "‚ÑπÔ∏è <b>–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å '–ü–∏–≤–Ω—É—é —Ä—É–ª–µ—Ç–∫—É':</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/roulette &lt;—Å—Ç–∞–≤–∫–∞&gt; &lt;–∏–≥—Ä–æ–∫–∏&gt;</code>\n\n"
            "‚Ä¢ <code>&lt;—Å—Ç–∞–≤–∫–∞&gt;</code>: –æ—Ç 5 –¥–æ 100 üç∫\n"
            "‚Ä¢ <code>&lt;–∏–≥—Ä–æ–∫–∏&gt;</code>: –æ—Ç 2 –¥–æ 6 —á–µ–ª–æ–≤–µ–∫\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/roulette 10 4</code>", parse_mode='HTML'
        )
    chat_id = message.chat.id
    if chat_id in active_games: return await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞.")
    
    roulette_cooldown = settings_manager.roulette_cooldown
    if chat_id in chat_cooldowns:
        time_since = datetime.now() - chat_cooldowns[chat_id]
        if time_since.total_seconds() < roulette_cooldown:
            remaining = timedelta(seconds=roulette_cooldown) - time_since
            return await message.reply(f"–°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑: {format_time_delta(remaining)}.")
            
    stake, max_players = int(args[1]), int(args[2])
    
    min_bet = settings_manager.roulette_min_bet
    max_bet = settings_manager.roulette_max_bet
    
    if not (min_bet <= stake <= max_bet):
        return await message.reply(f"–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {min_bet} –¥–æ {max_bet} üç∫.")
    if not (2 <= max_players <= 6): return await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 6.")
    
    creator = message.from_user
    if not await check_user_registered(message, bot): return
    creator_balance = await db.get_user_beer_rating(creator.id)
    if creator_balance < stake: return await message.reply(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–≤–∞. –ù—É–∂–Ω–æ {stake} üç∫, —É –≤–∞—Å {creator_balance} üç∫.")
    
    await db.change_rating(creator.id, -stake)
    lobby_message = await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏...")
    game = GameState(creator, stake, max_players, lobby_message.message_id)
    active_games[chat_id] = game
    with suppress(TelegramBadRequest): await bot.pin_chat_message(chat_id=chat_id, message_id=lobby_message.message_id, disable_notification=True)
    await lobby_message.edit_text(await generate_lobby_text(game), reply_markup=get_roulette_keyboard(game, creator.id), parse_mode='HTML')
    game.task = asyncio.create_task(schedule_game_start(chat_id, bot))

@roulette_router.callback_query(RouletteCallbackData.filter())
async def on_roulette_button_click(callback: CallbackQuery, callback_data: RouletteCallbackData, bot: Bot):
    chat_id = callback.message.chat.id
    user = callback.from_user
    if chat_id not in active_games: return await callback.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
    
    game = active_games[chat_id]
    action = callback_data.action
    
    if action == "join":
        if user.id in game.players: return await callback.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
        if len(game.players) >= game.max_players: return await callback.answer("–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.", show_alert=True)
        if not await check_user_registered(callback, bot): return
        balance = await db.get_user_beer_rating(user.id)
        if balance < game.stake: return await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–≤–∞! –ù—É–∂–Ω–æ {game.stake} üç∫, —É –≤–∞—Å {balance} üç∫.", show_alert=True)
        await db.change_rating(user.id, -game.stake)
        game.players[user.id] = user
        await callback.answer("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!")
        if len(game.players) == game.max_players:
            if game.task: game.task.cancel()
            await start_roulette_game(chat_id, bot)
        else:
            await callback.message.edit_text(await generate_lobby_text(game), reply_markup=get_roulette_keyboard(game, user.id), parse_mode='HTML')
            
    elif action == "leave":
        if user.id not in game.players: return await callback.answer("–í—ã –Ω–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.", show_alert=True)
        if user.id == game.creator.id: return await callback.answer("–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É. –¢–æ–ª—å–∫–æ –æ—Ç–º–µ–Ω–∏—Ç—å.", show_alert=True)
        del game.players[user.id]
        await db.change_rating(user.id, game.stake)
        await callback.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", show_alert=True)
        await callback.message.edit_text(await generate_lobby_text(game), reply_markup=get_roulette_keyboard(game, user.id), parse_mode='HTML')
        
    elif action == "cancel":
        if user.id != game.creator.id: return await callback.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É.", show_alert=True)
        if game.task: game.task.cancel()
        for player_id in game.players: await db.change_rating(player_id, game.stake)
        del active_games[chat_id]
        with suppress(TelegramBadRequest): await bot.unpin_chat_message(chat_id=chat_id, message_id=game.lobby_message_id)
        await callback.message.edit_text("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º. –í—Å–µ —Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        await callback.answer()

async def schedule_game_start(chat_id: int, bot: Bot):
    try:
        await asyncio.sleep(ROULETTE_LOBBY_TIMEOUT_SECONDS)
        if chat_id not in active_games: return
        game = active_games[chat_id]
        if len(game.players) >= 2:
            await start_roulette_game(chat_id, bot)
        else:
            await db.change_rating(game.creator.id, game.stake)
            await bot.edit_message_text(text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=chat_id, message_id=game.lobby_message_id, reply_markup=None)
            with suppress(TelegramBadRequest):
                await bot.unpin_chat_message(chat_id=chat_id, message_id=game.lobby_message_id)
            del active_games[chat_id]
    except asyncio.CancelledError:
        pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ schedule_game_start: {e}")
        if chat_id in active_games:
            del active_games[chat_id]

async def start_roulette_game(chat_id: int, bot: Bot):
    if chat_id not in active_games: return
    game = active_games[chat_id]
    with suppress(TelegramBadRequest): await bot.unpin_chat_message(chat_id=chat_id, message_id=game.lobby_message_id)
    await bot.edit_message_text(text=f"–í—Å–µ –≤ —Å–±–æ—Ä–µ! –°—Ç–∞–≤–∫–∏ ({game.stake} üç∫ —Å –∫–∞–∂–¥–æ–≥–æ). –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω... üî´", chat_id=chat_id, message_id=game.lobby_message_id, reply_markup=None)
    await asyncio.sleep(3)
    players_in_game = list(game.players.values())
    round_num = 1
    while len(players_in_game) > 1:
        await bot.send_message(chat_id, f"üçª <b>–†–∞—É–Ω–¥ {round_num}</b>. –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω... üî´", parse_mode='HTML')
        await asyncio.sleep(5)
        loser = random.choice(players_in_game)
        players_in_game.remove(loser)
        remaining_players_text = "\n".join(f"‚Ä¢ {p.full_name}" for p in players_in_game)
        await bot.send_message(
            chat_id,
            text=f"–í—ã–±—ã–≤–∞–µ—Ç... <b>{loser.full_name}</b>! üòñ\n\n"
                 f"<i>–û—Å—Ç–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ:</i>\n{remaining_players_text}",
            parse_mode='HTML'
        )
        round_num += 1
        await asyncio.sleep(7)
    winner = players_in_game[0]
    prize = game.stake * len(game.players)
    await db.change_rating(winner.id, prize)
    winner_text = (
        f"üèÜ <b>–ü–û–ë–ï–î–ò–¢–ï–õ–¨!</b> üèÜ\n\n"
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, <b>{winner.full_name}</b>! –û–Ω –∑–∞–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å –±–∞–Ω–∫: <b>{prize} üç∫</b>!\n\n"
        f"<i>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.</i>"
    )
    winner_message = await bot.send_message(chat_id, text=winner_text, parse_mode='HTML')
    with suppress(TelegramBadRequest):
        await bot.pin_chat_message(chat_id=chat_id, message_id=winner_message.message_id, disable_notification=True)
        asyncio.create_task(unpin_after_delay(chat_id, winner_message.message_id, bot, 120))
    del active_games[chat_id]
    chat_cooldowns[chat_id] = datetime.now()

async def unpin_after_delay(chat_id: int, message_id: int, bot: Bot, delay: int):
    await asyncio.sleep(delay)
    with suppress(TelegramBadRequest):
        await bot.unpin_chat_message(chat_id=chat_id, message_id=message_id)
