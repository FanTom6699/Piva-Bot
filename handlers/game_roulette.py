# handlers/game_roulette.py
import asyncio
import random
import time
import html  # --- –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω ---
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from database import Database
from settings import SettingsManager
from handlers.common import check_user_registered

game_router = Router()

ROULETTE_LOBBY_TIMEOUT_SECONDS = 30
ROULETTE_TURN_DELAY_SECONDS = 3

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä {chat_id: RouletteGame}
active_games = {}

class RouletteGame:
    def __init__(self, creator, stake, max_players):
        self.creator = creator
        self.stake = stake
        self.max_players = max_players
        self.players = {creator.id: creator}
        self.message_id = None
        self.chat_id = None
        self.lobby_task = None
        self.game_task = None

# --- –ö–û–ú–ê–ù–î–ê –ó–ê–ü–£–°–ö–ê –ò–ì–†–´ ---
@game_router.message(Command("roulette"))
async def cmd_roulette(message: Message, bot: Bot, db: Database, settings: SettingsManager):
    if message.chat.type == "private":
        return await message.answer("‚ùå –≠—Ç—É –∏–≥—Ä—É –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
    if not await check_user_registered(message, bot, db):
        return
    if message.chat.id in active_games:
        return await message.answer("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞!")

    args = message.text.split()
    if len(args) < 3:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–±–æ–ª–µ–µ –∂–∏–≤–æ–π) ---
        return await message.answer(
            "üßê <b>–•–º, –Ω–µ —Ç–∞–∫...</b>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/roulette &lt;—Å—Ç–∞–≤–∫–∞&gt; &lt;–∏–≥—Ä–æ–∫–∏&gt;</code>\n"
            "<i>(–ù–∞–ø—Ä–∏–º–µ—Ä: /roulette 100 3)</i>",
            parse_mode='HTML'
        )

    try:
        stake = int(args[1])
        max_players = int(args[2])
    except ValueError:
        return await message.answer("‚ùå –°—Ç–∞–≤–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

    min_stake = settings.roulette_min_stake
    if stake < min_stake:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–±–æ–ª–µ–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π) ---
        return await message.answer(f"üí∞ <b>–°—Ç–∞–≤–∫–∏ –ø–æ–≤—ã—à–µ, –¥—Ä—É–≥!</b>\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è '–†—É–ª–µ—Ç–∫–∏': <b>{min_stake}</b> üç∫.")

    if not 2 <= max_players <= 6:
        return await message.answer("‚ùå –í '–†—É–ª–µ—Ç–∫—É' –º–æ–≥—É—Ç –∏–≥—Ä–∞—Ç—å –æ—Ç 2 –¥–æ 6 —á–µ–ª–æ–≤–µ–∫.")

    user_id = message.from_user.id
    user_rating = await db.get_user_beer_rating(user_id)
    if user_rating < stake:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (–±–æ–ª–µ–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π) ---
        return await message.answer(f"üçª <b>–ú–∞–ª–æ–≤–∞—Ç–æ '–ø–∏–≤–∞'!</b>\n–£ —Ç–µ–±—è –≤—Å–µ–≥–æ {user_rating} üç∫, –∞ –Ω—É–∂–Ω–æ {stake} üç∫ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")

    game = RouletteGame(creator=message.from_user, stake=stake, max_players=max_players)
    game.chat_id = message.chat.id
    active_games[message.chat.id] = game
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üçª –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ({stake} üç∫)", callback_data="join_roulette")]
    ])
    
    lobby_text = generate_lobby_text(game)
    game_message = await message.answer(lobby_text, reply_markup=keyboard, parse_mode='HTML')
    game.message_id = game_message.message_id

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ª–æ–±–±–∏
    game.lobby_task = asyncio.create_task(
        lobby_timeout(bot, db, game)
    )

# --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê –õ–û–ë–ë–ò ---
def generate_lobby_text(game: RouletteGame) -> str:
    players_list = []
    for user in game.players.values():
        # --- –¢–ï–•. –£–õ–£–ß–®–ï–ù–ò–ï: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ ---
        safe_name = html.escape(user.full_name)
        players_list.append(f"‚Ä¢ {safe_name}")
    players_list = "\n".join(players_list)

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 4: –¢–µ–∫—Å—Ç –ª–æ–±–±–∏ (–ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é) ---
    text = (
        f"üçª <b>–ö—Ç–æ —Ä–∏—Å–∫–Ω–µ—Ç –≤ '–†—É–ª–µ—Ç–∫—É'?</b> üçª\n\n"
        f"<b>{html.escape(game.creator.full_name)}</b> —Å—Ç–∞–≤–∏—Ç –Ω–∞ –∫–æ–Ω <b>{game.stake} üç∫</b> –∏ –∂–¥–µ—Ç —Å–º–µ–ª—å—á–∞–∫–æ–≤.\n\n"
        f"<b>–ò–≥—Ä–æ–∫–∏ –∑–∞ —Å—Ç–æ–ª–æ–º:</b> ({len(game.players)}/{game.max_players})\n{players_list}\n\n"
        f"<i>–°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ {ROULETTE_LOBBY_TIMEOUT_SECONDS} —Å–µ–∫. –∏–ª–∏ –∫–æ–≥–¥–∞ —Å—Ç–æ–ª –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è!</i>"
    )
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø 4 ---
    return text

# --- –¢–ê–ô–ú–ï–† –õ–û–ë–ë–ò ---
async def lobby_timeout(bot: Bot, db: Database, game: RouletteGame):
    await asyncio.sleep(ROULETTE_LOBBY_TIMEOUT_SECONDS)
    if game.chat_id in active_games and active_games[game.chat_id] == game:
        # –ï—Å–ª–∏ –∏–≥—Ä–∞ –≤—Å–µ –µ—â–µ –≤ –ª–æ–±–±–∏ (–Ω–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)
        if len(game.players) >= 2:
            game.game_task = asyncio.create_task(
                start_roulette_game(bot, db, game)
            )
        else:
            await bot.edit_message_text(
                chat_id=game.chat_id,
                message_id=game.message_id,
                text=f"{generate_lobby_text(game)}\n\n"
                     f"<i>–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–µ –Ω–∞–±—Ä–∞–ª–æ—Å—å —Ö–æ—Ç—è –±—ã 2 –∏–≥—Ä–æ–∫–∞.</i>",
                parse_mode='HTML'
            )
            del active_games[game.chat_id]

# --- –ö–ù–û–ü–ö–ê "–ü–†–ò–°–û–ï–î–ò–ù–ò–¢–¨–°–Ø" ---
@game_router.callback_query(F.data == "join_roulette")
async def join_roulette_game(callback: CallbackQuery, bot: Bot, db: Database):
    user = callback.from_user
    chat_id = callback.message.chat.id

    if chat_id not in active_games:
        return await callback.answer("‚ùå –≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!", show_alert=True)
        
    game = active_games[chat_id]

    if game.game_task is not None:
        return await callback.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!", show_alert=True)
    if len(game.players) >= game.max_players:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 5: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π) ---
        return await callback.answer("üçª –°—Ç–æ–ª –ø–æ–ª–æ–Ω, –¥—Ä—É–≥! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.", show_alert=True)
    if user.id in game.players:
        return await callback.answer("üëç –¢—ã —É–∂–µ –∑–∞ —Å—Ç–æ–ª–æ–º.", show_alert=True)

    user_rating = await db.get_user_beer_rating(user.id)
    if user_rating < game.stake:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 6: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ (—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π) ---
        return await callback.answer(f"üí∞ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç '–ø–∏–≤–∞' –Ω–∞ —Å—Ç–∞–≤–∫—É ({game.stake} üç∫).", show_alert=True)

    # –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    game.players[user.id] = user
    await callback.answer(f"–¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ! –°—Ç–∞–≤–∫–∞: {game.stake} üç∫.")
    
    await bot.edit_message_text(
        chat_id=game.chat_id,
        message_id=game.message_id,
        text=generate_lobby_text(game),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üçª –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ({game.stake} üç∫)", callback_data="join_roulette")]
        ]),
        parse_mode='HTML'
    )

    # –ï—Å–ª–∏ –ª–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
    if len(game.players) == game.max_players:
        if game.lobby_task:
            game.lobby_task.cancel() # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –ª–æ–±–±–∏
        game.game_task = asyncio.create_task(
            start_roulette_game(bot, db, game)
        )

# --- –õ–û–ì–ò–ö–ê –ò–ì–†–´ (–ó–ê–ü–£–°–ö) ---
async def start_roulette_game(bot: Bot, db: Database, game: RouletteGame):
    if len(game.players) < 2:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 7: –¢–µ–∫—Å—Ç –æ—Ç–º–µ–Ω—ã (—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π) ---
        await bot.edit_message_text(
            chat_id=game.chat_id,
            message_id=game.message_id,
            text=f"{generate_lobby_text(game)}\n\n"
                 f"üçª <b>–≠—Ö! –í—Å–µ —Ä–∞–∑–±–µ–∂–∞–ª–∏—Å—å.</b>\n–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –∏–≥—Ä–æ–∫–æ–≤.",
            parse_mode='HTML'
        )
        if game.chat_id in active_games:
             del active_games[game.chat_id]
        return

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏
    total_pot = 0
    players_in_game = list(game.players.values())
    
    for player in players_in_game:
        await db.update_user_beer_rating(player.id, -game.stake)
        total_pot += game.stake

    await bot.edit_message_text(
        chat_id=game.chat_id,
        message_id=game.message_id,
        text=f"<b>üçª –†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è! üçª</b>\n\n"
             f"<i>–ò–≥—Ä–æ–∫–∏ –∑–∞ —Å—Ç–æ–ª–æ–º: {len(players_in_game)}. –ë–∞–Ω–∫: {total_pot} üç∫</i>\n\n"
             "–ó–∞—Ç–∞–∏—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ...",
        parse_mode='HTML'
    )
    await asyncio.sleep(ROULETTE_TURN_DELAY_SECONDS)

    # –†–∞—É–Ω–¥—ã
    while len(players_in_game) > 1:
        loser = random.choice(players_in_game)
        players_in_game.remove(loser)
        
        remaining_players_text = "\n".join(f"‚Ä¢ {html.escape(p.full_name)}" for p in players_in_game)
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 8: –¢–µ–∫—Å—Ç –≤—ã–±—ã–≤–∞–Ω–∏—è (—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π) ---
        text = (
            f"<b>üçª –†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è... üçª</b>\n\n"
            f"...–∏ –ø—É—Å—Ç–∞—è –∫—Ä—É–∂–∫–∞ –¥–æ—Å—Ç–∞–µ—Ç—Å—è... <b>{html.escape(loser.full_name)}</b>! üòñ\n\n"
            f"<i>–¢—ã –≤—ã–±—ã–ª. –û—Å—Ç–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ:</i>\n{remaining_players_text}"
        )
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø 8 ---
        
        await bot.edit_message_text(
            chat_id=game.chat_id,
            message_id=game.message_id,
            text=text,
            parse_mode='HTML'
        )
        await asyncio.sleep(ROULETTE_TURN_DELAY_SECONDS)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winner = players_in_game[0]
    await db.update_user_beer_rating(winner.id, total_pot)

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï 9: –¢–µ–∫—Å—Ç –ø–æ–±–µ–¥—ã (–±–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π) ---
    text = (
        f"<b>üçª –†—É–ª–µ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å! üçª</b>\n\n"
        f"üèÜ <b>{html.escape(winner.full_name)}</b> –∑–∞–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å –±–∞–Ω–∫!\n\n"
        f"<b>–í—ã–∏–≥—Ä—ã—à: +{total_pot} üç∫!</b>\n"
        f"<i>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫–∞!</i>"
    )
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø 9 ---

    await bot.edit_message_text(
        chat_id=game.chat_id,
        message_id=game.message_id,
        text=text,
        parse_mode='HTML'
    )
    
    if game.chat_id in active_games:
        del active_games[game.chat_id]
