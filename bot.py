import asyncio
import logging
import sqlite3
import os
import random
import time
from datetime import timedelta
import html

from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from dotenv import load_dotenv

# --- –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ê–ù–¢–ò–°–ü–ê–ú–ê ---
from typing import Callable, Dict, Any, Awaitable
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from cachetools import TTLCache

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–∏–Ω–≥–∞).")

DB_FILE = '/data/beer_game.db'
COOLDOWN_SECONDS = 3 * 60 * 60  # 3 —á–∞—Å–∞
THROTTLE_TIME = 0.5 # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞

# --- –ù–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –®–ê–ù–°–û–í ---
WIN_CHANCE = 60    # –®–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à –≤ %
LOSE_CHANCE = 40   # –®–∞–Ω—Å –Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à –≤ % (WIN_CHANCE + LOSE_CHANCE –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 100)
# –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∏—á—å—é, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
# DRAW_CHANCE = 10 (–∏ —Ç–æ–≥–¥–∞ WIN_CHANCE + LOSE_CHANCE + DRAW_CHANCE = 100)
# –°–µ–π—á–∞—Å —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –¥–≤–∞ –∏—Å—Ö–æ–¥–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ WIN_CHANCE, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - Lose

# --- File IDs –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
SUCCESS_IMAGE_ID = "AgACAgIAAxkBAAICvGjMNGhCINSBAeXyX9w0VddF-C8PAAJt8jEbFbVhSmh8gDAZrTCaAQADAgADeQADNgQ"
FAIL_IMAGE_ID = "AgACAgIAAxkBAAICwGjMNRAnAAHo1rDMPfaF_HUa0WzxaAACcvIxGxW1YUo5jEQQRkt4kgEAAwIAA3kAAzYE"
COOLDOWN_IMAGE_ID = "AgACAgIAAxkBAAICxWjMNXRNIOw6PJstVS2P6oFnW6wHAAJF-TEbLqthShzwv65k4n-MAQADAgADeQADNgQ"
TOP_IMAGE_ID = "AgACAgIAAxkBAAICw2jMNUqWi1d-ctjc67_Ryg9uLmBHAAJC-TEbLqthSiv8cCgp6EMnAQADAgADeQADNgQ"

logging.basicConfig(level=logging.INFO)

# --- –ê–ù–¢–ò–°–ü–ê–ú MIDDLEWARE ---
class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, throttle_time: float = 0.5):
        self.cache = TTLCache(maxsize=10_000, ttl=throttle_time)

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        user_id = event.from_user.id
        if user_id in self.cache:
            return
        self.cache[user_id] = None
        return await handler(event, data)

router = Router()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT NOT NULL,
            rating INTEGER DEFAULT 0,
            last_beer_time INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

def get_user_data(user_id: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT username, rating, last_beer_time FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    conn.close()
    return user_data

def add_or_update_user(user_id: int, username: str):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (user_id, username) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET username = EXCLUDED.username",
        (user_id, username)
    )
    conn.commit()
    conn.close()

def update_user_rating_and_time(user_id: int, new_rating: int, current_time: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET rating = ?, last_beer_time = ? WHERE user_id = ?",
        (new_rating, current_time, user_id)
    )
    conn.commit()
    conn.close()

def get_top_users(limit: int = 10):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT username, rating FROM users ORDER BY rating DESC LIMIT ?", (limit,))
    top_users = cursor.fetchall()
    conn.close()
    return top_users

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = html.escape(message.from_user.full_name) 

    user_data = get_user_data(user_id)
    add_or_update_user(user_id, username)

    if user_data:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}! –†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –±–∞—Ä–µ. üçª")
    else:
         await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä, {username}! üçª\n\n"
            "–ó–¥–µ—Å—å –º—ã —Å–æ—Ä–µ–≤–Ω—É–µ–º—Å—è, –∫—Ç–æ –±–æ–ª—å—à–µ –≤—ã–ø—å–µ—Ç –ø–∏–≤–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /beer, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!\n"
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: /profile\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ª—É—á—à–∏—Ö: /top\n"
            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? /help"
        )

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    
    if user_data:
        username, rating, _ = user_data
        await message.answer(
            f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"–ò–º—è: <b>{username}</b>\n"
            f"–†–µ–π—Ç–∏–Ω–≥: <b>{rating}</b> üç∫",
            parse_mode="HTML"
        )
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")

@router.message(Command("beer"))
async def cmd_beer(message: Message):
    user_id = message.from_user.id
    current_time = int(time.time())

    user_data = get_user_data(user_id)

    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    _, rating, last_beer_time = user_data

    time_passed = current_time - last_beer_time
    if time_passed < COOLDOWN_SECONDS:
        time_left = COOLDOWN_SECONDS - time_passed
        time_left_formatted = str(timedelta(seconds=time_left))
        await message.answer_photo(
            photo=COOLDOWN_IMAGE_ID,
            caption=f"–¢—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–∏–ª! ‚è≥\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑: <b>{time_left_formatted}</b>",
            parse_mode="HTML"
        )
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    roll = random.randint(1, 100) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
    
    rating_change_amount = random.randint(1, 10) # –°–∫–æ–ª—å–∫–æ –ø–∏–≤–∞ –ø–æ–ª—É—á–∏–º/–ø–æ—Ç–µ—Ä—è–µ–º

    if roll <= WIN_CHANCE: # –ï—Å–ª–∏ –≤—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —à–∞–Ω—Å—É –≤—ã–∏–≥—Ä—ã—à–∞
        # –£—Å–ø–µ—Ö
        new_rating = rating + rating_change_amount
        await message.answer_photo(
            photo=SUCCESS_IMAGE_ID,
            caption=f"üòèüçª –¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª –Ω–∞ <b>+{rating_change_amount}</b> üç∫ –ø–∏–≤–∞!",
            parse_mode="HTML"
        )
    else:
        # –ù–µ—É–¥–∞—á–∞ (–≤—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ WIN_CHANCE)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ –æ–ø—É—Å—Ç–∏—Ç—Å—è –Ω–∏–∂–µ –Ω—É–ª—è
        potential_new_rating = rating - rating_change_amount
        new_rating = max(0, potential_new_rating) 

        caption_message = ""
        if potential_new_rating < 0:
            actual_loss = rating # –°–∫–æ–ª—å–∫–æ –ø–∏–≤–∞ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–Ω—è–ª–∏ –¥–æ 0
            caption_message = f"ü§¨üçª –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —É —Ç–µ–±—è –≤—Å–µ <b>{rating}</b> üç∫ –ø–∏–≤–∞! –¢—ã –Ω–∞ –Ω—É–ª–µ..."
        else:
            actual_loss = rating_change_amount
            caption_message = f"ü§¨üçª –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —É —Ç–µ–±—è <b>{actual_loss}</b> üç∫ –ø–∏–≤–∞!"

        await message.answer_photo(
            photo=FAIL_IMAGE_ID,
            caption=caption_message,
            parse_mode="HTML"
        )
    
    update_user_rating_and_time(user_id, new_rating, current_time)

@router.message(Command("top"))
async def cmd_top(message: Message):
    top_users = get_top_users()

    if not top_users:
        await message.answer("–í –±–∞—Ä–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º! üçª")
        return

    response_text = "üèÜ <b>–¢–æ–ø-10 –ª—É—á—à–∏—Ö –ø–∏–≤–æ—Ö–ª—ë–±–æ–≤:</b>\n\n"
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    
    for i, (username, rating) in enumerate(top_users, 1):
        place_icon = medals.get(i, f"<b>{i}.</b>")
        response_text += f"{place_icon} {username} ‚Äî <b>{rating}</b> üç∫\n"
        
    await message.answer_photo(
        photo=TOP_IMAGE_ID,
        caption=response_text,
        parse_mode="HTML"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "<b>üçª –ü—Ä–∞–≤–∏–ª–∞ –ò–≥—Ä—ã –≤ –ü–∏–≤–Ω–æ–º –ë–∞—Ä–µ üçª</b>\n\n"
        "–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞, –≥–¥–µ —Ç—ã —Å–æ—Ä–µ–≤–Ω—É–µ—à—å—Å—è –∑–∞ —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø–∏–≤–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥!\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å)\n"
        "/beer - –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –ø–æ–ª—É—á–∏—Ç—å (–∏–ª–∏ –ø–æ—Ç–µ—Ä—è—Ç—å) –ø–∏–≤–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥. –ö—É–ª–¥–∞—É–Ω: 3 —á–∞—Å–∞.\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥\n"
        "/top - –£–≤–∏–¥–µ—Ç—å 10 –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await message.answer(help_text, parse_mode="HTML")

async def main():
    init_db()
    
    router.message.middleware(ThrottlingMiddleware(throttle_time=THROTTLE_TIME))
    
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
