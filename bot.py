import asyncio
import logging
import sqlite3
import os
import random
import time
from datetime import timedelta

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

DB_FILE = 'beer_game.db'
COOLDOWN_SECONDS = 3 * 60 * 60

# --- File IDs –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–í–ê–ñ–ù–û: –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø!) ---
# –ü–æ–ª—É—á–∏—Ç–µ —ç—Ç–∏ ID, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–∞—Ä—Ç–∏–Ω–∫–∏ @RawDataBot –∏–ª–∏ –ø–æ—Ö–æ–∂–µ–º—É –±–æ—Ç—É
SUCCESS_IMAGE_ID = "AgACAgIAAxkBAAE7RhNoy3mtHS_htKXAn3IbDwWd-h2lYQACbfIxGxW1YUq0_SzDnrjbjwEAAwIAA3kAAzYE"       # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ "–±–∞—Ö–Ω—É–ª!"
FAIL_IMAGE_ID = "AgACAgIAAxkBAAE7RhZoy3o_4reUDml6pZHO9UhL0HNEgwACcvIxGxW1YUp50kRQuOHYXQEAAwIAA3kAAzYE"         # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ "–æ—Ç–∂–∞–ª–∏ –ø–∏–≤–æ!"
COOLDOWN_IMAGE_ID = "AgACAgIAAxkBAAE7TUBozC13Ufm8h-FaqtfXmDf-Q2wk_gACRfkxGy6rYUq-T0t5tZO1rAEAAwIAA3kAAzYE"    # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—É–ª–¥–∞—É–Ω–µ
TOP_IMAGE_ID = "AgACAgIAAxkBAAE7TTpozC1YlSg_3GxjdtRYJBZZIicJ_gACQvkxGy6rYUoZ8xwiFk0lVwEAAwIAA3kAAzYE"         # –ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤


logging.basicConfig(level=logging.INFO)

router = Router()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---

def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT NOT NULL,
            rating INTEGER DEFAULT 0,
            last_beer_time INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# --- –í–†–ï–ú–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø FILE ID ---
# –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç–µ –≤—Å–µ ID, —ç—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
@router.message(Command("getid"))
async def cmd_getid(message: Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ File ID.")

@router.message(F.photo)
async def photo_handler(message: Message):
    photo_id = message.photo[-1].file_id
    await message.reply(f"File ID —ç—Ç–æ–≥–æ —Ñ–æ—Ç–æ:\n`{photo_id}`")
# --- –ö–û–ù–ï–¶ –í–†–ï–ú–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---


@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.full_name
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    user_exists = cursor.fetchone()
    if not user_exists:
        cursor.execute(
            "INSERT INTO users (user_id, username, rating, last_beer_time) VALUES (?, ?, ?, ?)",
            (user_id, username, 0, 0)
        )
        conn.commit()
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä, {username}! üçª\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /beer, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!"
        )
    else:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}! üçª")
    conn.close()


@router.message(Command("profile"))
async def cmd_profile(message: Message):
    user_id = message.from_user.id
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT username, rating FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    conn.close()
    if user_data:
        username, rating = user_data
        await message.answer(
            f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"–ò–º—è: <b>{username}</b>\n"
            f"–†–µ–π—Ç–∏–Ω–≥: <b>{rating}</b> üç∫",
            parse_mode="HTML"
        )
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ /start.")


@router.message(Command("beer"))
async def cmd_beer(message: Message):
    user_id = message.from_user.id
    current_time = int(time.time())
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT rating, last_beer_time FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if not user_data:
        conn.close()
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    rating, last_beer_time = user_data
    time_passed = current_time - last_beer_time
    if time_passed < COOLDOWN_SECONDS:
        time_left = COOLDOWN_SECONDS - time_passed
        time_left_formatted = str(timedelta(seconds=time_left))
        await message.answer_photo(
            photo=COOLDOWN_IMAGE_ID,
            caption=f"–¢—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–∏–ª! ‚è≥\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑: <b>{time_left_formatted}</b>",
            parse_mode="HTML"
        )
        conn.close()
        return

    if random.choice([True, False]):
        rating_change = random.randint(1, 10)
        new_rating = rating + rating_change
        await message.answer_photo(
            photo=SUCCESS_IMAGE_ID,
            caption=f"üòèüçª –¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª –Ω–∞ <b>+{rating_change}</b> üç∫ –ø–∏–≤–∞!",
            parse_mode="HTML"
        )
    else:
        rating_change = -random.randint(1, 10)
        new_rating = rating + rating_change
        await message.answer_photo(
            photo=FAIL_IMAGE_ID,
            caption=f"ü§¨üçª –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —É —Ç–µ–±—è <b>{rating_change}</b> üç∫ –ø–∏–≤–∞!",
            parse_mode="HTML"
        )
    
    cursor.execute(
        "UPDATE users SET rating = ?, last_beer_time = ? WHERE user_id = ?",
        (new_rating, current_time, user_id)
    )
    conn.commit()
    conn.close()


@router.message(Command("top"))
async def cmd_top(message: Message):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT username, rating FROM users ORDER BY rating DESC LIMIT 10")
    top_users = cursor.fetchall()
    conn.close()

    if not top_users:
        await message.answer("–í –±–∞—Ä–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º! üçª")
        return

    response_text = "üèÜ <b>–¢–æ–ø-10 –ª—É—á—à–∏—Ö –ø–∏–≤–æ—Ö–ª—ë–±–æ–≤:</b>\n\n"
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    
    for i, (username, rating) in enumerate(top_users, 1):
        place_icon = medals.get(i, f"<b>{i}.</b>")
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨:
        response_text += f"{place_icon} {username} ‚Äî <b>{rating}</b> üç∫\n"
        
    await message.answer_photo(
        photo=TOP_IMAGE_ID,
        caption=response_text,
        parse_mode="HTML"
    )


async def main():
    init_db()
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
