import logging
import os
import random
import time
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv
from database import init_db

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
load_dotenv()
BOT_TOKEN = os.getenv("6711143584:AAGDrBrQek_q4X2s_iONkQmEafuk-b6SkrM")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏ –µ–≥–æ –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ë–î
conn = init_db()
cur = conn.cursor()

COOLDOWN = 3 * 60 * 60  # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# /start
@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    telegram_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name

    cur.execute("SELECT * FROM players WHERE telegram_id = ?", (telegram_id,))
    player = cur.fetchone()

    if not player:
        cur.execute("INSERT INTO players (telegram_id, username) VALUES (?, ?)", (telegram_id, username))
        conn.commit()
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer(f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}! –¢—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.")

# /beer
@dp.message_handler(commands=["beer"])
async def beer_command(message: types.Message):
    telegram_id = str(message.from_user.id)
    username = message.from_user.username or message.from_user.first_name

    cur.execute("SELECT beer_points, last_beer FROM players WHERE telegram_id = ?", (telegram_id,))
    player = cur.fetchone()

    if not player:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
        return

    beer_points, last_beer = player
    now = int(time.time())

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if now - last_beer < COOLDOWN:
        remaining = COOLDOWN - (now - last_beer)
        h = remaining // 3600
        m = (remaining % 3600) // 60
        s = remaining % 60
        await message.answer(f"‚åõ –¢—ã —É–∂–µ –ø–∏–ª –Ω–µ–¥–∞–≤–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {h:02d}:{m:02d}:{s:02d}.")
        return

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª—é—Å –∏–ª–∏ –º–∏–Ω—É—Å
    if random.choice([True, False]):
        change = random.randint(1, 10)
        text = f"üòèüçª –¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª!\n–°–ª–∏–≤–æ—á–Ω–æ–µ –ø–∏–≤–æ: **+{change}**"
    else:
        change = -random.randint(1, 10)
        text = f"ü§¨üçª –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —Ç–≤–æ—ë –ø–∏–≤–æ!\n–°–ª–∏–≤–æ—á–Ω–æ–µ –ø–∏–≤–æ: **{change}**"

    beer_points += change
    cur.execute("UPDATE players SET beer_points = ?, last_beer = ? WHERE telegram_id = ?", (beer_points, now, telegram_id))
    conn.commit()

    await message.answer(f"{text}\n\nüèÜ –¢–≤–æ–π —Å—á—ë—Ç: {beer_points}")

# /top
@dp.message_handler(commands=["top"])
async def top_command(message: types.Message):
    cur.execute("SELECT username, beer_points FROM players ORDER BY beer_points DESC LIMIT 10")
    top_players = cur.fetchall()

    if not top_players:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.")
        return

    text = "üèÜ –¢–æ–ø-10 –ª—é–±–∏—Ç–µ–ª–µ–π –ø–∏–≤–∞:\n\n"
    for i, (username, points) in enumerate(top_players, start=1):
        name = username or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
        text += f"{i}. {name} ‚Äî {points} –æ—á–∫–æ–≤\n"

    await message.answer(text)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
