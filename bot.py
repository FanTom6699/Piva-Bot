import logging
import os
import random
import sqlite3
import time

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.builtin import CommandStart

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('6711143584:AAGDrBrQek_q4X2s_iONkQmEafuk-b6SkrM')
DATABASE_NAME = 'beer_bot.db'
BEER_COOLDOWN = 3 * 60 * 60 # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
RATING_CHANGE = 10 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---

def init_db():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            rating INTEGER DEFAULT 0,
            last_beer_time INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

def get_user(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def add_new_user(user_id, username):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
        conn.commit()
    except sqlite3.IntegrityError:
        pass # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    conn.close()

def update_user_data(user_id, new_rating, new_time):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET rating = ?, last_beer_time = ? WHERE user_id = ?", (new_rating, new_time, user_id))
    conn.commit()
    conn.close()

def get_top_users():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É."""
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT username, rating FROM users ORDER BY rating DESC LIMIT 10")
    top_users = cursor.fetchall()
    conn.close()
    return top_users

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message_handler(CommandStart())
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    add_new_user(user_id, username)
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ü–∏–≤–æ-–±–æ—Ç. –ù–∞–±–µ—Ä–∏ /beer, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É, –∏–ª–∏ /top, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤!"
    )

@dp.message_handler(commands=['beer'])
async def cmd_beer(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /beer."""
    user_id = message.from_user.id
    user = get_user(user_id)

    if not user:
        add_new_user(user_id, message.from_user.username or message.from_user.full_name)
        user = get_user(user_id)

    _, _, current_rating, last_beer_time = user
    current_time = int(time.time())
    
    if current_time - last_beer_time < BEER_COOLDOWN:
        remaining_time = BEER_COOLDOWN - (current_time - last_beer_time)
        hours = remaining_time // 3600
        minutes = (remaining_time % 3600) // 60
        await message.reply(
            f"ü§¨üçª –¢—ã —É–∂–µ –±–∞—Ö–Ω—É–ª –ø–∏–≤–∞! –°–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω."
        )
    else:
        change = random.randint(1, RATING_CHANGE)
        if random.choice([True, False]): # 50% —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö
            new_rating = current_rating + change
            response = f"üòèüçª –¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª! –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—Ä–æ—Å –Ω–∞ +{change}. –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {new_rating}."
        else:
            new_rating = current_rating - change
            response = f"ü§¨üçª –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —Ç–≤–æ—ë –ø–∏–≤–æ! –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É–ø–∞–ª –Ω–∞ -{change}. –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {new_rating}."

        update_user_data(user_id, new_rating, current_time)
        await message.reply(response)

@dp.message_handler(commands=['top'])
async def cmd_top(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top."""
    top_users = get_top_users()
    if not top_users:
        await message.reply("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    top_list = "üèÜ **–¢–æ–ø-10 —Å–∞–º—ã—Ö –∫—Ä—É—Ç—ã—Ö –ø–∏–≤–Ω—ã—Ö –±–æ–≥–æ–≤:** üèÜ\n\n"
    for i, user in enumerate(top_users, 1):
        username, rating = user
        top_list += f"{i}. {username} ‚Äî {rating} üçª\n"

    await message.reply(top_list, parse_mode='Markdown')

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_db()
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
