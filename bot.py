import asyncio
import logging
import sqlite3
import os
import random
import time
from datetime import timedelta

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from dotenv import load_dotenv

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
BOT_TOKEN = os.getenv("6711143584:AAGDrBrQek_q4X2s_iONkQmEafuk-b6SkrM")
DB_FILE = 'beer_game.db'
COOLDOWN_SECONDS = 3 * 60 * 60  # 3 —á–∞—Å–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
router = Router()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT NOT NULL,
            rating INTEGER DEFAULT 0,
            last_beer_time INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    username = message.from_user.full_name

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    user_exists = cursor.fetchone()

    if not user_exists:
        cursor.execute(
            "INSERT INTO users (user_id, username, rating, last_beer_time) VALUES (?, ?, ?, ?)",
            (user_id, username, 0, 0)
        )
        conn.commit()
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä, {username}! üçª\n\n"
            "–ó–¥–µ—Å—å –º—ã —Å–æ—Ä–µ–≤–Ω—É–µ–º—Å—è, –∫—Ç–æ –±–æ–ª—å—à–µ –≤—ã–ø—å–µ—Ç –ø–∏–≤–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /beer, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!\n"
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: /profile\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ª—É—á—à–∏—Ö: /top"
        )
    else:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}! –†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –±–∞—Ä–µ. üçª")

    conn.close()


@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute("SELECT username, rating FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    
    conn.close()
    
    if user_data:
        username, rating = user_data
        await message.answer(
            f"üë§ **–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:**\n\n"
            f"–ò–º—è: **{username}**\n"
            f"–†–µ–π—Ç–∏–Ω–≥: **{rating}** üç∫"
        )
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")


@router.message(Command("beer"))
async def cmd_beer(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /beer. –û—Å–Ω–æ–≤–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞."""
    user_id = message.from_user.id
    current_time = int(time.time())

    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute("SELECT rating, last_beer_time FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()

    if not user_data:
        conn.close()
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    rating, last_beer_time = user_data
    
    time_passed = current_time - last_beer_time
    if time_passed < COOLDOWN_SECONDS:
        time_left = COOLDOWN_SECONDS - time_passed
        time_left_formatted = str(timedelta(seconds=time_left))
        await message.answer(f"–¢—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–∏–ª! ‚è≥\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑: **{time_left_formatted}**")
        conn.close()
        return

    # 50/50 —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö –∏–ª–∏ –Ω–µ—É–¥–∞—á—É
    if random.choice([True, False]):
        # –£—Å–ø–µ—Ö
        rating_change = random.randint(1, 10)
        new_rating = rating + rating_change
        await message.answer(f"üòèüçª –¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª! –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ **+{rating_change}**.")
    else:
        # –ù–µ—É–¥–∞—á–∞
        rating_change = -random.randint(1, 10)
        new_rating = rating + rating_change
        await message.answer(f"ü§¨üçª –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —Ç–≤–æ—ë –ø–∏–≤–æ! –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ **{rating_change}**.")
    
    cursor.execute(
        "UPDATE users SET rating = ?, last_beer_time = ? WHERE user_id = ?",
        (new_rating, current_time, user_id)
    )
    conn.commit()
    conn.close()


@router.message(Command("top"))
async def cmd_top(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()

    cursor.execute("SELECT username, rating FROM users ORDER BY rating DESC LIMIT 10")
    top_users = cursor.fetchall()
    conn.close()

    if not top_users:
        await message.answer("–í –±–∞—Ä–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º! Ïç∞")
        return

    response_text = "üèÜ **–¢–æ–ø-10 –ª—É—á—à–∏—Ö –ø–∏–≤–æ—Ö–ª—ë–±–æ–≤:**\n\n"
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    
    for i, (username, rating) in enumerate(top_users, 1):
        place_icon = medals.get(i, f"**{i}.**")
        response_text += f"{place_icon} {username} ‚Äî **{rating}** üç∫\n"
        
    await message.answer(response_text)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    init_db()  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ë–î –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
