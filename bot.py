# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import asyncio
import logging
import sqlite3
import os
import random
import time
from datetime import datetime, date, timedelta, time as dt_time
import html
import json
from typing import Callable, Dict, Any, Awaitable

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from dotenv import load_dotenv
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from cachetools import TTLCache

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

DB_FILE = '/data/beer_game.db'
COOLDOWN_SECONDS = 3 * 60 * 60
THROTTLE_TIME = 0.5

WIN_CHANCE = 60
LOSE_CHANCE = 40

CARD_DRAW_COST = 15
CARD_COOLDOWN_SECONDS = 2 * 60 * 60

DAILY_BASE_COIN_BONUS = 20
DAILY_BASE_RATING_BONUS = 5
DAILY_STREAK_COIN_BONUSES = [0, 5, 10, 15, 20] 
DAILY_MAX_STREAK_BONUS_INDEX = len(DAILY_STREAK_COIN_BONUSES) - 1

# --- File IDs –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
# !!! –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –†–ï–ê–õ–¨–ù–´–ï FILE_ID –í–ê–®–ò–• –ö–ê–†–¢–ò–ù–û–ö !!!
SUCCESS_IMAGE_ID = "AgACAgIAAxkBAAICvGjMNGhCINSBAeXyX9w0VddF-C8PAAJt8jEbFbVhSmh8gDAZrTCaAQADAgADeQADNgQ" # –ü—Ä–∏–º–µ—Ä
FAIL_IMAGE_ID = "AgACAgIAAxkBAAICwGjMNRAnAAHo1rDMPfaF_HUa0WzxaAACcvIxGxW1YUo5jEQQRkt4kgEAAwIAA3kAAzYE" # –ü—Ä–∏–º–µ—Ä
COOLDOWN_IMAGE_ID = "AgACAgIAAxkBAAICxWjMNXRNIOw6PJstVS2P6oFnW6wHAAJF-TEbLqthShzwv65k4n-MAQADAgADeQADNgQ" # –ü—Ä–∏–º–µ—Ä
TOP_IMAGE_ID = "AgACAgIAAxkBAAICw2jMNUqWi1d-ctjc67_Ryg9uLmBHAAJC-TEbLqthSiv8cCgp6EMnAQADAgADeQADNgQ" # –ü—Ä–∏–º–µ—Ä
DAILY_IMAGE_ID = "–í–ê–®_FILE_ID_–î–õ–Ø_DAILY" # <--- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ –ù–ê –°–í–û–ô!

logging.basicConfig(level=logging.INFO)

CARD_DECK = []

# --- –ê–ù–¢–ò–°–ü–ê–ú MIDDLEWARE ---
class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, throttle_time: float = 0.5):
        self.cache = TTLCache(maxsize=10_000, ttl=throttle_time)

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        user_id = event.from_user.id
        if user_id in self.cache:
            return
        self.cache[user_id] = None
        return await handler(event, data)

router = Router()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT NOT NULL,
            rating INTEGER DEFAULT 0,
            coins INTEGER DEFAULT 0,
            last_beer_time INTEGER DEFAULT 0,
            last_card_time INTEGER DEFAULT 0,
            last_daily_claim_date TEXT DEFAULT '1970-01-01',
            daily_streak INTEGER DEFAULT 0
        )
    ''')
    conn.commit()

    # --- –í–†–ï–ú–ï–ù–ù–´–ô –ë–õ–û–ö –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–û–õ–û–ù–û–ö (–£–î–ê–õ–ò–¢–¨ –ü–û–°–õ–ï –ü–ï–†–í–û–ì–û –£–°–ü–ï–®–ù–û–ì–û –ó–ê–ü–£–°–ö–ê) ---
    # –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö,
    # –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –±–æ–ª–µ–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π —Å—Ö–µ–º—ã.
    # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è –∏ –∑–∞–ø—É—Å–∫–∞, –∫–æ–≥–¥–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–∏—Ç—Å—è,
    # –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫ `try-except` –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏.
    # –ï—Å–ª–∏ –≤—ã —É–¥–∞–ª—è–ª–∏ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ç–æ —ç—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –ø—É—Å—Ç—å –ø–æ–∫–∞ –ø–æ–±—É–¥–µ—Ç.

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ coins
    try:
        cursor.execute("SELECT coins FROM users LIMIT 1")
    except sqlite3.OperationalError:
        cursor.execute("ALTER TABLE users ADD COLUMN coins INTEGER DEFAULT 0")
        conn.commit()
        logging.info("–ö–æ–ª–æ–Ω–∫–∞ 'coins' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ last_beer_time
    try:
        cursor.execute("SELECT last_beer_time FROM users LIMIT 1")
    except sqlite3.OperationalError:
        cursor.execute("ALTER TABLE users ADD COLUMN last_beer_time INTEGER DEFAULT 0")
        conn.commit()
        logging.info("–ö–æ–ª–æ–Ω–∫–∞ 'last_beer_time' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ last_card_time
    try:
        cursor.execute("SELECT last_card_time FROM users LIMIT 1")
    except sqlite3.OperationalError:
        cursor.execute("ALTER TABLE users ADD COLUMN last_card_time INTEGER DEFAULT 0")
        conn.commit()
        logging.info("–ö–æ–ª–æ–Ω–∫–∞ 'last_card_time' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ last_daily_claim_date
    try:
        cursor.execute("SELECT last_daily_claim_date FROM users LIMIT 1")
    except sqlite3.OperationalError:
        cursor.execute("ALTER TABLE users ADD COLUMN last_daily_claim_date TEXT DEFAULT '1970-01-01'")
        conn.commit()
        logging.info("–ö–æ–ª–æ–Ω–∫–∞ 'last_daily_claim_date' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ daily_streak
    try:
        cursor.execute("SELECT daily_streak FROM users LIMIT 1")
    except sqlite3.OperationalError:
        cursor.execute("ALTER TABLE users ADD COLUMN daily_streak INTEGER DEFAULT 0")
        conn.commit()
        logging.info("–ö–æ–ª–æ–Ω–∫–∞ 'daily_streak' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    # --- –ö–û–ù–ï–¶ –í–†–ï–ú–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---

    conn.close()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

def get_user_data(user_id: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT username, rating, coins, last_beer_time, last_card_time, last_daily_claim_date, daily_streak FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    conn.close()
    return user_data

def add_or_update_user(user_id: int, username: str):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º /start –¥–∞–µ–º 50 –§–∞–Ω–∫–æ–∏–Ω–æ–≤ (–º–æ–ª–Ω–∏–π)
    cursor.execute(
        "INSERT INTO users (user_id, username, coins) VALUES (?, ?, ?) ON CONFLICT(user_id) DO UPDATE SET username = EXCLUDED.username",
        (user_id, username, 50) 
    )
    conn.commit()
    conn.close()

def update_user_beer_data(user_id: int, new_rating: int, new_coins: int, current_time: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET rating = ?, coins = ?, last_beer_time = ? WHERE user_id = ?",
        (new_rating, new_coins, current_time, user_id)
    )
    conn.commit()
    conn.close()

def update_user_card_data(user_id: int, new_rating: int, new_coins: int, current_time: int, beer_cooldown_reset: bool = False):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    if beer_cooldown_reset:
        cursor.execute(
            "UPDATE users SET rating = ?, coins = ?, last_card_time = ?, last_beer_time = 0 WHERE user_id = ?",
            (new_rating, new_coins, current_time, user_id)
        )
    else:
        cursor.execute(
            "UPDATE users SET rating = ?, coins = ?, last_card_time = ? WHERE user_id = ?",
            (new_rating, new_coins, current_time, user_id)
        )
    conn.commit()
    conn.close()

def update_user_daily_data(user_id: int, new_rating: int, new_coins: int, current_date_str: str, new_streak: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET rating = ?, coins = ?, last_daily_claim_date = ?, daily_streak = ? WHERE user_id = ?",
        (new_rating, new_coins, current_date_str, new_streak, user_id)
    )
    conn.commit()
    conn.close()

def update_other_user_coins(user_id: int, coin_change: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET coins = coins + ? WHERE user_id = ?",
        (coin_change, user_id)
    )
    conn.commit()
    conn.close()

def get_top_users(limit: int = 10):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT username, rating FROM users ORDER BY rating DESC LIMIT ?", (limit,))
    top_users = cursor.fetchall()
    conn.close()
    return top_users

def load_card_deck():
    try:
        with open('cards.json', 'r', encoding='utf-8') as f:
            logging.info("–ö–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return json.load(f)
    except FileNotFoundError:
        logging.error("–§–∞–π–ª cards.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –ö–æ–ª–æ–¥–∞ –±—É–¥–µ—Ç –ø—É—Å—Ç–∞.")
        return []
    except json.JSONDecodeError:
        logging.error("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ cards.json! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JSON.")
        return []

def choose_random_card():
    if not CARD_DECK:
        return None
    weights = [card['weight'] for card in CARD_DECK]
    chosen_card = random.choices(CARD_DECK, weights=weights, k=1)[0]
    return chosen_card

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = html.escape(message.from_user.full_name) 
    user_data = get_user_data(user_id)
    add_or_update_user(user_id, username)
    if user_data:
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {username}! –†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –±–∞—Ä–µ. üçª")
    else:
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä, {username}! üçª\n\n"
            "–ó–¥–µ—Å—å –º—ã —Å–æ—Ä–µ–≤–Ω—É–µ–º—Å—è, –∫—Ç–æ –±–æ–ª—å—à–µ –≤—ã–ø—å–µ—Ç –ø–∏–≤–∞ –∏ –∫—Ç–æ –±–æ–≥–∞—á–µ –Ω–∞ –§–∞–Ω–∫–æ–∏–Ω—ã!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /beer, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É!\n"
            "–ü–æ–ª—É—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: /daily\n"
            "–ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É —Å—É–¥—å–±—ã: /draw_card\n"
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: /profile\n"
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ª—É—á—à–∏—Ö: /top\n"
            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? /help"
        )

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        username, rating, coins, _, _, _, _ = user_data
        await message.answer(
            f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"–ò–º—è: <b>{username}</b>\n"
            f"–†–µ–π—Ç–∏–Ω–≥: <b>{rating}</b> üç∫\n"
            f"–§–∞–Ω–∫–æ–∏–Ω—ã: <b>{coins}</b> ‚ö°", # –ò–ó–ú–ï–ù–ï–ù–û: —ç–º–æ–¥–∑–∏ –¥–ª—è –§–∞–Ω–∫–æ–∏–Ω–æ–≤
            parse_mode="HTML"
        )
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ /start.")

@router.message(Command("beer"))
async def cmd_beer(message: Message):
    user_id = message.from_user.id
    current_time = int(time.time())
    user_data = get_user_data(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return
    username, rating, coins, last_beer_time, _, _, _ = user_data
    time_passed = current_time - last_beer_time
    if time_passed < COOLDOWN_SECONDS:
        time_left = COOLDOWN_SECONDS - time_passed
        time_left_formatted = str(timedelta(seconds=time_left))
        await message.answer_photo(
            photo=COOLDOWN_IMAGE_ID,
            caption=f"–¢—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–∏–ª! ‚è≥\n–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑: <b>{time_left_formatted}</b>",
            parse_mode="HTML"
        )
        return
    roll = random.randint(1, 100)
    rating_change_amount = random.randint(1, 10)
    coin_bonus = random.randint(1, 2)
    new_rating = rating
    new_coins = coins + coin_bonus
    caption_text = ""
    photo_id = ""
    if roll <= WIN_CHANCE:
        new_rating = rating + rating_change_amount
        caption_text = f"üòèüçª –¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª –Ω–∞ <b>+{rating_change_amount}</b> üç∫ –ø–∏–≤–∞! –ü–æ–ª—É—á–∞–µ—à—å <b>+{coin_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤!" # –ò–ó–ú–ï–ù–ï–ù–û: —ç–º–æ–¥–∑–∏ –¥–ª—è –§–∞–Ω–∫–æ–∏–Ω–æ–≤
        photo_id = SUCCESS_IMAGE_ID
    else:
        potential_new_rating = rating - rating_change_amount
        if potential_new_rating < 0:
            actual_loss = rating
            new_rating = 0
            caption_text = f"ü§¨üçª –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —É —Ç–µ–±—è –≤—Å–µ <b>{actual_loss}</b> üç∫ –ø–∏–≤–∞! –¢—ã –Ω–∞ –Ω—É–ª–µ, –Ω–æ –ø–æ–ª—É—á–∞–µ—à—å <b>+{coin_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤." # –ò–ó–ú–ï–ù–ï–ù–û: —ç–º–æ–¥–∑–∏ –¥–ª—è –§–∞–Ω–∫–æ–∏–Ω–æ–≤
        else:
            actual_loss = rating_change_amount
            new_rating = potential_new_rating
            caption_text = f"ü§¨üçª –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —É —Ç–µ–±—è <b>{actual_loss}</b> üç∫ –ø–∏–≤–∞, –Ω–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—à—å <b>+{coin_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤!" # –ò–ó–ú–ï–ù–ï–ù–û: —ç–º–æ–¥–∑–∏ –¥–ª—è –§–∞–Ω–∫–æ–∏–Ω–æ–≤
        photo_id = FAIL_IMAGE_ID
    update_user_beer_data(user_id, new_rating, new_coins, current_time)
    await message.answer_photo(photo=photo_id, caption=caption_text, parse_mode="HTML")

@router.message(Command("daily"))
async def cmd_daily(message: Message):
    user_id = message.from_user.id
    current_date = date.today()
    current_date_str = current_date.isoformat()
    user_data = get_user_data(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return
    username, rating, coins, _, _, last_daily_claim_date, daily_streak = user_data
    if last_daily_claim_date == current_date_str:
        next_day = current_date + timedelta(days=1)
        time_until_midnight = datetime.combine(next_day, dt_time.min) - datetime.now()
        hours, remainder = divmod(int(time_until_midnight.total_seconds()), 3600)
        minutes, _ = divmod(remainder, 60)
        time_left_formatted = f"{hours}—á {minutes}–º"
        await message.answer_photo(
            photo=COOLDOWN_IMAGE_ID,
            caption=f"‚è∞ **–†–∞–Ω–æ–≤–∞—Ç–æ!** –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≤—Ç—Ä–∞. –û—Å—Ç–∞–ª–æ—Å—å: <b>{time_left_formatted}</b>",
            parse_mode="HTML"
        )
        return
    if last_daily_claim_date == (current_date - timedelta(days=1)).isoformat():
        new_streak = daily_streak + 1
    else:
        new_streak = 1
    streak_bonus_index = min(new_streak - 1, DAILY_MAX_STREAK_BONUS_INDEX)
    bonus_coins = DAILY_BASE_COIN_BONUS + DAILY_STREAK_COIN_BONUSES[streak_bonus_index]
    bonus_rating = DAILY_BASE_RATING_BONUS
    new_coins = coins + bonus_coins
    new_rating = rating + bonus_rating
    update_user_daily_data(user_id, new_rating, new_coins, current_date_str, new_streak)
    caption_text = f"üéâ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!** –¢—ã –ø–æ–ª—É—á–∏–ª <b>+{bonus_coins}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –∏ <b>+{bonus_rating}</b> üç∫ —Ä–µ–π—Ç–∏–Ω–≥–∞!" # –ò–ó–ú–ï–ù–ï–ù–û: —ç–º–æ–¥–∑–∏ –¥–ª—è –§–∞–Ω–∫–æ–∏–Ω–æ–≤
    if new_streak > 1:
        caption_text += f"\n–¢–≤–æ–π —Å—Ç—Ä–∏–∫: <b>{new_streak} –¥–Ω–µ–π</b> (+{DAILY_STREAK_COIN_BONUSES[streak_bonus_index]} ‚ö° –∑–∞ —Å–µ—Ä–∏—é)!" # –ò–ó–ú–ï–ù–ï–ù–û: —ç–º–æ–¥–∑–∏ –¥–ª—è –§–∞–Ω–∫–æ–∏–Ω–æ–≤
    await message.answer_photo(photo=DAILY_IMAGE_ID, caption=caption_text, parse_mode="HTML")

@router.message(Command("draw_card"))
async def cmd_draw_card(message: Message):
    user_id = message.from_user.id
    current_time = int(time.time())
    user_data = get_user_data(user_id)
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return
    username, rating, coins, _, last_card_time, _, _ = user_data
    time_passed = current_time - last_card_time
    if time_passed < CARD_COOLDOWN_SECONDS:
        time_left = CARD_COOLDOWN_SECONDS - time_passed
        time_left_formatted = str(timedelta(seconds=time_left))
        await message.answer_photo(
            photo=COOLDOWN_IMAGE_ID,
            caption=f"–ö–æ–ª–æ–¥–∞ –µ—â—ë –Ω–µ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞! ‚è≥\n–ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ç—è–Ω—É—Ç—å –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑: <b>{time_left_formatted}</b>",
            parse_mode="HTML"
        )
        return
    if coins < CARD_DRAW_COST:
        await message.answer(
            f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –§–∞–Ω–∫–æ–∏–Ω–æ–≤! üòî –î–ª—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω—É–∂–Ω–æ <b>{CARD_DRAW_COST}</b> ‚ö°, –∞ —É —Ç–µ–±—è —Ç–æ–ª—å–∫–æ <b>{coins}</b> ‚ö°.", # –ò–ó–ú–ï–ù–ï–ù–û: —ç–º–æ–¥–∑–∏ –¥–ª—è –§–∞–Ω–∫–æ–∏–Ω–æ–≤
            parse_mode="HTML"
        )
        return
    new_coins = coins - CARD_DRAW_COST
    new_rating = rating
    chosen_card = choose_random_card()
    if not chosen_card:
        await message.answer("–û—à–∏–±–∫–∞: –ö–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logging.error("CARD_DECK is empty or not loaded.")
        return
    card_name = chosen_card['name']
    card_description = chosen_card['description']
    card_image_id = chosen_card['image_id']
    effects = chosen_card['effects']
    rating_change = random.randint(effects.get('rating_change_min', 0), effects.get('rating_change_max', 0))
    coin_change = random.randint(effects.get('coin_change_min', 0), effects.get('coin_change_max', 0))
    new_rating = max(0, new_rating + rating_change)
    new_coins = max(0, new_coins + coin_change)
    beer_cooldown_reset = effects.get('cooldown_reset_beer', False)
    target_other_coin_change = effects.get('target_other_coin_change', 0)
    final_description = card_description
    if target_other_coin_change > 0:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users WHERE user_id != ? ORDER BY RANDOM() LIMIT 1", (user_id,))
        other_user_id_tuple = cursor.fetchone()
        conn.close()
        if other_user_id_tuple:
            other_user_id = other_user_id_tuple[0]
            update_other_user_coins(other_user_id, target_other_coin_change)
            try:
                other_user_data = get_user_data(other_user_id)
                if other_user_data:
                    other_username = html.escape(other_user_data[0])
                    await bot.send_message(
                        other_user_id,
                        f"üéâ **–°—é—Ä–ø—Ä–∏–∑!** –ò–≥—Ä–æ–∫ <b>{username}</b> –±—ã–ª —Å–µ–≥–æ–¥–Ω—è —â–µ–¥—Ä –∏ —É–≥–æ—Å—Ç–∏–ª —Ç–µ–±—è <b>+{target_other_coin_change}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤!", # –ò–ó–ú–ï–ù–ï–ù–û: —ç–º–æ–¥–∑–∏ –¥–ª—è –§–∞–Ω–∫–æ–∏–Ω–æ–≤
                        parse_mode="HTML"
                    )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É {other_user_id}: {e}")
        else:
            final_description += "\n(–ù–æ –Ω–∏–∫–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –≤ –±–∞—Ä–µ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ–±—ã —É–≥–æ—Å—Ç–∏—Ç—å!)"
            new_coins -= coin_change
            new_rating = max(0, new_rating - rating_change)
    if '%d' in card_description:
        description_args = []
        try:
            if chosen_card['id'] == 'generous_neighbor':
                description_args = [abs(effects['coin_change_min']), abs(effects['rating_change_min']), target_other_coin_change]
            elif chosen_card['id'] == 'empty_glass':
                description_args = [CARD_DRAW_COST]
            else:
                if effects.get('rating_change_min') != 0 or effects.get('rating_change_max') != 0:
                    description_args.append(abs(rating_change))
                if effects.get('coin_change_min') != 0 or effects.get('coin_change_max') != 0:
                    description_args.append(abs(coin_change))
            final_description = card_description % tuple(description_args)
        except (TypeError, IndexError) as e:
            logging.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã {card_name}: {e}")
    update_user_card_data(user_id, new_rating, new_coins, current_time, beer_cooldown_reset)
    caption_message = (
        f"üÉè **–¢—ã –≤—ã—Ç—è–Ω—É–ª –∫–∞—Ä—Ç—É: '{card_name}'** üÉè\n\n"
        f"{final_description}\n\n"
        f"–¢–≤–æ–π –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{new_rating}</b> üç∫\n"
        f"–¢–≤–æ–∏ –Ω–æ–≤—ã–µ –§–∞–Ω–∫–æ–∏–Ω—ã: <b>{new_coins}</b> ‚ö°" # –ò–ó–ú–ï–ù–ï–ù–û: —ç–º–æ–¥–∑–∏ –¥–ª—è –§–∞–Ω–∫–æ–∏–Ω–æ–≤
    )
    await message.answer_photo(photo=card_image_id, caption=caption_message, parse_mode="HTML")

@router.message(Command("top"))
async def cmd_top(message: Message):
    top_users = get_top_users()
    if not top_users:
        await message.answer("–í –±–∞—Ä–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º! üçª")
        return
    response_text = "üèÜ <b>–¢–æ–ø-10 –ª—É—á—à–∏—Ö –ø–∏–≤–æ—Ö–ª—ë–±–æ–≤:</b>\n\n"
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    for i, (username, rating) in enumerate(top_users, 1):
        place_icon = medals.get(i, f"<b>{i}.</b>")
        response_text += f"{place_icon} {username} ‚Äî <b>{rating}</b> üç∫\n"
    await message.answer_photo(
        photo=TOP_IMAGE_ID,
        caption=response_text,
        parse_mode="HTML"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "<b>üçª –ü—Ä–∞–≤–∏–ª–∞ –ò–≥—Ä—ã –≤ –ü–∏–≤–Ω–æ–º –ë–∞—Ä–µ üçª</b>\n\n"
        "–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞, –≥–¥–µ —Ç—ã —Å–æ—Ä–µ–≤–Ω—É–µ—à—å—Å—è –∑–∞ —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø–∏–≤–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ø–∏—à—å –§–∞–Ω–∫–æ–∏–Ω—ã!\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å)\n"
        "/beer - –ò—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –∏ –ø–æ–ª—É—á–∏—Ç—å (–∏–ª–∏ –ø–æ—Ç–µ—Ä—è—Ç—å) –ø–∏–≤–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥. –ö—É–ª–¥–∞—É–Ω: 3 —á–∞—Å–∞. –î–∞—ë—Ç –§–∞–Ω–∫–æ–∏–Ω—ã.\n"
        "/daily - –ü–æ–ª—É—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ï—Å—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ —Å–µ—Ä–∏—é!\n"
        "/draw_card - –í—ã—Ç—è–Ω–∏ –∫–∞—Ä—Ç—É —Å—É–¥—å–±—ã –∑–∞ –§–∞–Ω–∫–æ–∏–Ω—ã! –ö—É–ª–¥–∞—É–Ω: 2 —á–∞—Å–∞.\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –§–∞–Ω–∫–æ–∏–Ω–æ–≤.\n"
        "/top - –£–≤–∏–¥–µ—Ç—å 10 –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–∏–≤–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    await message.answer(help_text, parse_mode="HTML")

# --- –í–†–ï–ú–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø FILE_ID ---
# !!! –ü–û–°–õ–ï –¢–û–ì–û, –ö–ê–ö –ü–û–õ–£–ß–ò–¢–ï –í–°–ï FILE_ID, –£–î–ê–õ–ò–¢–ï –í–ï–°–¨ –≠–¢–û–¢ –ë–õ–û–ö !!!
@router.message(F.photo)
async def get_photo_id(message: Message):
    if message.photo:
        file_id = message.photo[-1].file_id # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        await message.answer(f"FILE_ID —ç—Ç–æ–≥–æ —Ñ–æ—Ç–æ:\n`{file_id}`\n\n–ù–µ –∑–∞–±—É–¥—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö ID!", parse_mode="Markdown")
        logging.info(f"Received photo FILE_ID: {file_id}")
# --- –ö–û–ù–ï–¶ –í–†–ï–ú–ï–ù–ù–û–ì–û –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê ---


async def main():
    global CARD_DECK
    init_db()
    CARD_DECK = load_card_deck()
    
    router.message.middleware(ThrottlingMiddleware(throttle_time=THROTTLE_TIME))
    
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
