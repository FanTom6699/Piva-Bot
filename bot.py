import logging
import random
import time

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.builtin import CommandStart

from config import TOKEN, BEER_COOLDOWN, RATING_CHANGE
import db_manager as db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message_handler(CommandStart())
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    await db.add_new_user(user_id, username)
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ü–∏–≤–æ-–±–æ—Ç. –ù–∞–±–µ—Ä–∏ /beer, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É, –∏–ª–∏ /top, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤!"
    )

@dp.message_handler(commands=['beer'])
async def cmd_beer(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /beer."""
    user_id = message.from_user.id
    user = await db.get_user(user_id)

    if not user:
        await db.add_new_user(user_id, message.from_user.username or message.from_user.full_name)
        user = await db.get_user(user_id) # –°–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

    if user: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        _, _, current_rating, last_beer_time = user
        current_time = int(time.time())
        
        if current_time - last_beer_time < BEER_COOLDOWN:
            remaining_time = BEER_COOLDOWN - (current_time - last_beer_time)
            hours = remaining_time // 3600
            minutes = (remaining_time % 3600) // 60
            await message.reply(
                f"ü§¨üçª –¢—ã —É–∂–µ –±–∞—Ö–Ω—É–ª –ø–∏–≤–∞! –°–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ {hours} —á. {minutes} –º–∏–Ω."
            )
        else:
            change = random.randint(1, RATING_CHANGE)
            if random.choice([True, False]): # 50% —à–∞–Ω—Å –Ω–∞ —É—Å–ø–µ—Ö
                new_rating = current_rating + change
                response = f"üòèüçª –¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª! –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—Ä–æ—Å –Ω–∞ +{change}. –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {new_rating}."
            else:
                new_rating = current_rating - change
                response = f"ü§¨üçª –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —Ç–≤–æ—ë –ø–∏–≤–æ! –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —É–ø–∞–ª –Ω–∞ -{change}. –¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {new_rating}."

            await db.update_user_data(user_id, new_rating, current_time)
            await message.reply(response)
    else:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        logger.error(f"User {user_id} not found after add_new_user attempt.")


@dp.message_handler(commands=['top'])
async def cmd_top(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /top."""
    top_users = await db.get_top_users()
    if not top_users:
        await message.reply("–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    top_list = "üèÜ **–¢–æ–ø-10 —Å–∞–º—ã—Ö –∫—Ä—É—Ç—ã—Ö –ø–∏–≤–Ω—ã—Ö –±–æ–≥–æ–≤:** üèÜ\n\n"
    for i, user_data in enumerate(top_users, 1):
        username, rating = user_data
        top_list += f"{i}. {username} ‚Äî {rating} üçª\n"

    await message.reply(top_list, parse_mode='Markdown')

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

async def on_startup(dp):
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    logger.info("Bot is starting...")
    await db.init_db()
    logger.info("Database is ready.")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
