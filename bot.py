# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import asyncio
import logging
import sqlite3
import os
import random
import time
from datetime import datetime, date, timedelta, time as dt_time
import html
import json
from typing import Callable, Dict, Any, Awaitable

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from dotenv import load_dotenv
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from cachetools import TTLCache
# –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ parse_mode
from aiogram.client.default import DefaultBotProperties 

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

DB_FILE = '/data/beer_game.db' # –ü—É—Ç—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render
COOLDOWN_SECONDS = 3 * 60 * 60 # 3 —á–∞—Å–∞
THROTTLE_TIME = 0.5 # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞

WIN_CHANCE = 60 # –®–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à –≤ /beer
LOSE_CHANCE = 40 # –®–∞–Ω—Å –Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à –≤ /beer

CARD_DRAW_COST = 15 # –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
CARD_COOLDOWN_SECONDS = 2 * 60 * 60 # 2 —á–∞—Å–∞

DAILY_BASE_COIN_BONUS = 20
DAILY_BASE_RATING_BONUS = 5
DAILY_STREAK_COIN_BONUSES = [0, 5, 10, 15, 20] # –ë–æ–Ω—É—Å—ã –∑–∞ —Å—Ç—Ä–∏–∫ –Ω–∞ 1-–π, 2-–π, 3-–π, 4-–π, 5-–π+ –¥–µ–Ω—å
DAILY_MAX_STREAK_BONUS_INDEX = len(DAILY_STREAK_COIN_BONUSES) - 1

# --- File IDs –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø –ù–ê –í–ê–®–ò –†–ï–ê–õ–¨–ù–´–ï ID!) ---
# –≠—Ç–∏ ID –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–∞–º–∏:
SUCCESS_IMAGE_ID = "AgACAgIAAxkBAAICvGjMNGhCINSBAeXyX9w0VddF-C8PAAJt8jEbFbVhSmh8gDAZrTCaAQADAgADeQADNgQ"
FAIL_IMAGE_ID = "AgACAgIAAxkBAAICwGjMNRAnAAHo1rDMPfaF_HUa0WzxaAACcvIxGxW1YUo5jEQQRkt4kgEAAwIAA3kAAzYE"
COOLDOWN_IMAGE_ID = "AgACAgIAAxkBAAID_GjPwr33gJU7xnYbc4VufhMAAWGCoAACqPwxG4FHeEqN8kfzsDpZzAEAAwIAA3kAAzYE" # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—â–µ–≥–æ –∫—É–ª–¥—É–Ω–∞, –≤ —Ç.—á. –∫–∞—Ä—Ç
TOP_IMAGE_ID = "AgACAgIAAxkBAAICw2jMNUqWi1d-ctjc67_Ryg9uLmBHAAJC-TEbLqthSiv8cCgp6EMnAQADAgADeQADNgQ"
DAILY_IMAGE_ID = "AgACAgIAAxkBAAIENWjQ2ydocTVaTVwK0-UaoC16BYYHAAK19TEbCquJSskLa9vxP-DLAQADAgADeQADNgQ"
# –ï—Å–ª–∏ –¥–ª—è –∫–∞—Ä—Ç –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ ID, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å—é–¥–∞ –∏ –≤ cards.json


# --- –§—Ä–∞–∑—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è) ---
BEER_WIN_PHRASES = [
    "ü•≥üçª –¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª –Ω–∞ <b>+{rating_change}</b> üç∫! –ü–æ–ª—É—á–∞–µ—à—å <b>+{coins_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤!",
    "üéâüçª –û—Ç–ª–∏—á–Ω—ã–π –≥–ª–æ—Ç–æ–∫! –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—Ä–æ—Å –Ω–∞ <b>+{rating_change}</b> üç∫, –∏ —Ç—ã –Ω–∞—à–µ–ª <b>+{coins_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –≤ –∫–∞—Ä–º–∞–Ω–µ!",
    "üòåüçª –£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! –¢—ã –≤—ã–ø–∏–ª +<b>{rating_change}</b> üç∫, –∏ —Ç–µ–±–µ –¥–∞—é—Ç <b>+{coins_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –∑–∞ –æ—Ç–≤–∞–≥—É!",
    "üåüüçª –ü–æ–±–µ–¥–∞! –ë–∞—Ä–º–µ–Ω –Ω–∞–ª–∏–ª —Ç–µ–±–µ +<b>{rating_change}</b> üç∫, –∏ —Ç—ã –ø–æ–ª—É—á–∏–ª <b>+{coins_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤!",
]

BEER_LOSE_PHRASES_RATING = [
    "üò≠üíî –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —É —Ç–µ–±—è <b>{rating_loss}</b> üç∫, –Ω–æ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—à—å <b>+{coins_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤!",
    "üòñüçª –ù–µ—É–¥–∞—á–∞! –¢—ã –ø—Ä–æ–ª–∏–ª <b>{rating_loss}</b> üç∫ —Ä–µ–π—Ç–∏–Ω–≥–∞, –Ω–æ –∑–∞ —Å—Ç–æ–π–∫–æ—Å—Ç—å –¥–µ—Ä–∂–∏ <b>+{coins_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤!",
    "üò°üçª –û–±–∏–¥–Ω–æ! <b>{rating_loss}</b> üç∫ –∏—Å–ø–∞—Ä–∏–ª–æ—Å—å, –Ω–æ <b>+{coins_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –≤—Å—ë-—Ç–∞–∫–∏ —Ç–≤–æ–∏!",
]

BEER_LOSE_PHRASES_ZERO = [
    "üò≠üíî –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —É —Ç–µ–±—è –≤—Å–µ <b>{rating_loss}</b> üç∫! –¢—ã –Ω–∞ –Ω—É–ª–µ, –Ω–æ –ø–æ–ª—É—á–∞–µ—à—å <b>+{coins_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤!",
    "üòñüçª –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª! –í–µ—Å—å —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ (<b>{rating_loss}</b> üç∫) –æ–±–Ω—É–ª–∏–ª—Å—è, –Ω–æ –≤–æ—Ç —Ç–µ–±–µ <b>+{coins_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –∑–∞ –ø–æ–ø—ã—Ç–∫—É!",
    "üò°üçª –ö–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞! –í—Å–µ <b>{rating_loss}</b> üç∫ –∏—Å—á–µ–∑–ª–∏, –Ω–æ –¥–µ—Ä–∂–∏ <b>+{coins_bonus}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –¥—É—Ö–∞!",
]

DAILY_CLAIM_PHRASES = [
    "üéâ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å!</b> –¢—ã –ø–æ–ª—É—á–∏–ª <b>+{coins}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –∏ <b>+{rating}</b> üç∫ —Ä–µ–π—Ç–∏–Ω–≥–∞!",
    "üåü <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ (–∏–ª–∏ –¥–µ–Ω—å)!</b> –¢–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø–∞—Å: <b>+{coins}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –∏ <b>+{rating}</b> üç∫ —Ä–µ–π—Ç–∏–Ω–≥–∞!",
    "üéÅ <b>–ü–æ–¥–∞—Ä–æ–∫ –¥–Ω—è!</b> –°–µ–≥–æ–¥–Ω—è —Ç—ã –±–æ–≥–∞—Ç –Ω–∞ <b>+{coins}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –∏ <b>+{rating}</b> üç∫ —Ä–µ–π—Ç–∏–Ω–≥–∞!",
    "ü•≥ <b>–ë–æ–Ω—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b> –¢–≤–æ–∏ <b>+{coins}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –∏ <b>+{rating}</b> üç∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ —É–∂–µ –∂–¥—É—Ç!",
]


logging.basicConfig(level=logging.INFO)

CARD_DECK = [] # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç

# --- –ê–ù–¢–ò–°–ü–ê–ú MIDDLEWARE ---
class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, throttle_time: float = 0.5):
        self.cache = TTLCache(maxsize=10_000, ttl=throttle_time)

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        user_id = event.from_user.id
        if user_id in self.cache:
            return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫—ç—à–µ —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥–∞
        self.cache[user_id] = None # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à
        return await handler(event, data)

router = Router()
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏ parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
default_properties = DefaultBotProperties(parse_mode="HTML") 
bot = Bot(token=BOT_TOKEN, default=default_properties) 
dp = Dispatcher()

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT NOT NULL,
            rating INTEGER DEFAULT 0,
            coins INTEGER DEFAULT 0,
            last_beer_time INTEGER DEFAULT 0,
            last_card_time INTEGER DEFAULT 0,
            last_daily_claim_date TEXT DEFAULT '1970-01-01',
            daily_streak INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

def get_user_data(user_id: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT username, rating, coins, last_beer_time, last_card_time, last_daily_claim_date, daily_streak FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    conn.close()
    return user_data

def add_or_update_user(user_id: int, username: str):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    # –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–∞–µ–º 50 –º–æ–Ω–µ—Ç
    cursor.execute(
        "INSERT INTO users (user_id, username, coins) VALUES (?, ?, ?) ON CONFLICT(user_id) DO UPDATE SET username = EXCLUDED.username",
        (user_id, username, 50) 
    )
    conn.commit()
    conn.close()

def update_user_beer_data(user_id: int, new_rating: int, new_coins: int, current_time: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET rating = ?, coins = ?, last_beer_time = ? WHERE user_id = ?",
        (new_rating, new_coins, current_time, user_id)
    )
    conn.commit()
    conn.close()

def update_user_card_data(user_id: int, new_rating: int, new_coins: int, current_time: int, beer_cooldown_reset: bool = False):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    if beer_cooldown_reset:
        cursor.execute(
            "UPDATE users SET rating = ?, coins = ?, last_card_time = ?, last_beer_time = 0 WHERE user_id = ?",
            (new_rating, new_coins, current_time, user_id)
        )
    else:
        cursor.execute(
            "UPDATE users SET rating = ?, coins = ?, last_card_time = ? WHERE user_id = ?",
            (new_rating, new_coins, current_time, user_id)
        )
    conn.commit()
    conn.close()

def update_user_daily_data(user_id: int, new_rating: int, new_coins: int, current_date_str: str, new_streak: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET rating = ?, coins = ?, last_daily_claim_date = ?, daily_streak = ? WHERE user_id = ?",
        (new_rating, new_coins, current_date_str, new_streak, user_id)
    )
    conn.commit()
    conn.close()

def update_other_user_coins(user_id: int, coin_change: int):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET coins = coins + ? WHERE user_id = ?",
        (coin_change, user_id)
    )
    conn.commit()
    conn.close()

def get_top_users(limit: int = 10):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT username, rating FROM users ORDER BY rating DESC LIMIT ?", (limit,))
    top_users = cursor.fetchall()
    conn.close()
    return top_users

def load_card_deck():
    try:
        with open('cards.json', 'r', encoding='utf-8') as f:
            logging.info("–ö–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return json.load(f)
    except FileNotFoundError:
        logging.error("–§–∞–π–ª cards.json –Ω–µ –Ω–∞–π–¥–µ–Ω! –ö–æ–ª–æ–¥–∞ –±—É–¥–µ—Ç –ø—É—Å—Ç–∞.")
        return []
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ cards.json! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å JSON: {e}")
        return []

def choose_random_card():
    if not CARD_DECK:
        return None
    weights = [card['weight'] for card in CARD_DECK]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º random.choices –¥–ª—è –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    chosen_card = random.choices(CARD_DECK, weights=weights, k=1)[0]
    return chosen_card

# --- Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
class UserRegistrationMiddleware(BaseMiddleware):
    async def __call__(self, handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]], event: Message, data: Dict[str, Any]) -> Any:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–ª–±—ç–∫)
        if not isinstance(event, Message):
            return await handler(event, data)

        user_id = event.from_user.id
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        if event.text and event.text.startswith('/start'):
            return await handler(event, data)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ FILE_ID, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–ª
        if event.photo: 
             return await handler(event, data)

        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
        user_exists = cursor.fetchone()
        conn.close()

        if not user_exists:
            await event.answer("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start.")
            return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

        return await handler(event, data)

dp.message.middleware(UserRegistrationMiddleware())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = html.escape(message.from_user.full_name) # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è HTML –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    user_data = get_user_data(user_id) # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    add_or_update_user(user_id, username) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    welcome_message = ""
    if user_data:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä–Ω—É–≤—à–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        welcome_message = (
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ –±–∞—Ä, <b>{username}</b>!\n\n"
            "–†–∞–¥—ã —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å. –í–æ—Ç —á–µ–º –º–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è:"
        )
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        welcome_message = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞—Ä, <b>{username}</b>! üçª\n\n"
            "–ó–¥–µ—Å—å –º—ã —Å–æ—Ä–µ–≤–Ω—É–µ–º—Å—è, –∫—Ç–æ –±–æ–ª—å—à–µ –≤—ã–ø—å–µ—Ç –ø–∏–≤–∞ –∏ –∫—Ç–æ –±–æ–≥–∞—á–µ –Ω–∞ –§–∞–Ω–∫–æ–∏–Ω—ã!"
        )

    menu_text = (
        "\n\nüöÄ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üî∏ /beer - –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –∏ –ø–æ–ª—É—á–∏ —Ä–µ–π—Ç–∏–Ω–≥/–§–∞–Ω–∫–æ–∏–Ω—ã.\n"
        "üî∏ /daily - –ü–æ–ª—É—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å.\n"
        "üî∏ /draw_card - –í—ã—Ç—è–Ω–∏ –∫–∞—Ä—Ç—É —Å—É–¥—å–±—ã –∑–∞ –§–∞–Ω–∫–æ–∏–Ω—ã.\n"
        "üî∏ /profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "üî∏ /top - –£–≤–∏–¥–µ—Ç—å 10 –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.\n"
        "üî∏ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "üî∏ /menu - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é —Å–Ω–æ–≤–∞."
    )
    
    await message.answer(welcome_message + menu_text) # parse_mode="HTML" —É–∂–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

@router.message(Command("menu"))
async def cmd_menu(message: Message):
    # –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É /start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é, –Ω–æ –±–µ–∑ –ª–æ–≥–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user_id = message.from_user.id
    username = html.escape(message.from_user.full_name)
    
    menu_text = (
        f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {username}!</b> ‚ú®\n\n"
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö –ø–æ –§–∞–Ω–¥–æ–º–∏—é:\n\n"
        "üöÄ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üî∏ /beer - –ó–∞–∫–∞–∂–∏ –∫—Ä—É–∂–∫—É –ø–∏–≤–∞ –∏ –ø–æ–ª—É—á–∏ –§–∞–Ω–∫–æ–∏–Ω—ã! –ö—Ç–æ –∑–Ω–∞–µ—Ç, –º–æ–∂–µ—Ç, –ø–æ–ø–∞–¥–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ?\n"
        "üî∏ /daily - –ü–æ–ª—É—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å—Ç—Ä–∏–∫!\n"
        "üî∏ /draw_card - –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –∏ –≤—ã—Ç—è–Ω–∏ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã!\n"
        "üî∏ /profile - –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥.\n"
        "üî∏ /top - –£–∑–Ω–∞–π, –∫—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –ø–æ—á–µ—Ç–Ω–æ–µ –º–µ—Å—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤ –§–∞–Ω–¥–æ–º–∏—è.\n"
        "üî∏ /help - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã.\n"
        "üî∏ /menu - –û—Ç–∫—Ä–æ–π —ç—Ç–æ –º–µ–Ω—é —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –≤—Å–ø–æ–º–Ω–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
        "<i>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É!</i>"
    )
    await message.answer(menu_text)


@router.message(Command("profile"))
async def cmd_profile(message: Message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    # –ë–ª–∞–≥–æ–¥–∞—Ä—è middleware, user_data –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∑–¥–µ—Å—å, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç
    if user_data:
        username, rating, coins, _, _, _, _ = user_data
        await message.answer(
            f"üåü <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, {html.escape(username)}:</b> üåü\n"
            "------------------------------------\n"
            f"üî∏ <b>–†–µ–π—Ç–∏–Ω–≥:</b> <b>{rating}</b> üç∫\n"
            f"üî∏ <b>–§–∞–Ω–∫–æ–∏–Ω—ã:</b> <b>{coins}</b> ‚ö°\n"
            "------------------------------------"
        )
    else:
        await message.answer("–¢—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ /start.")

@router.message(Command("beer"))
async def cmd_beer(message: Message):
    user_id = message.from_user.id
    current_time = int(time.time())
    user_data = get_user_data(user_id) # user_data –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—è middleware
    
    _, rating, coins, last_beer_time, _, _, _ = user_data
    time_passed = current_time - last_beer_time

    if time_passed < COOLDOWN_SECONDS:
        time_left = COOLDOWN_SECONDS - time_passed
        time_left_formatted = str(timedelta(seconds=time_left)).split('.')[0] # –£–±–∏—Ä–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
        await message.answer_photo(
            photo=COOLDOWN_IMAGE_ID,
            caption=f"‚åõ –¢—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–∏–ª! üçª\n"
                    f"–í–µ—Ä–Ω–∏—Å—å –≤ –±–∞—Ä —á–µ—Ä–µ–∑: <b>{time_left_formatted}</b>",
        )
        return
    
    roll = random.randint(1, 100)
    rating_change_amount = random.randint(1, 10)
    coin_bonus = random.randint(1, 2) # –ë–æ–Ω—É—Å –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
    
    new_rating = rating
    new_coins = coins + coin_bonus
    caption_text = ""
    photo_id = ""

    if roll <= WIN_CHANCE:
        new_rating = rating + rating_change_amount
        caption_text = random.choice(BEER_WIN_PHRASES).format(rating_change=rating_change_amount, coins_bonus=coin_bonus)
        photo_id = SUCCESS_IMAGE_ID
    else: # –ü—Ä–æ–∏–≥—Ä—ã—à
        potential_new_rating = rating - rating_change_amount
        if potential_new_rating < 0:
            actual_loss = rating # –¢–µ—Ä—è–µ–º –≤–µ—Å—å —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ 0
            new_rating = 0
            caption_text = random.choice(BEER_LOSE_PHRASES_ZERO).format(rating_loss=actual_loss, coins_bonus=coin_bonus)
        else:
            actual_loss = rating_change_amount
            new_rating = potential_new_rating
            caption_text = random.choice(BEER_LOSE_PHRASES_RATING).format(rating_loss=actual_loss, coins_bonus=coin_bonus)
        photo_id = FAIL_IMAGE_ID
    
    update_user_beer_data(user_id, new_rating, new_coins, current_time)
    await message.answer_photo(photo=photo_id, caption=caption_text)


@router.message(Command("daily"))
async def cmd_daily(message: Message):
    user_id = message.from_user.id
    current_date = date.today()
    current_date_str = current_date.isoformat()
    user_data = get_user_data(user_id) # user_data –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—è middleware

    _, rating, coins, _, _, last_daily_claim_date, daily_streak = user_data
    
    if last_daily_claim_date == current_date_str:
        next_day = current_date + timedelta(days=1)
        time_until_midnight = datetime.combine(next_day, dt_time.min) - datetime.now()
        hours, remainder = divmod(int(time_until_midnight.total_seconds()), 3600)
        minutes, _ = divmod(remainder, 60)
        time_left_formatted = f"{hours}—á {minutes}–º"
        await message.answer_photo(
            photo=COOLDOWN_IMAGE_ID, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID –¥–ª—è –∫—É–ª–¥—É–Ω–∞
            caption=f"‚è∞ <b>–†–∞–Ω–æ–≤–∞—Ç–æ!</b> –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≤—Ç—Ä–∞.\n"
                    f"–î–æ –Ω–æ–≤–æ–≥–æ –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: <b>{time_left_formatted}</b>",
        )
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∏–∫–∞
    if last_daily_claim_date == (current_date - timedelta(days=1)).isoformat():
        new_streak = daily_streak + 1
    else:
        new_streak = 1 # –°—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω, –µ—Å–ª–∏ –¥–µ–Ω—å –ø—Ä–æ–ø—É—â–µ–Ω

    streak_bonus_index = min(new_streak - 1, DAILY_MAX_STREAK_BONUS_INDEX)
    bonus_coins = DAILY_BASE_COIN_BONUS + DAILY_STREAK_COIN_BONUSES[streak_bonus_index]
    bonus_rating = DAILY_BASE_RATING_BONUS
    
    new_coins = coins + bonus_coins
    new_rating = rating + bonus_rating
    
    update_user_daily_data(user_id, new_rating, new_coins, current_date_str, new_streak)
    
    caption_text = random.choice(DAILY_CLAIM_PHRASES).format(coins=bonus_coins, rating=bonus_rating)
    if new_streak > 1:
        caption_text += f"\nüî• –¢–≤–æ–π —Å—Ç—Ä–∏–∫: <b>{new_streak} –¥–Ω–µ–π</b> (–ë–æ–Ω—É—Å: <b>+{DAILY_STREAK_COIN_BONUSES[streak_bonus_index]}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤)!"
    
    await message.answer_photo(photo=DAILY_IMAGE_ID, caption=caption_text)

@router.message(Command("draw_card"))
async def cmd_draw_card(message: Message):
    user_id = message.from_user.id
    current_time = int(time.time())
    user_data = get_user_data(user_id) # user_data –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –±–ª–∞–≥–æ–¥–∞—Ä—è middleware

    _, rating, coins, _, last_card_time, _, _ = user_data
    time_passed = current_time - last_card_time

    if time_passed < CARD_COOLDOWN_SECONDS:
        time_left = CARD_COOLDOWN_SECONDS - time_passed
        time_left_formatted = str(timedelta(seconds=time_left)).split('.')[0]
        await message.answer_photo(
            photo=COOLDOWN_IMAGE_ID, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID –¥–ª—è –∫—É–ª–¥—É–Ω–∞ –∫–∞—Ä—Ç
            caption=f"üé¥ <b>–ö–æ–ª–æ–¥–∞ –µ—â—ë –Ω–µ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞!</b> ‚è≥\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π –≤—ã—Ç—è–Ω—É—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑: <b>{time_left_formatted}</b>",
        )
        return

    if coins < CARD_DRAW_COST:
        await message.answer(
            f"‚ö° –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç <b>{CARD_DRAW_COST - coins}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤! –î–ª—è –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω—É–∂–Ω–æ <b>{CARD_DRAW_COST}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤, –∞ —É —Ç–µ–±—è —Ç–æ–ª—å–∫–æ <b>{coins}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤."
        )
        return
    
    new_coins = coins - CARD_DRAW_COST # –°—Ä–∞–∑—É —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç—ã
    new_rating = rating # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç—ã
    
    chosen_card = choose_random_card()
    if not chosen_card:
        await message.answer("–û—à–∏–±–∫–∞: –ö–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logging.error("CARD_DECK is empty or not loaded.")
        return
    
    card_name = chosen_card['name']
    card_description = chosen_card['description']
    card_image_id = chosen_card['image_id']
    effects = chosen_card['effects']
    
    rating_change = random.randint(effects.get('rating_change_min', 0), effects.get('rating_change_max', 0))
    coin_change = random.randint(effects.get('coin_change_min', 0), effects.get('coin_change_max', 0))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ –º–æ–Ω–µ—Ç
    new_rating = max(0, new_rating + rating_change)
    new_coins = max(0, new_coins + coin_change)
    
    beer_cooldown_reset = effects.get('cooldown_reset_beer', False)
    target_other_coin_change = effects.get('target_other_coin_change', 0)
    
    final_description = card_description # –ò—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã "–©–µ–¥—Ä—ã–π –°–æ—Å–µ–¥" –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
    other_user_notified = False
    if target_other_coin_change > 0:
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        # –ò—â–µ–º –¥—Ä—É–≥–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ
        cursor.execute("SELECT user_id FROM users WHERE user_id != ? ORDER BY RANDOM() LIMIT 1", (user_id,))
        other_user_id_tuple = cursor.fetchone()
        conn.close()

        if other_user_id_tuple:
            other_user_id = other_user_id_tuple[0]
            update_other_user_coins(other_user_id, target_other_coin_change)
            other_user_notified = True
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                other_user_data = get_user_data(other_user_id)
                if other_user_data:
                    other_username = html.escape(other_user_data[0])
                    await bot.send_message(
                        other_user_id,
                        f"üéâ <b>–°—é—Ä–ø—Ä–∏–∑!</b> –ò–≥—Ä–æ–∫ <b>{html.escape(user_data[0])}</b> –±—ã–ª —Å–µ–≥–æ–¥–Ω—è —â–µ–¥—Ä –∏ —É–≥–æ—Å—Ç–∏–ª —Ç–µ–±—è <b>+{target_other_coin_change}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤!"
                    )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É {other_user_id}: {e}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç—ã, –µ—Å–ª–∏ –≤ –Ω—ë–º –µ—Å—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã %d
    if '%d' in card_description:
        description_args = []
        try:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ä—Ç
            if chosen_card['id'] == 'generous_neighbor':
                display_target_other_coin_change = target_other_coin_change if other_user_notified else 0 # –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —É–≥–æ—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ
                description_args = [abs(effects.get('coin_change_min', 0)), abs(effects.get('rating_change_min', 0)), display_target_other_coin_change]
            elif chosen_card['id'] == 'empty_glass':
                description_args = [CARD_DRAW_COST]
            else: # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
                if effects.get('rating_change_min') != 0 or effects.get('rating_change_max') != 0:
                    description_args.append(abs(rating_change))
                if effects.get('coin_change_min') != 0 or effects.get('coin_change_max') != 0:
                    description_args.append(abs(coin_change))
            
            final_description = card_description % tuple(description_args)
        except (TypeError, IndexError, KeyError) as e:
            logging.warning(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã {card_name}: {e}")
            final_description = card_description # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
            
    update_user_card_data(user_id, new_rating, new_coins, current_time, beer_cooldown_reset)
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å CARD_DRAW_COST, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤—ã—á—Ç–µ–Ω –∏–∑ new_coins
    actual_rating_change = new_rating - rating 
    actual_coin_change = (new_coins + CARD_DRAW_COST) - coins # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–µ–ª—å—Ç—ã

    rating_delta_str = ""
    if actual_rating_change > 0:
        rating_delta_str = f" (+<b>{actual_rating_change}</b> üç∫)"
    elif actual_rating_change < 0:
        rating_delta_str = f" (-<b>{abs(actual_rating_change)}</b> üç∫)"

    coin_delta_str = ""
    if actual_coin_change > 0:
        coin_delta_str = f" (+<b>{actual_coin_change}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤)"
    elif actual_coin_change < 0:
        coin_delta_str = f" (-<b>{abs(actual_coin_change)}</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤)"

    caption_message = (
        f"üÉè <b>–¢—ã –≤—ã—Ç—è–Ω—É–ª –∫–∞—Ä—Ç—É: '{card_name}'</b> üÉè\n"
        "------------------------------------\n"
        f"{final_description}\n\n"
        f"üìä –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥: <b>{new_rating}</b> üç∫{rating_delta_str}\n"
        f"üí∞ –¢–≤–æ–∏ –§–∞–Ω–∫–æ–∏–Ω—ã: <b>{new_coins}</b> ‚ö°{coin_delta_str}"
    )
    await message.answer_photo(photo=card_image_id, caption=caption_message)

@router.message(Command("top"))
async def cmd_top(message: Message):
    top_users = get_top_users()
    if not top_users:
        await message.answer("–í –±–∞—Ä–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–º! üçª")
        return
    
    response_text = "üèÜ <b>–¢–æ–ø-10 –ª—É—á—à–∏—Ö –ø–∏–≤–æ—Ö–ª—ë–±–æ–≤:</b> üèÜ\n"
    response_text += "------------------------------------\n"
    
    medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
    for i, (username, rating) in enumerate(top_users, 1):
        place_icon = medals.get(i, f"üîπ <b>{i}.</b>") # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö, –∑–∞—Ç–µ–º –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä
        response_text += f"{place_icon} {html.escape(username)} ‚Äî <b>{rating}</b> üç∫\n"
    
    response_text += "------------------------------------"
    
    await message.answer_photo(
        photo=TOP_IMAGE_ID,
        caption=response_text,
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "üìö <b>–ü—Ä–∞–≤–∏–ª–∞ –ò–≥—Ä—ã –≤ –ü–∏–≤–Ω–æ–º –ë–∞—Ä–µ</b> üçª\n"
        "------------------------------------\n"
        "–≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞, –≥–¥–µ —Ç—ã —Å–æ—Ä–µ–≤–Ω—É–µ—à—å—Å—è –∑–∞ —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø–∏–≤–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ø–∏—à—å –§–∞–Ω–∫–æ–∏–Ω—ã!\n\n"
        "üöÄ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "üî∏ /start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å).\n"
        "üî∏ /beer - –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –∏ –ø–æ–ª—É—á–∏ (–∏–ª–∏ –ø–æ—Ç–µ—Ä—è–π) –ø–∏–≤–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥. –ö—É–ª–¥–∞—É–Ω: 3 —á–∞—Å–∞. –î–∞—ë—Ç ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤.\n"
        "üî∏ /daily - –ü–æ–ª—É—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞. –ï—Å—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ —Å–µ—Ä–∏—é!\n"
        "üî∏ /draw_card - –í—ã—Ç—è–Ω–∏ –∫–∞—Ä—Ç—É —Å—É–¥—å–±—ã –∑–∞ ‚ö° –§–∞–Ω–∫–æ–∏–Ω—ã! –ö—É–ª–¥–∞—É–Ω: 2 —á–∞—Å–∞. <i>(–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>15</b> ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤)</i>\n"
        "üî∏ /profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ‚ö° –§–∞–Ω–∫–æ–∏–Ω–æ–≤.\n"
        "üî∏ /top - –£–≤–∏–¥–µ—Ç—å 10 –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–∏–≤–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É.\n"
        "üî∏ /menu - –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.\n"
        "üî∏ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "------------------------------------"
    )
    await message.answer(help_text)

# --- –í–†–ï–ú–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø FILE_ID (–£–î–ê–õ–ò–¢–¨ –ü–û–°–õ–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø!) ---
# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –ª—é–±–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ FILE_ID.
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—Ç–æ–∏—Ç –ü–û–°–õ–ï –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö @router.message() –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∏—Ö!
@router.message(F.photo) # –§–∏–ª—å—Ç—Ä F.photo –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ–Ω —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def get_file_id_temp(message: Message):
    if message.photo:
        file_id = message.photo[-1].file_id # –ë–µ—Ä–µ–º FILE_ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        escaped_file_id = html.escape(file_id) # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º FILE_ID –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ HTML
        response_text = f"FILE_ID —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:\n<code>{escaped_file_id}</code>"
        await message.answer(response_text) # parse_mode="HTML" —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –±–æ—Ç–∞
        logging.info(f"–í–†–ï–ú–ï–ù–ù–û: –ü–æ–ª—É—á–µ–Ω FILE_ID: {file_id}")
# --- –ö–û–ù–ï–¶ –í–†–ï–ú–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---


async def main():
    global CARD_DECK # –û–±—ä—è–≤–ª—è–µ–º, —á—Ç–æ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    init_db() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    CARD_DECK = load_card_deck() # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥—ã –∫–∞—Ä—Ç –∏–∑ JSON

    # –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –∫–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º, –ø—Ä–æ—Ö–æ–¥—è—â–∏–º —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä
    router.message.middleware(ThrottlingMiddleware(throttle_time=THROTTLE_TIME))
    
    dp.include_router(router) # –í–∫–ª—é—á–∞–µ–º –Ω–∞—à —Ä–æ—É—Ç–µ—Ä –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    await dp.start_polling(bot) # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞

if __name__ == '__main__':
    asyncio.run(main())
