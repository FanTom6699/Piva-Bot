# handlers.py
import random
from datetime import datetime, timedelta

from aiogram import Router, F, Bot
from aiogram.types import Message, ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command, ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER

from database import Database
from utils import format_time_delta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
router = Router()
db = Database()

# --- –§—Ä–∞–∑—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /beer ---
BEER_WIN_PHRASES = [
    "ü•≥üçª –¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª –Ω–∞ <b>+{rating_change}</b> üç∫!",
    "üéâüçª –û—Ç–ª–∏—á–Ω—ã–π –≥–ª–æ—Ç–æ–∫! –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—Ä–æ—Å –Ω–∞ <b>+{rating_change}</b> üç∫!",
    "üòåüçª –£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! –¢—ã –≤—ã–ø–∏–ª +<b>{rating_change}</b> üç∫!",
    "üåüüçª –ü–æ–±–µ–¥–∞! –ë–∞—Ä–º–µ–Ω –Ω–∞–ª–∏–ª —Ç–µ–±–µ +<b>{rating_change}</b> üç∫!",
]

BEER_LOSE_PHRASES_RATING = [
    "üòñüçª –ù–µ—É–¥–∞—á–∞! –¢—ã –ø—Ä–æ–ª–∏–ª <b>{rating_loss}</b> üç∫ —Ä–µ–π—Ç–∏–Ω–≥–∞!",
    "üò°üçª –û–±–∏–¥–Ω–æ! <b>{rating_loss}</b> üç∫ –∏—Å–ø–∞—Ä–∏–ª–æ—Å—å!",
]

BEER_LOSE_PHRASES_ZERO = [
    "üò≠üíî –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —É —Ç–µ–±—è –≤—Å–µ <b>{rating_loss}</b> üç∫! –¢—ã –Ω–∞ –Ω—É–ª–µ!",
    "üòñüçª –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª! –í–µ—Å—å —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ (<b>{rating_loss}</b> üç∫) –æ–±–Ω—É–ª–∏–ª—Å—è!",
]

COOLDOWN_SECONDS = 7200  # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---

async def check_user_registered(message: Message, bot: Bot) -> bool:
    if await db.user_exists(message.from_user.id):
        return True
    
    me = await bot.get_me()
    start_link = f"https://t.me/{me.username}?start=register"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=start_link)]
    ])
    
    await message.reply(
        "<b>–≠–π, –Ω–æ–≤–∏—á–æ–∫!</b> üçª\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–∏—Ç—å –ø–∏–≤–æ, –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ –±–∞—Ä! "
        "–Ø —Ç–µ–±—è –µ—â–µ –Ω–µ –∑–Ω–∞—é. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    return False


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_NOT_MEMBER >> IS_MEMBER))
async def on_bot_join_group(event: ChatMemberUpdated, bot: Bot):
    me = await bot.get_me()
    await bot.send_message(
        event.chat.id,
        text=(
            "<b>–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ!</b> üçª\n\n"
            "–Ø Piva Bot, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –≤–µ—Å—Ç–∏ —É—á–µ—Ç –≤–∞—à–µ–≥–æ –ø–∏–≤–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞!\n\n"
            "<b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>\n"
            "1Ô∏è‚É£ –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è -> @" + me.username + " –∏ –Ω–∞–∂–∞—Ç—å /start.\n"
            "2Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å—é–¥–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /beer, —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É.\n"
            "3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /top.\n\n"
            "–î–∞ –Ω–∞—á–Ω—É—Ç—Å—è –ø–∏–≤–Ω—ã–µ –∏–≥—Ä—ã!"
        ),
        parse_mode='HTML'
    )

@router.message(CommandStart())
async def cmd_start(message: Message):
    user = message.from_user
    if not await db.user_exists(user.id):
        await db.add_user(user.id, user.first_name, user.last_name, user.username)
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! üëã\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ø–∏–≤–Ω–æ–π –∫–ª—É–±. –¢–≤–æ–π –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 0 üç∫.\n"
            f"–£–≤–µ–ª–∏—á–∏–≤–∞–π –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /beer –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –≥–¥–µ —è –µ—Å—Ç—å!"
        )
    else:
        rating = await db.get_user_beer_rating(user.id)
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}! üçª\n"
            f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating} üç∫."
        )

@router.message(Command("beer"))
async def cmd_beer(message: Message, bot: Bot):
    if message.chat.type != 'private':
        if not await check_user_registered(message, bot):
            return

    user_id = message.from_user.id
    last_beer_time = await db.get_last_beer_time(user_id)
    
    if last_beer_time:
        time_since_last_beer = datetime.now() - last_beer_time
        if time_since_last_beer.total_seconds() < COOLDOWN_SECONDS:
            remaining_time = timedelta(seconds=COOLDOWN_SECONDS) - time_since_last_beer
            await message.answer(
                f"‚åõ –¢—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–∏–ª! üçª\n"
                f"–í–µ—Ä–Ω–∏—Å—å –≤ –±–∞—Ä —á–µ—Ä–µ–∑: {format_time_delta(remaining_time)}."
            )
            return

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –í–ó–í–ï–®–ï–ù–ù–û–ì–û –†–ê–ù–î–û–ú–ê ---
    current_rating = await db.get_user_beer_rating(user_id)
    
    outcomes = ['small_win', 'loss', 'big_win']
    weights = [0.60, 0.25, 0.15]  # 60% small win, 25% loss, 15% big win
    
    chosen_outcome = random.choices(outcomes, weights=weights, k=1)[0]
    
    if chosen_outcome == 'small_win':
        rating_change = random.randint(1, 4)
    elif chosen_outcome == 'big_win':
        rating_change = random.randint(5, 10)
    else: # 'loss'
        rating_change = random.randint(-5, -1)
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    if rating_change > 0:
        new_rating = current_rating + rating_change
        phrase = random.choice(BEER_WIN_PHRASES).format(rating_change=rating_change)
    else:
        rating_loss = abs(rating_change)
        if current_rating - rating_loss <= 0:
            actual_loss = current_rating
            new_rating = 0
            if actual_loss > 0:
                phrase = random.choice(BEER_LOSE_PHRASES_ZERO).format(rating_loss=actual_loss)
            else: 
                phrase = "–¢—ã –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–∏—Ç—å, –Ω–æ —É —Ç–µ–±—è –∏ —Ç–∞–∫ 0 üç∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ!"
        else:
            new_rating = current_rating - rating_loss
            phrase = random.choice(BEER_LOSE_PHRASES_RATING).format(rating_loss=rating_loss)

    await db.update_beer_data(user_id, new_rating)
    await message.answer(phrase, parse_mode='HTML')


@router.message(Command("top"))
async def cmd_top(message: Message, bot: Bot):
    if message.chat.type != 'private':
        if not await check_user_registered(message, bot):
            return

    top_users = await db.get_top_users()
    if not top_users:
        await message.answer("–í –±–∞—Ä–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ø. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!")
        return

    top_text = "üèÜ <b>–¢–æ–ø-10 –ø–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤:</b> üèÜ\n\n"
    medals = ["ü•á", "ü•à", "ü•â"]
    
    for i, user_data in enumerate(top_users):
        first_name, last_name, rating = user_data
        full_name = first_name + (f" {last_name}" if last_name else "")
        
        if i < 3:
            top_text += f"{medals[i]} {i+1}. {full_name} ‚Äî {rating} üç∫\n"
        else:
            top_text += f"üèÖ {i+1}. {full_name} ‚Äî {rating} üç∫\n"
            
    await message.answer(top_text, parse_mode='HTML')
