# handlers.py
import asyncio
import random
from datetime import datetime, timedelta
from contextlib import suppress

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command, ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER, CallbackData
from aiogram.exceptions import TelegramBadRequest

from database import Database
from utils import format_time_delta

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
router = Router()
db = Database()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
BEER_COOLDOWN_SECONDS = 7200
ROULETTE_COOLDOWN_SECONDS = 600
ROULETTE_LOBBY_TIMEOUT_SECONDS = 60

active_games = {}  # chat_id -> GameState
chat_cooldowns = {}  # chat_id -> datetime

# --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä—ã ---
class RouletteCallbackData(CallbackData, prefix="roulette"):
    action: str  # join, leave, cancel

class GameState:
    def __init__(self, creator, stake, max_players, lobby_message_id):
        self.creator = creator
        self.stake = stake
        self.max_players = max_players
        self.lobby_message_id = lobby_message_id
        self.players = {creator.id: creator}
        self.creation_time = datetime.now()
        self.task = None # –î–ª—è –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ-—Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã

# --- –§—Ä–∞–∑—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /beer ---
BEER_WIN_PHRASES = [
    "ü•≥üçª –¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª –Ω–∞ <b>+{rating_change}</b> üç∫!",
    "üéâüçª –û—Ç–ª–∏—á–Ω—ã–π –≥–ª–æ—Ç–æ–∫! –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—Ä–æ—Å –Ω–∞ <b>+{rating_change}</b> üç∫!",
    "üòåüçª –£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! –¢—ã –≤—ã–ø–∏–ª +<b>{rating_change}</b> üç∫!",
    "üåüüçª –ü–æ–±–µ–¥–∞! –ë–∞—Ä–º–µ–Ω –Ω–∞–ª–∏–ª —Ç–µ–±–µ +<b>{rating_change}</b> üç∫!",
]

BEER_LOSE_PHRASES_RATING = [
    "üòñüçª –ù–µ—É–¥–∞—á–∞! –¢—ã –ø—Ä–æ–ª–∏–ª <b>{rating_loss}</b> üç∫ —Ä–µ–π—Ç–∏–Ω–≥–∞!",
    "üò°üçª –û–±–∏–¥–Ω–æ! <b>{rating_loss}</b> üç∫ –∏—Å–ø–∞—Ä–∏–ª–æ—Å—å!",
]

BEER_LOSE_PHRASES_ZERO = [
    "üò≠üíî –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —É —Ç–µ–±—è –≤—Å–µ <b>{rating_loss}</b> üç∫! –¢—ã –Ω–∞ –Ω—É–ª–µ!",
    "üòñüçª –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª! –í–µ—Å—å —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ (<b>{rating_loss}</b> üç∫) –æ–±–Ω—É–ª–∏–ª—Å—è!",
]


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def check_user_registered(message_or_callback: Message | CallbackQuery, bot: Bot) -> bool:
    user = message_or_callback.from_user
    if await db.user_exists(user.id):
        return True
    
    me = await bot.get_me()
    start_link = f"https://t.me/{me.username}?start=register"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=start_link)]
    ])
    
    text = (
        "<b>–≠–π, –Ω–æ–≤–∏—á–æ–∫!</b> üçª\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏–≥—Ä–∞—Ç—å, –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ –±–∞—Ä! "
        "–Ø —Ç–µ–±—è –µ—â–µ –Ω–µ –∑–Ω–∞—é. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
    )

    if isinstance(message_or_callback, Message):
        await message_or_callback.reply(text, reply_markup=keyboard, parse_mode='HTML')
    else: # CallbackQuery
        await message_or_callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!", show_alert=True)
        await message_or_callback.message.answer(text, reply_markup=keyboard, parse_mode='HTML')
        
    return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---

@router.message(CommandStart())
async def cmd_start(message: Message):
    user = message.from_user
    if not await db.user_exists(user.id):
        await db.add_user(user.id, user.first_name, user.last_name, user.username)
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! üëã\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ø–∏–≤–Ω–æ–π –∫–ª—É–±. –¢–≤–æ–π –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 0 üç∫.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –≥–¥–µ —è –µ—Å—Ç—å!"
        )
    else:
        rating = await db.get_user_beer_rating(user.id)
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}! üçª\n"
            f"–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating} üç∫."
        )

@router.message(Command("beer"))
async def cmd_beer(message: Message, bot: Bot):
    if message.chat.type != 'private':
        if not await check_user_registered(message, bot):
            return

    user_id = message.from_user.id
    last_beer_time = await db.get_last_beer_time(user_id)
    
    if last_beer_time:
        time_since_last_beer = datetime.now() - last_beer_time
        if time_since_last_beer.total_seconds() < BEER_COOLDOWN_SECONDS:
            remaining_time = timedelta(seconds=BEER_COOLDOWN_SECONDS) - time_since_last_beer
            await message.answer(
                f"‚åõ –¢—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–∏–ª! üçª\n"
                f"–í–µ—Ä–Ω–∏—Å—å –≤ –±–∞—Ä —á–µ—Ä–µ–∑: {format_time_delta(remaining_time)}."
            )
            return

    current_rating = await db.get_user_beer_rating(user_id)
    
    outcomes = ['small_win', 'loss', 'big_win']
    weights = [0.60, 0.25, 0.15]
    chosen_outcome = random.choices(outcomes, weights=weights, k=1)[0]
    
    if chosen_outcome == 'small_win':
        rating_change = random.randint(1, 4)
    elif chosen_outcome == 'big_win':
        rating_change = random.randint(5, 10)
    else:
        rating_change = random.randint(-5, -1)

    if rating_change > 0:
        new_rating = current_rating + rating_change
        phrase = random.choice(BEER_WIN_PHRASES).format(rating_change=rating_change)
    else:
        rating_loss = abs(rating_change)
        if current_rating - rating_loss <= 0:
            actual_loss = current_rating
            new_rating = 0
            phrase = random.choice(BEER_LOSE_PHRASES_ZERO).format(rating_loss=actual_loss) if actual_loss > 0 else "–¢—ã –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–∏—Ç—å, –Ω–æ —É —Ç–µ–±—è –∏ —Ç–∞–∫ 0 üç∫."
        else:
            new_rating = current_rating - rating_loss
            phrase = random.choice(BEER_LOSE_PHRASES_RATING).format(rating_loss=rating_loss)

    await db.update_beer_data(user_id, new_rating)
    await message.answer(phrase, parse_mode='HTML')

@router.message(Command("top"))
async def cmd_top(message: Message, bot: Bot):
    if message.chat.type != 'private':
        if not await check_user_registered(message, bot):
            return

    top_users = await db.get_top_users()
    if not top_users:
        return await message.answer("–í –±–∞—Ä–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ø.")

    top_text = "üèÜ <b>–¢–æ–ø-10 –ø–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤:</b> üèÜ\n\n"
    medals = ["ü•á", "ü•à", "ü•â"]
    
    for i, user_data in enumerate(top_users):
        first_name, last_name, rating = user_data
        full_name = first_name + (f" {last_name}" if last_name else "")
        
        if i < 3:
            top_text += f"{medals[i]} {i+1}. {full_name} ‚Äî {rating} üç∫\n"
        else:
            top_text += f"üèÖ {i+1}. {full_name} ‚Äî {rating} üç∫\n"
            
    await message.answer(top_text, parse_mode='HTML')


# --- –õ–û–ì–ò–ö–ê –ú–ò–ù–ò-–ò–ì–†–´ "–ü–ò–í–ù–ê–Ø –†–£–õ–ï–¢–ö–ê" ---

def get_roulette_keyboard(game: GameState, user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        InlineKeyboardButton(text="üç∫ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=RouletteCallbackData(action="join").pack())
    ]
    
    if user_id in game.players:
        if user_id == game.creator.id:
            buttons.append(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=RouletteCallbackData(action="cancel").pack()))
        else:
            buttons.append(InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data=RouletteCallbackData(action="leave").pack()))
            
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


async def generate_lobby_text(game: GameState) -> str:
    players_list = "\n".join(f"‚Ä¢ {p.full_name}" for p in game.players.values())
    return (
        f"üçª <b>–ü–∏–≤–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b> üçª\n\n"
        f"–°–æ–∑–¥–∞–ª –∏–≥—Ä—É: <b>{game.creator.full_name}</b>\n"
        f"–°—Ç–∞–≤–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: <b>{game.stake} üç∫</b>\n"
        f"–ò–≥—Ä–æ–∫–∏: ({len(game.players)}/{game.max_players})\n"
        f"{players_list}\n\n"
        f"<i>–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {ROULETTE_LOBBY_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–±–µ—Ä–µ—Ç—Å—è {game.max_players} –∏–≥—Ä–æ–∫–æ–≤.</i>"
    )

@router.message(Command("roulette"))
async def cmd_roulette(message: Message, bot: Bot):
    if message.chat.type == 'private':
        return await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")

    args = message.text.split()
    if len(args) != 3 or not args[1].isdigit() or not args[2].isdigit():
        return await message.reply(
            "‚ÑπÔ∏è <b>–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å '–ü–∏–≤–Ω—É—é —Ä—É–ª–µ—Ç–∫—É':</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/roulette &lt;—Å—Ç–∞–≤–∫–∞&gt; &lt;–∏–≥—Ä–æ–∫–∏&gt;</code>\n\n"
            "‚Ä¢ <code>&lt;—Å—Ç–∞–≤–∫–∞&gt;</code>: –æ—Ç 5 –¥–æ 100 üç∫\n"
            "‚Ä¢ <code>&lt;–∏–≥—Ä–æ–∫–∏&gt;</code>: –æ—Ç 2 –¥–æ 6 —á–µ–ª–æ–≤–µ–∫\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/roulette 10 4</code>",
            parse_mode='HTML'
        )

    chat_id = message.chat.id
    
    if chat_id in active_games:
        return await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.")

    if chat_id in chat_cooldowns:
        time_since_last_game = datetime.now() - chat_cooldowns[chat_id]
        if time_since_last_game.total_seconds() < ROULETTE_COOLDOWN_SECONDS:
            remaining = timedelta(seconds=ROULETTE_COOLDOWN_SECONDS) - time_since_last_game
            return await message.reply(f"–°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑: {format_time_delta(remaining)}.")

    stake, max_players = int(args[1]), int(args[2])

    if not (5 <= stake <= 100):
        return await message.reply("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 100 üç∫.")
    if not (2 <= max_players <= 6):
        return await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 6.")
    
    creator = message.from_user
    if not await check_user_registered(message, bot):
        return

    creator_balance = await db.get_user_beer_rating(creator.id)
    if creator_balance < stake:
        return await message.reply(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã. –ù—É–∂–Ω–æ {stake} üç∫, —É –≤–∞—Å {creator_balance} üç∫.")

    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É —Å —Å–æ–∑–¥–∞—Ç–µ–ª—è
    await db.change_rating(creator.id, -stake)
    
    lobby_message = await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏...")
    
    game = GameState(creator, stake, max_players, lobby_message.message_id)
    active_games[chat_id] = game
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    with suppress(TelegramBadRequest):
        await bot.pin_chat_message(chat_id, lobby_message.message_id, disable_notification=True)
        
    await lobby_message.edit_text(
        await generate_lobby_text(game),
        reply_markup=get_roulette_keyboard(game, creator.id),
        parse_mode='HTML'
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –∞–≤—Ç–æ-—Å—Ç–∞—Ä—Ç
    game.task = asyncio.create_task(schedule_game_start(chat_id, bot))


@router.callback_query(RouletteCallbackData.filter())
async def on_roulette_button_click(callback: CallbackQuery, callback_data: RouletteCallbackData, bot: Bot):
    chat_id = callback.message.chat.id
    user = callback.from_user

    if chat_id not in active_games:
        return await callback.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
    
    game = active_games[chat_id]
    action = callback_data.action

    if action == "join":
        if user.id in game.players:
            return await callback.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
        if len(game.players) >= game.max_players:
            return await callback.answer("–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.", show_alert=True)
        if not await check_user_registered(callback, bot):
             return
             
        balance = await db.get_user_beer_rating(user.id)
        if balance < game.stake:
            return await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–≤–∞! –ù—É–∂–Ω–æ {game.stake} üç∫, —É –≤–∞—Å {balance} üç∫.", show_alert=True)
        
        await db.change_rating(user.id, -game.stake)
        game.players[user.id] = user
        await callback.answer("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!")
        
        if len(game.players) == game.max_players:
            game.task.cancel() # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
            await start_roulette_game(chat_id, bot)
        else:
            await callback.message.edit_text(
                await generate_lobby_text(game),
                reply_markup=get_roulette_keyboard(game, user.id),
                parse_mode='HTML'
            )
    
    elif action == "leave":
        if user.id not in game.players:
            return await callback.answer("–í—ã –Ω–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.", show_alert=True)
        if user.id == game.creator.id:
            return await callback.answer("–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É. –¢–æ–ª—å–∫–æ –æ—Ç–º–µ–Ω–∏—Ç—å.", show_alert=True)
        
        del game.players[user.id]
        await db.change_rating(user.id, game.stake) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É
        await callback.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", show_alert=True)
        await callback.message.edit_text(
            await generate_lobby_text(game),
            reply_markup=get_roulette_keyboard(game, user.id),
            parse_mode='HTML'
        )

    elif action == "cancel":
        if user.id != game.creator.id:
            return await callback.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É.", show_alert=True)
        
        game.task.cancel() # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫–∏ –≤—Å–µ–º
        for player_id in game.players:
            await db.change_rating(player_id, game.stake)
        
        del active_games[chat_id]
        with suppress(TelegramBadRequest):
            await bot.unpin_chat_message(chat_id, game.lobby_message_id)
        
        await callback.message.edit_text("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º. –í—Å–µ —Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        await callback.answer()


async def schedule_game_start(chat_id: int, bot: Bot):
    await asyncio.sleep(ROULETTE_LOBBY_TIMEOUT_SECONDS)
    if chat_id in active_games:
        game = active_games[chat_id]
        if len(game.players) >= 2:
            await start_roulette_game(chat_id, bot)
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É —Å–æ–∑–¥–∞—Ç–µ–ª—é
            await db.change_rating(game.creator.id, game.stake)
            del active_games[chat_id]
            with suppress(TelegramBadRequest):
                await bot.unpin_chat_message(chat_id, game.lobby_message_id)
            await bot.edit_message_text(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", 
                chat_id, 
                game.lobby_message_id
            )

async def start_roulette_game(chat_id: int, bot: Bot):
    game = active_games[chat_id]
    
    with suppress(TelegramBadRequest):
        await bot.unpin_chat_message(chat_id, game.lobby_message_id)
        
    await bot.edit_message_text(
        f"–í—Å–µ –≤ —Å–±–æ—Ä–µ! –°—Ç–∞–≤–∫–∏ —Å–¥–µ–ª–∞–Ω—ã ({game.stake} üç∫ —Å –∫–∞–∂–¥–æ–≥–æ). –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω... üî´",
        chat_id,
        game.lobby_message_id,
        reply_markup=None
    )
    await asyncio.sleep(3)

    players_in_game = list(game.players.values())
    round_num = 1
    
    while len(players_in_game) > 1:
        loser = random.choice(players_in_game)
        players_in_game.remove(loser)
        
        remaining_players_text = "\n".join(f"‚Ä¢ {p.full_name}" for p in players_in_game)
        
        await bot.edit_message_text(
            f"üçª <b>–†–∞—É–Ω–¥ {round_num}</b> üçª\n\n"
            f"–í—ã–±—ã–≤–∞–µ—Ç... <b>{loser.full_name}</b>! –û–Ω –ø—Ä–æ–ª–∏–ª –≤—Å—ë –ø–∏–≤–æ. üòñ\n\n"
            f"<i>–û—Å—Ç–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ:</i>\n{remaining_players_text}\n\n"
            f"–°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...",
            chat_id,
            game.lobby_message_id,
            parse_mode='HTML'
        )
        round_num += 1
        await asyncio.sleep(5)
        
    winner = players_in_game[0]
    prize = game.stake * len(game.players)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    await db.change_rating(winner.id, prize)
    
    winner_text = (
        f"üèÜ <b>–ü–û–ë–ï–î–ò–¢–ï–õ–¨!</b> üèÜ\n\n"
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, <b>{winner.full_name}</b>! –û–Ω –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –∏ –∑–∞–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å –±–∞–Ω–∫: <b>{prize} üç∫</b>!\n\n"
        f"<i>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.</i>"
    )
    
    await bot.edit_message_text(winner_text, chat_id, game.lobby_message_id, parse_mode='HTML')
    
    with suppress(TelegramBadRequest):
        await bot.pin_chat_message(chat_id, game.lobby_message_id, disable_notification=True)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        asyncio.create_task(unpin_after_delay(chat_id, game.lobby_message_id, bot, 120))
        
    del active_games[chat_id]
    chat_cooldowns[chat_id] = datetime.now()

async def unpin_after_delay(chat_id: int, message_id: int, bot: Bot, delay: int):
    await asyncio.sleep(delay)
    with suppress(TelegramBadRequest):
        await bot.unpin_chat_message(chat_id, message_id)
