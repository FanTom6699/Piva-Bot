# handlers.py
import asyncio
import random
from datetime import datetime, timedelta
from contextlib import suppress
import logging

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command, Filter, StateFilter
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

import config
from database import Database
from utils import format_time_delta

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
router = Router()
admin_router = Router()
db = Database(db_name='/data/bot_database.db')


# --- FSM –°–û–°–¢–û–Ø–ù–ò–Ø ---
class AdminStates(StatesGroup):
    broadcast_message = State()
    give_beer_user = State()
    give_beer_amount = State()


# --- –§–ò–õ–¨–¢–†–´ ---
class IsAdmin(Filter):
    async def __call__(self, message: Message | CallbackQuery) -> bool:
        return message.from_user.id == config.ADMIN_ID


# --- CALLBACKDATA –§–ê–ë–†–ò–ö–ò ---
class AdminCallbackData(CallbackData, prefix="admin"):
    action: str

class RouletteCallbackData(CallbackData, prefix="roulette"):
    action: str


# --- –ö–õ–ê–°–°–´ –ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ---
class GameState:
    def __init__(self, creator, stake, max_players, lobby_message_id):
        self.creator = creator
        self.stake = stake
        self.max_players = max_players
        self.lobby_message_id = lobby_message_id
        self.players = {creator.id: creator}
        self.creation_time = datetime.now()
        self.task = None

BEER_COOLDOWN_SECONDS = 7200
ROULETTE_COOLDOWN_SECONDS = 600
ROULETTE_LOBBY_TIMEOUT_SECONDS = 60

active_games = {}
chat_cooldowns = {}
user_spam_tracker = {}


# --- –§–†–ê–ó–´ –î–õ–Ø –ö–û–ú–ê–ù–î–´ /beer ---
BEER_WIN_PHRASES = [
    "ü•≥üçª –¢—ã —É—Å–ø–µ—à–Ω–æ –±–∞—Ö–Ω—É–ª –Ω–∞ <b>+{rating_change}</b> üç∫!",
    "üéâüçª –û—Ç–ª–∏—á–Ω—ã–π –≥–ª–æ—Ç–æ–∫! –¢–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –≤—ã—Ä–æ—Å –Ω–∞ <b>+{rating_change}</b> üç∫!",
    "üòåüçª –£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! –¢—ã –≤—ã–ø–∏–ª +<b>{rating_change}</b> üç∫!",
    "üåüüçª –ü–æ–±–µ–¥–∞! –ë–∞—Ä–º–µ–Ω –Ω–∞–ª–∏–ª —Ç–µ–±–µ +<b>{rating_change}</b> üç∫!",
]
BEER_LOSE_PHRASES_RATING = [
    "üòñüçª –ù–µ—É–¥–∞—á–∞! –¢—ã –ø—Ä–æ–ª–∏–ª <b>{rating_loss}</b> üç∫ —Ä–µ–π—Ç–∏–Ω–≥–∞!",
    "üò°üçª –û–±–∏–¥–Ω–æ! <b>{rating_loss}</b> üç∫ –∏—Å–ø–∞—Ä–∏–ª–æ—Å—å!",
]
BEER_LOSE_PHRASES_ZERO = [
    "üò≠üíî –ë—Ä–∞—Ç—å—è –£–∏–∑–ª–∏ –æ—Ç–∂–∞–ª–∏ —É —Ç–µ–±—è –≤—Å–µ <b>{rating_loss}</b> üç∫! –¢—ã –Ω–∞ –Ω—É–ª–µ!",
    "üòñüçª –ü–æ–ª–Ω—ã–π –ø—Ä–æ–≤–∞–ª! –í–µ—Å—å —Ç–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ (<b>{rating_loss}</b> üç∫) –æ–±–Ω—É–ª–∏–ª—Å—è!",
]


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
async def check_user_registered(message_or_callback: Message | CallbackQuery, bot: Bot) -> bool:
    user = message_or_callback.from_user
    if await db.user_exists(user.id):
        return True
    
    me = await bot.get_me()
    start_link = f"https://t.me/{me.username}?start=register"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úçÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", url=start_link)]])
    
    text = (
        "<b>–≠–π, –Ω–æ–≤–∏—á–æ–∫!</b> üçª\n\n"
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –∏–≥—Ä–∞—Ç—å, –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏ –≤ –±–∞—Ä! "
        "–Ø —Ç–µ–±—è –µ—â–µ –Ω–µ –∑–Ω–∞—é. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è."
    )

    if isinstance(message_or_callback, Message):
        await message_or_callback.reply(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await message_or_callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!", show_alert=True)
        await message_or_callback.message.answer(text, reply_markup=keyboard, parse_mode='HTML')
        
    return False


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –ß–ê–¢–ê ---
@router.my_chat_member()
async def handle_bot_membership(event: ChatMemberUpdated, bot: Bot):
    old_status = event.old_chat_member.status
    new_status = event.new_chat_member.status

    if old_status in ("left", "kicked") and new_status in ("member", "administrator"):
        await db.add_chat(event.chat.id, event.chat.title)
    elif old_status in ("member", "administrator") and new_status in ("left", "kicked"):
        await db.remove_chat(event.chat.id)


# --- –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ (admin_router) ---

@admin_router.message(Command("cancel"), IsAdmin(), StateFilter("*"))
async def cancel_handler(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@admin_router.message(Command("admin"), IsAdmin())
async def cmd_admin_panel(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üç∫ –í—ã–¥–∞—Ç—å –ø–∏–≤–æ", callback_data=AdminCallbackData(action="give_beer").pack())],
        [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=AdminCallbackData(action="broadcast").pack())],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=AdminCallbackData(action="stats").pack())]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=keyboard)

@admin_router.callback_query(AdminCallbackData.filter(), IsAdmin())
async def handle_admin_callback(callback: CallbackQuery, callback_data: AdminCallbackData, state: FSMContext):
    action = callback_data.action
    await callback.message.edit_reply_markup() 
    if action == "stats":
        total_users = await db.get_total_users_count()
        all_chats = await db.get_all_chat_ids()
        await callback.message.answer(
            f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(all_chats)}",
            parse_mode='HTML'
        )
    elif action == "broadcast":
        await state.set_state(AdminStates.broadcast_message)
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
    elif action == "give_beer":
        await state.set_state(AdminStates.give_beer_user)
        await callback.message.answer("–ö–æ–º—É –≤—ã–¥–∞—Ç—å –ø–∏–≤–æ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID, @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
    await callback.answer()

@admin_router.message(AdminStates.broadcast_message, IsAdmin())
async def handle_broadcast_message(message: Message, state: FSMContext, bot: Bot):
    await state.clear()
    await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    user_ids = await db.get_all_user_ids()
    chat_ids = await db.get_all_chat_ids()
    success_users, failed_users = 0, 0
    for user_id in user_ids:
        with suppress(TelegramBadRequest):
            try:
                await bot.copy_message(chat_id=user_id, from_chat_id=message.chat.id, message_id=message.message_id)
                success_users += 1
            except Exception:
                failed_users += 1
            await asyncio.sleep(0.1)
    success_chats, failed_chats = 0, 0
    for chat_id in chat_ids:
        with suppress(TelegramBadRequest):
            try:
                await bot.copy_message(chat_id=chat_id, from_chat_id=message.chat.id, message_id=message.message_id)
                success_chats += 1
            except Exception:
                failed_chats += 1
            await asyncio.sleep(0.1)
    await message.answer(
        f"<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_users}\n‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_users}\n\n"
        f"<b>–ß–∞—Ç—ã:</b>\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_chats}\n‚ùå –ù–µ—É–¥–∞—á–Ω–æ: {failed_chats}",
        parse_mode='HTML'
    )

@admin_router.message(AdminStates.give_beer_user, IsAdmin())
async def process_give_beer_user(message: Message, state: FSMContext):
    target_id = None
    if message.forward_from:
        target_id = message.forward_from.id
    elif message.text.startswith('@'):
        target_id = await db.get_user_by_username(message.text)
    elif message.text.isdigit():
        target_id = int(message.text)
    if not target_id or not await db.user_exists(target_id):
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    await state.update_data(target_id=target_id)
    await state.set_state(AdminStates.give_beer_amount)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `100` –∏–ª–∏ `-50`).")

@admin_router.message(AdminStates.give_beer_amount, IsAdmin())
async def process_give_beer_amount(message: Message, state: FSMContext, bot: Bot):
    if not message.text.lstrip('-').isdigit():
        await message.reply("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `100` –∏–ª–∏ `-50`). –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
        return
    amount = int(message.text)
    user_data = await state.get_data()
    target_id = user_data.get('target_id')
    await state.clear()
    await db.change_rating(target_id, amount)
    new_balance = await db.get_user_beer_rating(target_id)
    await message.answer(
        f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n"
        f"ID: <code>{target_id}</code>\n"
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {amount:+} üç∫\n"
        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} üç∫",
        parse_mode='HTML'
    )
    with suppress(TelegramBadRequest):
        await bot.send_message(chat_id=target_id, text=f"‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ {amount:+} üç∫.")

@admin_router.message(F.text.lower() == "–±–æ—Ç –≤—ã–π–¥–∏", IsAdmin())
async def admin_leave_chat(message: Message, bot: Bot):
    if message.chat.type in ['group', 'supergroup']:
        await message.reply("–•–æ—Ä–æ—à–æ, —Å–ª—É—à–∞—é—Å—å...")
        await bot.leave_chat(chat_id=message.chat.id)
    else:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")


# --- –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (router) ---
@router.message(CommandStart())
async def cmd_start(message: Message):
    user = message.from_user
    if not await db.user_exists(user.id):
        await db.add_user(user.id, user.first_name, user.last_name, user.username)
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! üëã\n–¢–≤–æ–π –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 0 üç∫.")
    else:
        rating = await db.get_user_beer_rating(user.id)
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}! üçª\n–¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating} üç∫.")

@router.message(Command("id"))
async def cmd_id(message: Message):
    await message.reply(
        f"‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n\n"
        f"üë§ –í–∞—à User ID: <code>{message.from_user.id}</code>\n"
        f"üí¨ ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{message.chat.id}</code>",
        parse_mode='HTML'
    )

@router.message(Command("beer"))
async def cmd_beer(message: Message, bot: Bot):
    user_id = message.from_user.id
    now = datetime.now()
    if user_id in user_spam_tracker:
        if (now - user_spam_tracker[user_id]).total_seconds() < 5:
            return
    user_spam_tracker[user_id] = now
    if message.chat.type != 'private' and not await check_user_registered(message, bot):
        return
    last_beer_time = await db.get_last_beer_time(user_id)
    if last_beer_time:
        time_since = datetime.now() - last_beer_time
        if time_since.total_seconds() < BEER_COOLDOWN_SECONDS:
            remaining = timedelta(seconds=BEER_COOLDOWN_SECONDS) - time_since
            return await message.answer(f"‚åõ –¢—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –ø–∏–ª! üçª\n–í–µ—Ä–Ω–∏—Å—å –≤ –±–∞—Ä —á–µ—Ä–µ–∑: {format_time_delta(remaining)}.")
    current_rating = await db.get_user_beer_rating(user_id)
    outcomes = ['small_win', 'loss', 'big_win']
    weights = [0.60, 0.25, 0.15]
    chosen_outcome = random.choices(outcomes, weights=weights, k=1)[0]
    if chosen_outcome == 'small_win': rating_change = random.randint(1, 4)
    elif chosen_outcome == 'big_win': rating_change = random.randint(5, 10)
    else: rating_change = random.randint(-5, -1)
    if rating_change > 0:
        new_rating = current_rating + rating_change
        phrase = random.choice(BEER_WIN_PHRASES).format(rating_change=rating_change)
    else:
        rating_loss = abs(rating_change)
        if current_rating - rating_loss <= 0:
            actual_loss = current_rating
            new_rating = 0
            phrase = random.choice(BEER_LOSE_PHRASES_ZERO).format(rating_loss=actual_loss) if actual_loss > 0 else "–¢—ã –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–∏—Ç—å, –Ω–æ —É —Ç–µ–±—è –∏ —Ç–∞–∫ 0 üç∫."
        else:
            new_rating = current_rating - rating_loss
            phrase = random.choice(BEER_LOSE_PHRASES_RATING).format(rating_loss=rating_loss)
    await db.update_beer_data(user_id, new_rating)
    await message.answer(phrase, parse_mode='HTML')

@router.message(Command("top"))
async def cmd_top(message: Message, bot: Bot):
    if message.chat.type != 'private' and not await check_user_registered(message, bot):
        return
    top_users = await db.get_top_users()
    if not top_users: return await message.answer("–í –±–∞—Ä–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ø.")
    top_text = "üèÜ <b>–¢–æ–ø-10 –ø–∏–≤–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤:</b> üèÜ\n\n"
    medals = ["ü•á", "ü•à", "ü•â"]
    for i, (first_name, last_name, rating) in enumerate(top_users):
        full_name = first_name + (f" {last_name}" if last_name else "")
        place = i + 1
        medal = medals[i] if i < 3 else "üèÖ"
        top_text += f"{medal} {place}. {full_name} ‚Äî {rating} üç∫\n"
    await message.answer(top_text, parse_mode='HTML')


# --- –õ–û–ì–ò–ö–ê –ú–ò–ù–ò-–ò–ì–†–´ "–ü–ò–í–ù–ê–Ø –†–£–õ–ï–¢–ö–ê" (router) ---
def get_roulette_keyboard(game: GameState, user_id: int) -> InlineKeyboardMarkup:
    buttons = [InlineKeyboardButton(text="üç∫ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=RouletteCallbackData(action="join").pack())]
    if user_id in game.players:
        if user_id == game.creator.id:
            buttons.append(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É", callback_data=RouletteCallbackData(action="cancel").pack()))
        else:
            buttons.append(InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data=RouletteCallbackData(action="leave").pack()))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

async def generate_lobby_text(game: GameState) -> str:
    players_list = "\n".join(f"‚Ä¢ {p.full_name}" for p in game.players.values())
    return (
        f"üçª <b>–ü–∏–≤–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b> üçª\n\n"
        f"–°–æ–∑–¥–∞–ª –∏–≥—Ä—É: <b>{game.creator.full_name}</b>\n"
        f"–°—Ç–∞–≤–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: <b>{game.stake} üç∫</b>\n"
        f"–ò–≥—Ä–æ–∫–∏: ({len(game.players)}/{game.max_players})\n{players_list}\n\n"
        f"<i>–ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ {ROULETTE_LOBBY_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –∫–æ–≥–¥–∞ –Ω–∞–±–µ—Ä–µ—Ç—Å—è {game.max_players} –∏–≥—Ä–æ–∫–æ–≤.</i>"
    )

@router.message(Command("roulette"))
async def cmd_roulette(message: Message, bot: Bot):
    if message.chat.type == 'private': return await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.")
    args = message.text.split()
    if len(args) != 3 or not args[1].isdigit() or not args[2].isdigit():
        return await message.reply(
            "‚ÑπÔ∏è <b>–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å '–ü–∏–≤–Ω—É—é —Ä—É–ª–µ—Ç–∫—É':</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/roulette &lt;—Å—Ç–∞–≤–∫–∞&gt; &lt;–∏–≥—Ä–æ–∫–∏&gt;</code>\n\n"
            "‚Ä¢ <code>&lt;—Å—Ç–∞–≤–∫–∞&gt;</code>: –æ—Ç 5 –¥–æ 100 üç∫\n"
            "‚Ä¢ <code>&lt;–∏–≥—Ä–æ–∫–∏&gt;</code>: –æ—Ç 2 –¥–æ 6 —á–µ–ª–æ–≤–µ–∫\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/roulette 10 4</code>", parse_mode='HTML'
        )
    chat_id = message.chat.id
    if chat_id in active_games: return await message.reply("–í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞.")
    if chat_id in chat_cooldowns:
        time_since = datetime.now() - chat_cooldowns[chat_id]
        if time_since.total_seconds() < ROULETTE_COOLDOWN_SECONDS:
            remaining = timedelta(seconds=ROULETTE_COOLDOWN_SECONDS) - time_since
            return await message.reply(f"–°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑: {format_time_delta(remaining)}.")
    stake, max_players = int(args[1]), int(args[2])
    if not (5 <= stake <= 100): return await message.reply("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 100 üç∫.")
    if not (2 <= max_players <= 6): return await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 6.")
    creator = message.from_user
    if not await check_user_registered(message, bot): return
    creator_balance = await db.get_user_beer_rating(creator.id)
    if creator_balance < stake: return await message.reply(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–≤–∞. –ù—É–∂–Ω–æ {stake} üç∫, —É –≤–∞—Å {creator_balance} üç∫.")
    await db.change_rating(creator.id, -stake)
    lobby_message = await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏...")
    game = GameState(creator, stake, max_players, lobby_message.message_id)
    active_games[chat_id] = game
    with suppress(TelegramBadRequest): await bot.pin_chat_message(chat_id=chat_id, message_id=lobby_message.message_id, disable_notification=True)
    await lobby_message.edit_text(await generate_lobby_text(game), reply_markup=get_roulette_keyboard(game, creator.id), parse_mode='HTML')
    game.task = asyncio.create_task(schedule_game_start(chat_id, bot))

@router.callback_query(RouletteCallbackData.filter())
async def on_roulette_button_click(callback: CallbackQuery, callback_data: RouletteCallbackData, bot: Bot):
    chat_id = callback.message.chat.id
    user = callback.from_user
    if chat_id not in active_games: return await callback.answer("–≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
    game = active_games[chat_id]
    action = callback_data.action
    if action == "join":
        if user.id in game.players: return await callback.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!", show_alert=True)
        if len(game.players) >= game.max_players: return await callback.answer("–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.", show_alert=True)
        if not await check_user_registered(callback, bot): return
        balance = await db.get_user_beer_rating(user.id)
        if balance < game.stake: return await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏–≤–∞! –ù—É–∂–Ω–æ {game.stake} üç∫, —É –≤–∞—Å {balance} üç∫.", show_alert=True)
        await db.change_rating(user.id, -game.stake)
        game.players[user.id] = user
        await callback.answer("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!")
        if len(game.players) == game.max_players:
            if game.task: game.task.cancel()
            await start_roulette_game(chat_id, bot)
        else:
            await callback.message.edit_text(await generate_lobby_text(game), reply_markup=get_roulette_keyboard(game, user.id), parse_mode='HTML')
    elif action == "leave":
        if user.id not in game.players: return await callback.answer("–í—ã –Ω–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.", show_alert=True)
        if user.id == game.creator.id: return await callback.answer("–°–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É. –¢–æ–ª—å–∫–æ –æ—Ç–º–µ–Ω–∏—Ç—å.", show_alert=True)
        del game.players[user.id]
        await db.change_rating(user.id, game.stake)
        await callback.answer("–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∏–≥—Ä—É, –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.", show_alert=True)
        await callback.message.edit_text(await generate_lobby_text(game), reply_markup=get_roulette_keyboard(game, user.id), parse_mode='HTML')
    elif action == "cancel":
        if user.id != game.creator.id: return await callback.answer("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É.", show_alert=True)
        if game.task: game.task.cancel()
        for player_id in game.players: await db.change_rating(player_id, game.stake)
        del active_games[chat_id]
        with suppress(TelegramBadRequest): await bot.unpin_chat_message(chat_id=chat_id, message_id=game.lobby_message_id)
        await callback.message.edit_text("–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º. –í—Å–µ —Å—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        await callback.answer()

async def schedule_game_start(chat_id: int, bot: Bot):
    try:
        await asyncio.sleep(ROULETTE_LOBBY_TIMEOUT_SECONDS)
        if chat_id not in active_games: return
        game = active_games[chat_id]
        if len(game.players) >= 2:
            await start_roulette_game(chat_id, bot)
        else:
            await db.change_rating(game.creator.id, game.stake)
            await bot.edit_message_text(text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", chat_id=chat_id, message_id=game.lobby_message_id, reply_markup=None)
            with suppress(TelegramBadRequest):
                await bot.unpin_chat_message(chat_id=chat_id, message_id=game.lobby_message_id)
            del active_games[chat_id]
    except asyncio.CancelledError:
        pass
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ schedule_game_start –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")
        if chat_id in active_games:
            del active_games[chat_id]

# --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨ ---
async def start_roulette_game(chat_id: int, bot: Bot):
    if chat_id not in active_games: return
    game = active_games[chat_id]
    
    # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–æ–±–±–∏
    with suppress(TelegramBadRequest): await bot.unpin_chat_message(chat_id=chat_id, message_id=game.lobby_message_id)
    await bot.edit_message_text(text=f"–í—Å–µ –≤ —Å–±–æ—Ä–µ! –°—Ç–∞–≤–∫–∏ ({game.stake} üç∫ —Å –∫–∞–∂–¥–æ–≥–æ) —Å–¥–µ–ª–∞–Ω—ã. –ù–∞—á–∏–Ω–∞–µ–º —Ä—É–ª–µ—Ç–∫—É...", chat_id=chat_id, message_id=game.lobby_message_id, reply_markup=None)
    
    await asyncio.sleep(3)

    players_in_game = list(game.players.values())
    round_num = 1
    
    while len(players_in_game) > 1:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—É–Ω–¥–∞
        await bot.send_message(chat_id, f"üçª <b>–†–∞—É–Ω–¥ {round_num}</b>. –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω... üî´", parse_mode='HTML')
        await asyncio.sleep(5) # –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞

        loser = random.choice(players_in_game)
        players_in_game.remove(loser)
        
        remaining_players_text = "\n".join(f"‚Ä¢ {p.full_name}" for p in players_in_game)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞—É–Ω–¥–∞
        await bot.send_message(
            chat_id,
            text=f"–í—ã–±—ã–≤–∞–µ—Ç... <b>{loser.full_name}</b>! üòñ\n\n"
                 f"<i>–û—Å—Ç–∞–ª–∏—Å—å –≤ –∏–≥—Ä–µ:</i>\n{remaining_players_text}",
            parse_mode='HTML'
        )
        round_num += 1
        await asyncio.sleep(7) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞—É–Ω–¥–æ–º
        
    winner = players_in_game[0]
    prize = game.stake * len(game.players)
    await db.change_rating(winner.id, prize)
    
    winner_text = (
        f"üèÜ <b>–ü–û–ë–ï–î–ò–¢–ï–õ–¨!</b> üèÜ\n\n"
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, <b>{winner.full_name}</b>! –û–Ω –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è –¥–æ –∫–æ–Ω—Ü–∞ –∏ –∑–∞–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å –±–∞–Ω–∫: <b>{prize} üç∫</b>!\n\n"
        f"<i>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.</i>"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ
    winner_message = await bot.send_message(chat_id, text=winner_text, parse_mode='HTML')
    with suppress(TelegramBadRequest):
        await bot.pin_chat_message(chat_id=chat_id, message_id=winner_message.message_id, disable_notification=True)
        asyncio.create_task(unpin_after_delay(chat_id, winner_message.message_id, bot, 120))
        
    del active_games[chat_id]
    chat_cooldowns[chat_id] = datetime.now()

async def unpin_after_delay(chat_id: int, message_id: int, bot: Bot, delay: int):
    await asyncio.sleep(delay)
    with suppress(TelegramBadRequest):
        await bot.unpin_chat_message(chat_id=chat_id, message_id=message_id)
